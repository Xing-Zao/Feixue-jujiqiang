
jujiqiang-battery-v1.1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008084  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08008140  08008140  00018140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008328  08008328  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008330  08008330  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008334  08008334  00018334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  20000074  080083ac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a0c  080083ac  00020a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018f1c  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003861  00000000  00000000  00038fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003c820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a563  00000000  00000000  0003ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aa6  00000000  00000000  000591bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d8e4  00000000  00000000  00070c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010e545  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049d8  00000000  00000000  0010e598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008128 	.word	0x08008128

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08008128 	.word	0x08008128

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fc3b 	bl	8000c74 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fbbf 	bl	8000b8c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fc2d 	bl	8000c74 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fc23 	bl	8000c74 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fbcd 	bl	8000bdc <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fbc3 	bl	8000bdc <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_uldivmod>:
 8000464:	2b00      	cmp	r3, #0
 8000466:	d111      	bne.n	800048c <__aeabi_uldivmod+0x28>
 8000468:	2a00      	cmp	r2, #0
 800046a:	d10f      	bne.n	800048c <__aeabi_uldivmod+0x28>
 800046c:	2900      	cmp	r1, #0
 800046e:	d100      	bne.n	8000472 <__aeabi_uldivmod+0xe>
 8000470:	2800      	cmp	r0, #0
 8000472:	d002      	beq.n	800047a <__aeabi_uldivmod+0x16>
 8000474:	2100      	movs	r1, #0
 8000476:	43c9      	mvns	r1, r1
 8000478:	1c08      	adds	r0, r1, #0
 800047a:	b407      	push	{r0, r1, r2}
 800047c:	4802      	ldr	r0, [pc, #8]	; (8000488 <__aeabi_uldivmod+0x24>)
 800047e:	a102      	add	r1, pc, #8	; (adr r1, 8000488 <__aeabi_uldivmod+0x24>)
 8000480:	1840      	adds	r0, r0, r1
 8000482:	9002      	str	r0, [sp, #8]
 8000484:	bd03      	pop	{r0, r1, pc}
 8000486:	46c0      	nop			; (mov r8, r8)
 8000488:	ffffff65 	.word	0xffffff65
 800048c:	b403      	push	{r0, r1}
 800048e:	4668      	mov	r0, sp
 8000490:	b501      	push	{r0, lr}
 8000492:	9802      	ldr	r0, [sp, #8]
 8000494:	f000 f806 	bl	80004a4 <__udivmoddi4>
 8000498:	9b01      	ldr	r3, [sp, #4]
 800049a:	469e      	mov	lr, r3
 800049c:	b002      	add	sp, #8
 800049e:	bc0c      	pop	{r2, r3}
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__udivmoddi4>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	464e      	mov	r6, r9
 80004aa:	4645      	mov	r5, r8
 80004ac:	46de      	mov	lr, fp
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	0004      	movs	r4, r0
 80004b2:	000d      	movs	r5, r1
 80004b4:	4692      	mov	sl, r2
 80004b6:	4699      	mov	r9, r3
 80004b8:	b083      	sub	sp, #12
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d830      	bhi.n	8000520 <__udivmoddi4+0x7c>
 80004be:	d02d      	beq.n	800051c <__udivmoddi4+0x78>
 80004c0:	4649      	mov	r1, r9
 80004c2:	4650      	mov	r0, sl
 80004c4:	f000 fc84 	bl	8000dd0 <__clzdi2>
 80004c8:	0029      	movs	r1, r5
 80004ca:	0006      	movs	r6, r0
 80004cc:	0020      	movs	r0, r4
 80004ce:	f000 fc7f 	bl	8000dd0 <__clzdi2>
 80004d2:	1a33      	subs	r3, r6, r0
 80004d4:	4698      	mov	r8, r3
 80004d6:	3b20      	subs	r3, #32
 80004d8:	469b      	mov	fp, r3
 80004da:	d433      	bmi.n	8000544 <__udivmoddi4+0xa0>
 80004dc:	465a      	mov	r2, fp
 80004de:	4653      	mov	r3, sl
 80004e0:	4093      	lsls	r3, r2
 80004e2:	4642      	mov	r2, r8
 80004e4:	001f      	movs	r7, r3
 80004e6:	4653      	mov	r3, sl
 80004e8:	4093      	lsls	r3, r2
 80004ea:	001e      	movs	r6, r3
 80004ec:	42af      	cmp	r7, r5
 80004ee:	d83a      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d100      	bne.n	80004f6 <__udivmoddi4+0x52>
 80004f4:	e078      	b.n	80005e8 <__udivmoddi4+0x144>
 80004f6:	465b      	mov	r3, fp
 80004f8:	1ba4      	subs	r4, r4, r6
 80004fa:	41bd      	sbcs	r5, r7
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	da00      	bge.n	8000502 <__udivmoddi4+0x5e>
 8000500:	e075      	b.n	80005ee <__udivmoddi4+0x14a>
 8000502:	2200      	movs	r2, #0
 8000504:	2300      	movs	r3, #0
 8000506:	9200      	str	r2, [sp, #0]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	2301      	movs	r3, #1
 800050c:	465a      	mov	r2, fp
 800050e:	4093      	lsls	r3, r2
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2301      	movs	r3, #1
 8000514:	4642      	mov	r2, r8
 8000516:	4093      	lsls	r3, r2
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	e028      	b.n	800056e <__udivmoddi4+0xca>
 800051c:	4282      	cmp	r2, r0
 800051e:	d9cf      	bls.n	80004c0 <__udivmoddi4+0x1c>
 8000520:	2200      	movs	r2, #0
 8000522:	2300      	movs	r3, #0
 8000524:	9200      	str	r2, [sp, #0]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <__udivmoddi4+0x8e>
 800052e:	601c      	str	r4, [r3, #0]
 8000530:	605d      	str	r5, [r3, #4]
 8000532:	9800      	ldr	r0, [sp, #0]
 8000534:	9901      	ldr	r1, [sp, #4]
 8000536:	b003      	add	sp, #12
 8000538:	bcf0      	pop	{r4, r5, r6, r7}
 800053a:	46bb      	mov	fp, r7
 800053c:	46b2      	mov	sl, r6
 800053e:	46a9      	mov	r9, r5
 8000540:	46a0      	mov	r8, r4
 8000542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000544:	4642      	mov	r2, r8
 8000546:	2320      	movs	r3, #32
 8000548:	1a9b      	subs	r3, r3, r2
 800054a:	4652      	mov	r2, sl
 800054c:	40da      	lsrs	r2, r3
 800054e:	4641      	mov	r1, r8
 8000550:	0013      	movs	r3, r2
 8000552:	464a      	mov	r2, r9
 8000554:	408a      	lsls	r2, r1
 8000556:	0017      	movs	r7, r2
 8000558:	4642      	mov	r2, r8
 800055a:	431f      	orrs	r7, r3
 800055c:	4653      	mov	r3, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	001e      	movs	r6, r3
 8000562:	42af      	cmp	r7, r5
 8000564:	d9c4      	bls.n	80004f0 <__udivmoddi4+0x4c>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	4643      	mov	r3, r8
 8000570:	2b00      	cmp	r3, #0
 8000572:	d0d9      	beq.n	8000528 <__udivmoddi4+0x84>
 8000574:	07fb      	lsls	r3, r7, #31
 8000576:	0872      	lsrs	r2, r6, #1
 8000578:	431a      	orrs	r2, r3
 800057a:	4646      	mov	r6, r8
 800057c:	087b      	lsrs	r3, r7, #1
 800057e:	e00e      	b.n	800059e <__udivmoddi4+0xfa>
 8000580:	42ab      	cmp	r3, r5
 8000582:	d101      	bne.n	8000588 <__udivmoddi4+0xe4>
 8000584:	42a2      	cmp	r2, r4
 8000586:	d80c      	bhi.n	80005a2 <__udivmoddi4+0xfe>
 8000588:	1aa4      	subs	r4, r4, r2
 800058a:	419d      	sbcs	r5, r3
 800058c:	2001      	movs	r0, #1
 800058e:	1924      	adds	r4, r4, r4
 8000590:	416d      	adcs	r5, r5
 8000592:	2100      	movs	r1, #0
 8000594:	3e01      	subs	r6, #1
 8000596:	1824      	adds	r4, r4, r0
 8000598:	414d      	adcs	r5, r1
 800059a:	2e00      	cmp	r6, #0
 800059c:	d006      	beq.n	80005ac <__udivmoddi4+0x108>
 800059e:	42ab      	cmp	r3, r5
 80005a0:	d9ee      	bls.n	8000580 <__udivmoddi4+0xdc>
 80005a2:	3e01      	subs	r6, #1
 80005a4:	1924      	adds	r4, r4, r4
 80005a6:	416d      	adcs	r5, r5
 80005a8:	2e00      	cmp	r6, #0
 80005aa:	d1f8      	bne.n	800059e <__udivmoddi4+0xfa>
 80005ac:	9800      	ldr	r0, [sp, #0]
 80005ae:	9901      	ldr	r1, [sp, #4]
 80005b0:	465b      	mov	r3, fp
 80005b2:	1900      	adds	r0, r0, r4
 80005b4:	4169      	adcs	r1, r5
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	db24      	blt.n	8000604 <__udivmoddi4+0x160>
 80005ba:	002b      	movs	r3, r5
 80005bc:	465a      	mov	r2, fp
 80005be:	4644      	mov	r4, r8
 80005c0:	40d3      	lsrs	r3, r2
 80005c2:	002a      	movs	r2, r5
 80005c4:	40e2      	lsrs	r2, r4
 80005c6:	001c      	movs	r4, r3
 80005c8:	465b      	mov	r3, fp
 80005ca:	0015      	movs	r5, r2
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	db2a      	blt.n	8000626 <__udivmoddi4+0x182>
 80005d0:	0026      	movs	r6, r4
 80005d2:	409e      	lsls	r6, r3
 80005d4:	0033      	movs	r3, r6
 80005d6:	0026      	movs	r6, r4
 80005d8:	4647      	mov	r7, r8
 80005da:	40be      	lsls	r6, r7
 80005dc:	0032      	movs	r2, r6
 80005de:	1a80      	subs	r0, r0, r2
 80005e0:	4199      	sbcs	r1, r3
 80005e2:	9000      	str	r0, [sp, #0]
 80005e4:	9101      	str	r1, [sp, #4]
 80005e6:	e79f      	b.n	8000528 <__udivmoddi4+0x84>
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d8bc      	bhi.n	8000566 <__udivmoddi4+0xc2>
 80005ec:	e783      	b.n	80004f6 <__udivmoddi4+0x52>
 80005ee:	4642      	mov	r2, r8
 80005f0:	2320      	movs	r3, #32
 80005f2:	2100      	movs	r1, #0
 80005f4:	1a9b      	subs	r3, r3, r2
 80005f6:	2200      	movs	r2, #0
 80005f8:	9100      	str	r1, [sp, #0]
 80005fa:	9201      	str	r2, [sp, #4]
 80005fc:	2201      	movs	r2, #1
 80005fe:	40da      	lsrs	r2, r3
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	e786      	b.n	8000512 <__udivmoddi4+0x6e>
 8000604:	4642      	mov	r2, r8
 8000606:	2320      	movs	r3, #32
 8000608:	1a9b      	subs	r3, r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	4646      	mov	r6, r8
 800060e:	409a      	lsls	r2, r3
 8000610:	0023      	movs	r3, r4
 8000612:	40f3      	lsrs	r3, r6
 8000614:	4644      	mov	r4, r8
 8000616:	4313      	orrs	r3, r2
 8000618:	002a      	movs	r2, r5
 800061a:	40e2      	lsrs	r2, r4
 800061c:	001c      	movs	r4, r3
 800061e:	465b      	mov	r3, fp
 8000620:	0015      	movs	r5, r2
 8000622:	2b00      	cmp	r3, #0
 8000624:	dad4      	bge.n	80005d0 <__udivmoddi4+0x12c>
 8000626:	4642      	mov	r2, r8
 8000628:	002f      	movs	r7, r5
 800062a:	2320      	movs	r3, #32
 800062c:	0026      	movs	r6, r4
 800062e:	4097      	lsls	r7, r2
 8000630:	1a9b      	subs	r3, r3, r2
 8000632:	40de      	lsrs	r6, r3
 8000634:	003b      	movs	r3, r7
 8000636:	4333      	orrs	r3, r6
 8000638:	e7cd      	b.n	80005d6 <__udivmoddi4+0x132>
 800063a:	46c0      	nop			; (mov r8, r8)

0800063c <__aeabi_fadd>:
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063e:	4646      	mov	r6, r8
 8000640:	46d6      	mov	lr, sl
 8000642:	464f      	mov	r7, r9
 8000644:	024d      	lsls	r5, r1, #9
 8000646:	0242      	lsls	r2, r0, #9
 8000648:	b5c0      	push	{r6, r7, lr}
 800064a:	0a52      	lsrs	r2, r2, #9
 800064c:	0a6e      	lsrs	r6, r5, #9
 800064e:	0047      	lsls	r7, r0, #1
 8000650:	46b0      	mov	r8, r6
 8000652:	0e3f      	lsrs	r7, r7, #24
 8000654:	004e      	lsls	r6, r1, #1
 8000656:	0fc4      	lsrs	r4, r0, #31
 8000658:	00d0      	lsls	r0, r2, #3
 800065a:	4694      	mov	ip, r2
 800065c:	003b      	movs	r3, r7
 800065e:	4682      	mov	sl, r0
 8000660:	0e36      	lsrs	r6, r6, #24
 8000662:	0fc9      	lsrs	r1, r1, #31
 8000664:	09ad      	lsrs	r5, r5, #6
 8000666:	428c      	cmp	r4, r1
 8000668:	d06d      	beq.n	8000746 <__aeabi_fadd+0x10a>
 800066a:	1bb8      	subs	r0, r7, r6
 800066c:	4681      	mov	r9, r0
 800066e:	2800      	cmp	r0, #0
 8000670:	dd4d      	ble.n	800070e <__aeabi_fadd+0xd2>
 8000672:	2e00      	cmp	r6, #0
 8000674:	d100      	bne.n	8000678 <__aeabi_fadd+0x3c>
 8000676:	e088      	b.n	800078a <__aeabi_fadd+0x14e>
 8000678:	2fff      	cmp	r7, #255	; 0xff
 800067a:	d05a      	beq.n	8000732 <__aeabi_fadd+0xf6>
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	04db      	lsls	r3, r3, #19
 8000680:	431d      	orrs	r5, r3
 8000682:	464b      	mov	r3, r9
 8000684:	2201      	movs	r2, #1
 8000686:	2b1b      	cmp	r3, #27
 8000688:	dc0a      	bgt.n	80006a0 <__aeabi_fadd+0x64>
 800068a:	002b      	movs	r3, r5
 800068c:	464a      	mov	r2, r9
 800068e:	4649      	mov	r1, r9
 8000690:	40d3      	lsrs	r3, r2
 8000692:	2220      	movs	r2, #32
 8000694:	1a52      	subs	r2, r2, r1
 8000696:	4095      	lsls	r5, r2
 8000698:	002a      	movs	r2, r5
 800069a:	1e55      	subs	r5, r2, #1
 800069c:	41aa      	sbcs	r2, r5
 800069e:	431a      	orrs	r2, r3
 80006a0:	4653      	mov	r3, sl
 80006a2:	1a9a      	subs	r2, r3, r2
 80006a4:	0153      	lsls	r3, r2, #5
 80006a6:	d400      	bmi.n	80006aa <__aeabi_fadd+0x6e>
 80006a8:	e0b9      	b.n	800081e <__aeabi_fadd+0x1e2>
 80006aa:	0192      	lsls	r2, r2, #6
 80006ac:	0996      	lsrs	r6, r2, #6
 80006ae:	0030      	movs	r0, r6
 80006b0:	f000 fb70 	bl	8000d94 <__clzsi2>
 80006b4:	3805      	subs	r0, #5
 80006b6:	4086      	lsls	r6, r0
 80006b8:	4287      	cmp	r7, r0
 80006ba:	dd00      	ble.n	80006be <__aeabi_fadd+0x82>
 80006bc:	e0d4      	b.n	8000868 <__aeabi_fadd+0x22c>
 80006be:	0033      	movs	r3, r6
 80006c0:	1bc7      	subs	r7, r0, r7
 80006c2:	2020      	movs	r0, #32
 80006c4:	3701      	adds	r7, #1
 80006c6:	40fb      	lsrs	r3, r7
 80006c8:	1bc7      	subs	r7, r0, r7
 80006ca:	40be      	lsls	r6, r7
 80006cc:	0032      	movs	r2, r6
 80006ce:	1e56      	subs	r6, r2, #1
 80006d0:	41b2      	sbcs	r2, r6
 80006d2:	2700      	movs	r7, #0
 80006d4:	431a      	orrs	r2, r3
 80006d6:	0753      	lsls	r3, r2, #29
 80006d8:	d004      	beq.n	80006e4 <__aeabi_fadd+0xa8>
 80006da:	230f      	movs	r3, #15
 80006dc:	4013      	ands	r3, r2
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d000      	beq.n	80006e4 <__aeabi_fadd+0xa8>
 80006e2:	3204      	adds	r2, #4
 80006e4:	0153      	lsls	r3, r2, #5
 80006e6:	d400      	bmi.n	80006ea <__aeabi_fadd+0xae>
 80006e8:	e09c      	b.n	8000824 <__aeabi_fadd+0x1e8>
 80006ea:	1c7b      	adds	r3, r7, #1
 80006ec:	2ffe      	cmp	r7, #254	; 0xfe
 80006ee:	d100      	bne.n	80006f2 <__aeabi_fadd+0xb6>
 80006f0:	e09a      	b.n	8000828 <__aeabi_fadd+0x1ec>
 80006f2:	0192      	lsls	r2, r2, #6
 80006f4:	0a52      	lsrs	r2, r2, #9
 80006f6:	4694      	mov	ip, r2
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	05d8      	lsls	r0, r3, #23
 80006fc:	4663      	mov	r3, ip
 80006fe:	07e4      	lsls	r4, r4, #31
 8000700:	4318      	orrs	r0, r3
 8000702:	4320      	orrs	r0, r4
 8000704:	bce0      	pop	{r5, r6, r7}
 8000706:	46ba      	mov	sl, r7
 8000708:	46b1      	mov	r9, r6
 800070a:	46a8      	mov	r8, r5
 800070c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070e:	2800      	cmp	r0, #0
 8000710:	d049      	beq.n	80007a6 <__aeabi_fadd+0x16a>
 8000712:	1bf3      	subs	r3, r6, r7
 8000714:	2f00      	cmp	r7, #0
 8000716:	d000      	beq.n	800071a <__aeabi_fadd+0xde>
 8000718:	e0b6      	b.n	8000888 <__aeabi_fadd+0x24c>
 800071a:	4652      	mov	r2, sl
 800071c:	2a00      	cmp	r2, #0
 800071e:	d060      	beq.n	80007e2 <__aeabi_fadd+0x1a6>
 8000720:	3b01      	subs	r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_fadd+0xec>
 8000726:	e0fc      	b.n	8000922 <__aeabi_fadd+0x2e6>
 8000728:	2eff      	cmp	r6, #255	; 0xff
 800072a:	d000      	beq.n	800072e <__aeabi_fadd+0xf2>
 800072c:	e0b4      	b.n	8000898 <__aeabi_fadd+0x25c>
 800072e:	000c      	movs	r4, r1
 8000730:	4642      	mov	r2, r8
 8000732:	2a00      	cmp	r2, #0
 8000734:	d078      	beq.n	8000828 <__aeabi_fadd+0x1ec>
 8000736:	2080      	movs	r0, #128	; 0x80
 8000738:	03c0      	lsls	r0, r0, #15
 800073a:	4310      	orrs	r0, r2
 800073c:	0242      	lsls	r2, r0, #9
 800073e:	0a53      	lsrs	r3, r2, #9
 8000740:	469c      	mov	ip, r3
 8000742:	23ff      	movs	r3, #255	; 0xff
 8000744:	e7d9      	b.n	80006fa <__aeabi_fadd+0xbe>
 8000746:	1bb9      	subs	r1, r7, r6
 8000748:	2900      	cmp	r1, #0
 800074a:	dd71      	ble.n	8000830 <__aeabi_fadd+0x1f4>
 800074c:	2e00      	cmp	r6, #0
 800074e:	d03f      	beq.n	80007d0 <__aeabi_fadd+0x194>
 8000750:	2fff      	cmp	r7, #255	; 0xff
 8000752:	d0ee      	beq.n	8000732 <__aeabi_fadd+0xf6>
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	04db      	lsls	r3, r3, #19
 8000758:	431d      	orrs	r5, r3
 800075a:	2201      	movs	r2, #1
 800075c:	291b      	cmp	r1, #27
 800075e:	dc07      	bgt.n	8000770 <__aeabi_fadd+0x134>
 8000760:	002a      	movs	r2, r5
 8000762:	2320      	movs	r3, #32
 8000764:	40ca      	lsrs	r2, r1
 8000766:	1a59      	subs	r1, r3, r1
 8000768:	408d      	lsls	r5, r1
 800076a:	1e6b      	subs	r3, r5, #1
 800076c:	419d      	sbcs	r5, r3
 800076e:	432a      	orrs	r2, r5
 8000770:	4452      	add	r2, sl
 8000772:	0153      	lsls	r3, r2, #5
 8000774:	d553      	bpl.n	800081e <__aeabi_fadd+0x1e2>
 8000776:	3701      	adds	r7, #1
 8000778:	2fff      	cmp	r7, #255	; 0xff
 800077a:	d055      	beq.n	8000828 <__aeabi_fadd+0x1ec>
 800077c:	2301      	movs	r3, #1
 800077e:	497b      	ldr	r1, [pc, #492]	; (800096c <__aeabi_fadd+0x330>)
 8000780:	4013      	ands	r3, r2
 8000782:	0852      	lsrs	r2, r2, #1
 8000784:	400a      	ands	r2, r1
 8000786:	431a      	orrs	r2, r3
 8000788:	e7a5      	b.n	80006d6 <__aeabi_fadd+0x9a>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d02c      	beq.n	80007e8 <__aeabi_fadd+0x1ac>
 800078e:	2301      	movs	r3, #1
 8000790:	425b      	negs	r3, r3
 8000792:	469c      	mov	ip, r3
 8000794:	44e1      	add	r9, ip
 8000796:	464b      	mov	r3, r9
 8000798:	2b00      	cmp	r3, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x162>
 800079c:	e0ad      	b.n	80008fa <__aeabi_fadd+0x2be>
 800079e:	2fff      	cmp	r7, #255	; 0xff
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x168>
 80007a2:	e76e      	b.n	8000682 <__aeabi_fadd+0x46>
 80007a4:	e7c5      	b.n	8000732 <__aeabi_fadd+0xf6>
 80007a6:	20fe      	movs	r0, #254	; 0xfe
 80007a8:	1c7e      	adds	r6, r7, #1
 80007aa:	4230      	tst	r0, r6
 80007ac:	d160      	bne.n	8000870 <__aeabi_fadd+0x234>
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x178>
 80007b2:	e093      	b.n	80008dc <__aeabi_fadd+0x2a0>
 80007b4:	4652      	mov	r2, sl
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d100      	bne.n	80007bc <__aeabi_fadd+0x180>
 80007ba:	e0b6      	b.n	800092a <__aeabi_fadd+0x2ee>
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d09c      	beq.n	80006fa <__aeabi_fadd+0xbe>
 80007c0:	1b52      	subs	r2, r2, r5
 80007c2:	0150      	lsls	r0, r2, #5
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fadd+0x18c>
 80007c6:	e0c3      	b.n	8000950 <__aeabi_fadd+0x314>
 80007c8:	4653      	mov	r3, sl
 80007ca:	000c      	movs	r4, r1
 80007cc:	1aea      	subs	r2, r5, r3
 80007ce:	e782      	b.n	80006d6 <__aeabi_fadd+0x9a>
 80007d0:	2d00      	cmp	r5, #0
 80007d2:	d009      	beq.n	80007e8 <__aeabi_fadd+0x1ac>
 80007d4:	3901      	subs	r1, #1
 80007d6:	2900      	cmp	r1, #0
 80007d8:	d100      	bne.n	80007dc <__aeabi_fadd+0x1a0>
 80007da:	e08b      	b.n	80008f4 <__aeabi_fadd+0x2b8>
 80007dc:	2fff      	cmp	r7, #255	; 0xff
 80007de:	d1bc      	bne.n	800075a <__aeabi_fadd+0x11e>
 80007e0:	e7a7      	b.n	8000732 <__aeabi_fadd+0xf6>
 80007e2:	000c      	movs	r4, r1
 80007e4:	4642      	mov	r2, r8
 80007e6:	0037      	movs	r7, r6
 80007e8:	2fff      	cmp	r7, #255	; 0xff
 80007ea:	d0a2      	beq.n	8000732 <__aeabi_fadd+0xf6>
 80007ec:	0252      	lsls	r2, r2, #9
 80007ee:	0a53      	lsrs	r3, r2, #9
 80007f0:	469c      	mov	ip, r3
 80007f2:	b2fb      	uxtb	r3, r7
 80007f4:	e781      	b.n	80006fa <__aeabi_fadd+0xbe>
 80007f6:	21fe      	movs	r1, #254	; 0xfe
 80007f8:	3701      	adds	r7, #1
 80007fa:	4239      	tst	r1, r7
 80007fc:	d165      	bne.n	80008ca <__aeabi_fadd+0x28e>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d17e      	bne.n	8000900 <__aeabi_fadd+0x2c4>
 8000802:	2800      	cmp	r0, #0
 8000804:	d100      	bne.n	8000808 <__aeabi_fadd+0x1cc>
 8000806:	e0aa      	b.n	800095e <__aeabi_fadd+0x322>
 8000808:	2d00      	cmp	r5, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fadd+0x1d2>
 800080c:	e775      	b.n	80006fa <__aeabi_fadd+0xbe>
 800080e:	002a      	movs	r2, r5
 8000810:	4452      	add	r2, sl
 8000812:	2700      	movs	r7, #0
 8000814:	0153      	lsls	r3, r2, #5
 8000816:	d502      	bpl.n	800081e <__aeabi_fadd+0x1e2>
 8000818:	4b55      	ldr	r3, [pc, #340]	; (8000970 <__aeabi_fadd+0x334>)
 800081a:	3701      	adds	r7, #1
 800081c:	401a      	ands	r2, r3
 800081e:	0753      	lsls	r3, r2, #29
 8000820:	d000      	beq.n	8000824 <__aeabi_fadd+0x1e8>
 8000822:	e75a      	b.n	80006da <__aeabi_fadd+0x9e>
 8000824:	08d2      	lsrs	r2, r2, #3
 8000826:	e7df      	b.n	80007e8 <__aeabi_fadd+0x1ac>
 8000828:	2200      	movs	r2, #0
 800082a:	23ff      	movs	r3, #255	; 0xff
 800082c:	4694      	mov	ip, r2
 800082e:	e764      	b.n	80006fa <__aeabi_fadd+0xbe>
 8000830:	2900      	cmp	r1, #0
 8000832:	d0e0      	beq.n	80007f6 <__aeabi_fadd+0x1ba>
 8000834:	1bf3      	subs	r3, r6, r7
 8000836:	2f00      	cmp	r7, #0
 8000838:	d03e      	beq.n	80008b8 <__aeabi_fadd+0x27c>
 800083a:	2eff      	cmp	r6, #255	; 0xff
 800083c:	d100      	bne.n	8000840 <__aeabi_fadd+0x204>
 800083e:	e777      	b.n	8000730 <__aeabi_fadd+0xf4>
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0001      	movs	r1, r0
 8000844:	04d2      	lsls	r2, r2, #19
 8000846:	4311      	orrs	r1, r2
 8000848:	468a      	mov	sl, r1
 800084a:	2201      	movs	r2, #1
 800084c:	2b1b      	cmp	r3, #27
 800084e:	dc08      	bgt.n	8000862 <__aeabi_fadd+0x226>
 8000850:	4652      	mov	r2, sl
 8000852:	2120      	movs	r1, #32
 8000854:	4650      	mov	r0, sl
 8000856:	40da      	lsrs	r2, r3
 8000858:	1acb      	subs	r3, r1, r3
 800085a:	4098      	lsls	r0, r3
 800085c:	1e43      	subs	r3, r0, #1
 800085e:	4198      	sbcs	r0, r3
 8000860:	4302      	orrs	r2, r0
 8000862:	0037      	movs	r7, r6
 8000864:	1952      	adds	r2, r2, r5
 8000866:	e784      	b.n	8000772 <__aeabi_fadd+0x136>
 8000868:	4a41      	ldr	r2, [pc, #260]	; (8000970 <__aeabi_fadd+0x334>)
 800086a:	1a3f      	subs	r7, r7, r0
 800086c:	4032      	ands	r2, r6
 800086e:	e732      	b.n	80006d6 <__aeabi_fadd+0x9a>
 8000870:	4653      	mov	r3, sl
 8000872:	1b5e      	subs	r6, r3, r5
 8000874:	0173      	lsls	r3, r6, #5
 8000876:	d42d      	bmi.n	80008d4 <__aeabi_fadd+0x298>
 8000878:	2e00      	cmp	r6, #0
 800087a:	d000      	beq.n	800087e <__aeabi_fadd+0x242>
 800087c:	e717      	b.n	80006ae <__aeabi_fadd+0x72>
 800087e:	2200      	movs	r2, #0
 8000880:	2400      	movs	r4, #0
 8000882:	2300      	movs	r3, #0
 8000884:	4694      	mov	ip, r2
 8000886:	e738      	b.n	80006fa <__aeabi_fadd+0xbe>
 8000888:	2eff      	cmp	r6, #255	; 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x252>
 800088c:	e74f      	b.n	800072e <__aeabi_fadd+0xf2>
 800088e:	2280      	movs	r2, #128	; 0x80
 8000890:	4650      	mov	r0, sl
 8000892:	04d2      	lsls	r2, r2, #19
 8000894:	4310      	orrs	r0, r2
 8000896:	4682      	mov	sl, r0
 8000898:	2201      	movs	r2, #1
 800089a:	2b1b      	cmp	r3, #27
 800089c:	dc08      	bgt.n	80008b0 <__aeabi_fadd+0x274>
 800089e:	4652      	mov	r2, sl
 80008a0:	2420      	movs	r4, #32
 80008a2:	4650      	mov	r0, sl
 80008a4:	40da      	lsrs	r2, r3
 80008a6:	1ae3      	subs	r3, r4, r3
 80008a8:	4098      	lsls	r0, r3
 80008aa:	1e43      	subs	r3, r0, #1
 80008ac:	4198      	sbcs	r0, r3
 80008ae:	4302      	orrs	r2, r0
 80008b0:	000c      	movs	r4, r1
 80008b2:	0037      	movs	r7, r6
 80008b4:	1aaa      	subs	r2, r5, r2
 80008b6:	e6f5      	b.n	80006a4 <__aeabi_fadd+0x68>
 80008b8:	2800      	cmp	r0, #0
 80008ba:	d093      	beq.n	80007e4 <__aeabi_fadd+0x1a8>
 80008bc:	3b01      	subs	r3, #1
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d04f      	beq.n	8000962 <__aeabi_fadd+0x326>
 80008c2:	2eff      	cmp	r6, #255	; 0xff
 80008c4:	d1c1      	bne.n	800084a <__aeabi_fadd+0x20e>
 80008c6:	4642      	mov	r2, r8
 80008c8:	e733      	b.n	8000732 <__aeabi_fadd+0xf6>
 80008ca:	2fff      	cmp	r7, #255	; 0xff
 80008cc:	d0ac      	beq.n	8000828 <__aeabi_fadd+0x1ec>
 80008ce:	4455      	add	r5, sl
 80008d0:	086a      	lsrs	r2, r5, #1
 80008d2:	e7a4      	b.n	800081e <__aeabi_fadd+0x1e2>
 80008d4:	4653      	mov	r3, sl
 80008d6:	000c      	movs	r4, r1
 80008d8:	1aee      	subs	r6, r5, r3
 80008da:	e6e8      	b.n	80006ae <__aeabi_fadd+0x72>
 80008dc:	4653      	mov	r3, sl
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d128      	bne.n	8000934 <__aeabi_fadd+0x2f8>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fadd+0x2ac>
 80008e6:	e722      	b.n	800072e <__aeabi_fadd+0xf2>
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	03db      	lsls	r3, r3, #15
 80008ec:	469c      	mov	ip, r3
 80008ee:	2400      	movs	r4, #0
 80008f0:	23ff      	movs	r3, #255	; 0xff
 80008f2:	e702      	b.n	80006fa <__aeabi_fadd+0xbe>
 80008f4:	002a      	movs	r2, r5
 80008f6:	4452      	add	r2, sl
 80008f8:	e73b      	b.n	8000772 <__aeabi_fadd+0x136>
 80008fa:	4653      	mov	r3, sl
 80008fc:	1b5a      	subs	r2, r3, r5
 80008fe:	e6d1      	b.n	80006a4 <__aeabi_fadd+0x68>
 8000900:	2800      	cmp	r0, #0
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x2ca>
 8000904:	e714      	b.n	8000730 <__aeabi_fadd+0xf4>
 8000906:	2d00      	cmp	r5, #0
 8000908:	d100      	bne.n	800090c <__aeabi_fadd+0x2d0>
 800090a:	e712      	b.n	8000732 <__aeabi_fadd+0xf6>
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	03db      	lsls	r3, r3, #15
 8000910:	421a      	tst	r2, r3
 8000912:	d100      	bne.n	8000916 <__aeabi_fadd+0x2da>
 8000914:	e70d      	b.n	8000732 <__aeabi_fadd+0xf6>
 8000916:	4641      	mov	r1, r8
 8000918:	4219      	tst	r1, r3
 800091a:	d000      	beq.n	800091e <__aeabi_fadd+0x2e2>
 800091c:	e709      	b.n	8000732 <__aeabi_fadd+0xf6>
 800091e:	4642      	mov	r2, r8
 8000920:	e707      	b.n	8000732 <__aeabi_fadd+0xf6>
 8000922:	000c      	movs	r4, r1
 8000924:	0037      	movs	r7, r6
 8000926:	1aaa      	subs	r2, r5, r2
 8000928:	e6bc      	b.n	80006a4 <__aeabi_fadd+0x68>
 800092a:	2d00      	cmp	r5, #0
 800092c:	d013      	beq.n	8000956 <__aeabi_fadd+0x31a>
 800092e:	000c      	movs	r4, r1
 8000930:	46c4      	mov	ip, r8
 8000932:	e6e2      	b.n	80006fa <__aeabi_fadd+0xbe>
 8000934:	2d00      	cmp	r5, #0
 8000936:	d100      	bne.n	800093a <__aeabi_fadd+0x2fe>
 8000938:	e6fb      	b.n	8000732 <__aeabi_fadd+0xf6>
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	03db      	lsls	r3, r3, #15
 800093e:	421a      	tst	r2, r3
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x308>
 8000942:	e6f6      	b.n	8000732 <__aeabi_fadd+0xf6>
 8000944:	4640      	mov	r0, r8
 8000946:	4218      	tst	r0, r3
 8000948:	d000      	beq.n	800094c <__aeabi_fadd+0x310>
 800094a:	e6f2      	b.n	8000732 <__aeabi_fadd+0xf6>
 800094c:	000c      	movs	r4, r1
 800094e:	e6ef      	b.n	8000730 <__aeabi_fadd+0xf4>
 8000950:	2a00      	cmp	r2, #0
 8000952:	d000      	beq.n	8000956 <__aeabi_fadd+0x31a>
 8000954:	e763      	b.n	800081e <__aeabi_fadd+0x1e2>
 8000956:	2200      	movs	r2, #0
 8000958:	2400      	movs	r4, #0
 800095a:	4694      	mov	ip, r2
 800095c:	e6cd      	b.n	80006fa <__aeabi_fadd+0xbe>
 800095e:	46c4      	mov	ip, r8
 8000960:	e6cb      	b.n	80006fa <__aeabi_fadd+0xbe>
 8000962:	002a      	movs	r2, r5
 8000964:	0037      	movs	r7, r6
 8000966:	4452      	add	r2, sl
 8000968:	e703      	b.n	8000772 <__aeabi_fadd+0x136>
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	7dffffff 	.word	0x7dffffff
 8000970:	fbffffff 	.word	0xfbffffff

08000974 <__aeabi_fdiv>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	464f      	mov	r7, r9
 8000978:	4646      	mov	r6, r8
 800097a:	46d6      	mov	lr, sl
 800097c:	0245      	lsls	r5, r0, #9
 800097e:	b5c0      	push	{r6, r7, lr}
 8000980:	0047      	lsls	r7, r0, #1
 8000982:	1c0c      	adds	r4, r1, #0
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	0e3f      	lsrs	r7, r7, #24
 8000988:	0fc6      	lsrs	r6, r0, #31
 800098a:	2f00      	cmp	r7, #0
 800098c:	d066      	beq.n	8000a5c <__aeabi_fdiv+0xe8>
 800098e:	2fff      	cmp	r7, #255	; 0xff
 8000990:	d06c      	beq.n	8000a6c <__aeabi_fdiv+0xf8>
 8000992:	2300      	movs	r3, #0
 8000994:	00ea      	lsls	r2, r5, #3
 8000996:	2580      	movs	r5, #128	; 0x80
 8000998:	4699      	mov	r9, r3
 800099a:	469a      	mov	sl, r3
 800099c:	04ed      	lsls	r5, r5, #19
 800099e:	4315      	orrs	r5, r2
 80009a0:	3f7f      	subs	r7, #127	; 0x7f
 80009a2:	0260      	lsls	r0, r4, #9
 80009a4:	0061      	lsls	r1, r4, #1
 80009a6:	0a43      	lsrs	r3, r0, #9
 80009a8:	4698      	mov	r8, r3
 80009aa:	0e09      	lsrs	r1, r1, #24
 80009ac:	0fe4      	lsrs	r4, r4, #31
 80009ae:	2900      	cmp	r1, #0
 80009b0:	d048      	beq.n	8000a44 <__aeabi_fdiv+0xd0>
 80009b2:	29ff      	cmp	r1, #255	; 0xff
 80009b4:	d010      	beq.n	80009d8 <__aeabi_fdiv+0x64>
 80009b6:	2280      	movs	r2, #128	; 0x80
 80009b8:	00d8      	lsls	r0, r3, #3
 80009ba:	04d2      	lsls	r2, r2, #19
 80009bc:	4302      	orrs	r2, r0
 80009be:	4690      	mov	r8, r2
 80009c0:	2000      	movs	r0, #0
 80009c2:	397f      	subs	r1, #127	; 0x7f
 80009c4:	464a      	mov	r2, r9
 80009c6:	0033      	movs	r3, r6
 80009c8:	1a7f      	subs	r7, r7, r1
 80009ca:	4302      	orrs	r2, r0
 80009cc:	496c      	ldr	r1, [pc, #432]	; (8000b80 <__aeabi_fdiv+0x20c>)
 80009ce:	0092      	lsls	r2, r2, #2
 80009d0:	588a      	ldr	r2, [r1, r2]
 80009d2:	4063      	eors	r3, r4
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4697      	mov	pc, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d16d      	bne.n	8000ab8 <__aeabi_fdiv+0x144>
 80009dc:	2002      	movs	r0, #2
 80009de:	3fff      	subs	r7, #255	; 0xff
 80009e0:	e033      	b.n	8000a4a <__aeabi_fdiv+0xd6>
 80009e2:	2300      	movs	r3, #0
 80009e4:	4698      	mov	r8, r3
 80009e6:	0026      	movs	r6, r4
 80009e8:	4645      	mov	r5, r8
 80009ea:	4682      	mov	sl, r0
 80009ec:	4653      	mov	r3, sl
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fdiv+0x80>
 80009f2:	e07f      	b.n	8000af4 <__aeabi_fdiv+0x180>
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d100      	bne.n	80009fa <__aeabi_fdiv+0x86>
 80009f8:	e094      	b.n	8000b24 <__aeabi_fdiv+0x1b0>
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d017      	beq.n	8000a2e <__aeabi_fdiv+0xba>
 80009fe:	0038      	movs	r0, r7
 8000a00:	307f      	adds	r0, #127	; 0x7f
 8000a02:	2800      	cmp	r0, #0
 8000a04:	dd5f      	ble.n	8000ac6 <__aeabi_fdiv+0x152>
 8000a06:	076b      	lsls	r3, r5, #29
 8000a08:	d004      	beq.n	8000a14 <__aeabi_fdiv+0xa0>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	402b      	ands	r3, r5
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fdiv+0xa0>
 8000a12:	3504      	adds	r5, #4
 8000a14:	012b      	lsls	r3, r5, #4
 8000a16:	d503      	bpl.n	8000a20 <__aeabi_fdiv+0xac>
 8000a18:	0038      	movs	r0, r7
 8000a1a:	4b5a      	ldr	r3, [pc, #360]	; (8000b84 <__aeabi_fdiv+0x210>)
 8000a1c:	3080      	adds	r0, #128	; 0x80
 8000a1e:	401d      	ands	r5, r3
 8000a20:	28fe      	cmp	r0, #254	; 0xfe
 8000a22:	dc67      	bgt.n	8000af4 <__aeabi_fdiv+0x180>
 8000a24:	01ad      	lsls	r5, r5, #6
 8000a26:	0a6d      	lsrs	r5, r5, #9
 8000a28:	b2c0      	uxtb	r0, r0
 8000a2a:	e002      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000a2c:	001e      	movs	r6, r3
 8000a2e:	2000      	movs	r0, #0
 8000a30:	2500      	movs	r5, #0
 8000a32:	05c0      	lsls	r0, r0, #23
 8000a34:	4328      	orrs	r0, r5
 8000a36:	07f6      	lsls	r6, r6, #31
 8000a38:	4330      	orrs	r0, r6
 8000a3a:	bce0      	pop	{r5, r6, r7}
 8000a3c:	46ba      	mov	sl, r7
 8000a3e:	46b1      	mov	r9, r6
 8000a40:	46a8      	mov	r8, r5
 8000a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d12b      	bne.n	8000aa0 <__aeabi_fdiv+0x12c>
 8000a48:	2001      	movs	r0, #1
 8000a4a:	464a      	mov	r2, r9
 8000a4c:	0033      	movs	r3, r6
 8000a4e:	494e      	ldr	r1, [pc, #312]	; (8000b88 <__aeabi_fdiv+0x214>)
 8000a50:	4302      	orrs	r2, r0
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	588a      	ldr	r2, [r1, r2]
 8000a56:	4063      	eors	r3, r4
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	4697      	mov	pc, r2
 8000a5c:	2d00      	cmp	r5, #0
 8000a5e:	d113      	bne.n	8000a88 <__aeabi_fdiv+0x114>
 8000a60:	2304      	movs	r3, #4
 8000a62:	4699      	mov	r9, r3
 8000a64:	3b03      	subs	r3, #3
 8000a66:	2700      	movs	r7, #0
 8000a68:	469a      	mov	sl, r3
 8000a6a:	e79a      	b.n	80009a2 <__aeabi_fdiv+0x2e>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_fdiv+0x108>
 8000a70:	2308      	movs	r3, #8
 8000a72:	4699      	mov	r9, r3
 8000a74:	3b06      	subs	r3, #6
 8000a76:	27ff      	movs	r7, #255	; 0xff
 8000a78:	469a      	mov	sl, r3
 8000a7a:	e792      	b.n	80009a2 <__aeabi_fdiv+0x2e>
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	4699      	mov	r9, r3
 8000a80:	3b09      	subs	r3, #9
 8000a82:	27ff      	movs	r7, #255	; 0xff
 8000a84:	469a      	mov	sl, r3
 8000a86:	e78c      	b.n	80009a2 <__aeabi_fdiv+0x2e>
 8000a88:	0028      	movs	r0, r5
 8000a8a:	f000 f983 	bl	8000d94 <__clzsi2>
 8000a8e:	2776      	movs	r7, #118	; 0x76
 8000a90:	1f43      	subs	r3, r0, #5
 8000a92:	409d      	lsls	r5, r3
 8000a94:	2300      	movs	r3, #0
 8000a96:	427f      	negs	r7, r7
 8000a98:	4699      	mov	r9, r3
 8000a9a:	469a      	mov	sl, r3
 8000a9c:	1a3f      	subs	r7, r7, r0
 8000a9e:	e780      	b.n	80009a2 <__aeabi_fdiv+0x2e>
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f977 	bl	8000d94 <__clzsi2>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	1f43      	subs	r3, r0, #5
 8000aaa:	2176      	movs	r1, #118	; 0x76
 8000aac:	409a      	lsls	r2, r3
 8000aae:	4249      	negs	r1, r1
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	e785      	b.n	80009c4 <__aeabi_fdiv+0x50>
 8000ab8:	21ff      	movs	r1, #255	; 0xff
 8000aba:	2003      	movs	r0, #3
 8000abc:	e782      	b.n	80009c4 <__aeabi_fdiv+0x50>
 8000abe:	001e      	movs	r6, r3
 8000ac0:	20ff      	movs	r0, #255	; 0xff
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	e7b5      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	1a1b      	subs	r3, r3, r0
 8000aca:	2b1b      	cmp	r3, #27
 8000acc:	dcaf      	bgt.n	8000a2e <__aeabi_fdiv+0xba>
 8000ace:	379e      	adds	r7, #158	; 0x9e
 8000ad0:	0029      	movs	r1, r5
 8000ad2:	40bd      	lsls	r5, r7
 8000ad4:	40d9      	lsrs	r1, r3
 8000ad6:	1e6a      	subs	r2, r5, #1
 8000ad8:	4195      	sbcs	r5, r2
 8000ada:	430d      	orrs	r5, r1
 8000adc:	076b      	lsls	r3, r5, #29
 8000ade:	d004      	beq.n	8000aea <__aeabi_fdiv+0x176>
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	402b      	ands	r3, r5
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	d000      	beq.n	8000aea <__aeabi_fdiv+0x176>
 8000ae8:	3504      	adds	r5, #4
 8000aea:	016b      	lsls	r3, r5, #5
 8000aec:	d544      	bpl.n	8000b78 <__aeabi_fdiv+0x204>
 8000aee:	2001      	movs	r0, #1
 8000af0:	2500      	movs	r5, #0
 8000af2:	e79e      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000af4:	20ff      	movs	r0, #255	; 0xff
 8000af6:	2500      	movs	r5, #0
 8000af8:	e79b      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000afa:	2580      	movs	r5, #128	; 0x80
 8000afc:	2600      	movs	r6, #0
 8000afe:	20ff      	movs	r0, #255	; 0xff
 8000b00:	03ed      	lsls	r5, r5, #15
 8000b02:	e796      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b04:	2300      	movs	r3, #0
 8000b06:	4698      	mov	r8, r3
 8000b08:	2080      	movs	r0, #128	; 0x80
 8000b0a:	03c0      	lsls	r0, r0, #15
 8000b0c:	4205      	tst	r5, r0
 8000b0e:	d009      	beq.n	8000b24 <__aeabi_fdiv+0x1b0>
 8000b10:	4643      	mov	r3, r8
 8000b12:	4203      	tst	r3, r0
 8000b14:	d106      	bne.n	8000b24 <__aeabi_fdiv+0x1b0>
 8000b16:	4645      	mov	r5, r8
 8000b18:	4305      	orrs	r5, r0
 8000b1a:	026d      	lsls	r5, r5, #9
 8000b1c:	0026      	movs	r6, r4
 8000b1e:	20ff      	movs	r0, #255	; 0xff
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	e786      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b24:	2080      	movs	r0, #128	; 0x80
 8000b26:	03c0      	lsls	r0, r0, #15
 8000b28:	4305      	orrs	r5, r0
 8000b2a:	026d      	lsls	r5, r5, #9
 8000b2c:	20ff      	movs	r0, #255	; 0xff
 8000b2e:	0a6d      	lsrs	r5, r5, #9
 8000b30:	e77f      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b32:	4641      	mov	r1, r8
 8000b34:	016a      	lsls	r2, r5, #5
 8000b36:	0148      	lsls	r0, r1, #5
 8000b38:	4282      	cmp	r2, r0
 8000b3a:	d219      	bcs.n	8000b70 <__aeabi_fdiv+0x1fc>
 8000b3c:	211b      	movs	r1, #27
 8000b3e:	2500      	movs	r5, #0
 8000b40:	3f01      	subs	r7, #1
 8000b42:	2601      	movs	r6, #1
 8000b44:	0014      	movs	r4, r2
 8000b46:	006d      	lsls	r5, r5, #1
 8000b48:	0052      	lsls	r2, r2, #1
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	db01      	blt.n	8000b52 <__aeabi_fdiv+0x1de>
 8000b4e:	4290      	cmp	r0, r2
 8000b50:	d801      	bhi.n	8000b56 <__aeabi_fdiv+0x1e2>
 8000b52:	1a12      	subs	r2, r2, r0
 8000b54:	4335      	orrs	r5, r6
 8000b56:	3901      	subs	r1, #1
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	d1f3      	bne.n	8000b44 <__aeabi_fdiv+0x1d0>
 8000b5c:	1e50      	subs	r0, r2, #1
 8000b5e:	4182      	sbcs	r2, r0
 8000b60:	0038      	movs	r0, r7
 8000b62:	307f      	adds	r0, #127	; 0x7f
 8000b64:	001e      	movs	r6, r3
 8000b66:	4315      	orrs	r5, r2
 8000b68:	2800      	cmp	r0, #0
 8000b6a:	dd00      	ble.n	8000b6e <__aeabi_fdiv+0x1fa>
 8000b6c:	e74b      	b.n	8000a06 <__aeabi_fdiv+0x92>
 8000b6e:	e7aa      	b.n	8000ac6 <__aeabi_fdiv+0x152>
 8000b70:	211a      	movs	r1, #26
 8000b72:	2501      	movs	r5, #1
 8000b74:	1a12      	subs	r2, r2, r0
 8000b76:	e7e4      	b.n	8000b42 <__aeabi_fdiv+0x1ce>
 8000b78:	01ad      	lsls	r5, r5, #6
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	0a6d      	lsrs	r5, r5, #9
 8000b7e:	e758      	b.n	8000a32 <__aeabi_fdiv+0xbe>
 8000b80:	08008154 	.word	0x08008154
 8000b84:	f7ffffff 	.word	0xf7ffffff
 8000b88:	08008194 	.word	0x08008194

08000b8c <__eqsf2>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	0042      	lsls	r2, r0, #1
 8000b90:	024e      	lsls	r6, r1, #9
 8000b92:	004c      	lsls	r4, r1, #1
 8000b94:	0245      	lsls	r5, r0, #9
 8000b96:	0a6d      	lsrs	r5, r5, #9
 8000b98:	0e12      	lsrs	r2, r2, #24
 8000b9a:	0fc3      	lsrs	r3, r0, #31
 8000b9c:	0a76      	lsrs	r6, r6, #9
 8000b9e:	0e24      	lsrs	r4, r4, #24
 8000ba0:	0fc9      	lsrs	r1, r1, #31
 8000ba2:	2aff      	cmp	r2, #255	; 0xff
 8000ba4:	d00f      	beq.n	8000bc6 <__eqsf2+0x3a>
 8000ba6:	2cff      	cmp	r4, #255	; 0xff
 8000ba8:	d011      	beq.n	8000bce <__eqsf2+0x42>
 8000baa:	2001      	movs	r0, #1
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	d000      	beq.n	8000bb2 <__eqsf2+0x26>
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
 8000bb2:	42b5      	cmp	r5, r6
 8000bb4:	d1fc      	bne.n	8000bb0 <__eqsf2+0x24>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d00d      	beq.n	8000bd6 <__eqsf2+0x4a>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	d1f8      	bne.n	8000bb0 <__eqsf2+0x24>
 8000bbe:	0028      	movs	r0, r5
 8000bc0:	1e45      	subs	r5, r0, #1
 8000bc2:	41a8      	sbcs	r0, r5
 8000bc4:	e7f4      	b.n	8000bb0 <__eqsf2+0x24>
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d1f1      	bne.n	8000bb0 <__eqsf2+0x24>
 8000bcc:	e7eb      	b.n	8000ba6 <__eqsf2+0x1a>
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2e00      	cmp	r6, #0
 8000bd2:	d1ed      	bne.n	8000bb0 <__eqsf2+0x24>
 8000bd4:	e7e9      	b.n	8000baa <__eqsf2+0x1e>
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	e7ea      	b.n	8000bb0 <__eqsf2+0x24>
 8000bda:	46c0      	nop			; (mov r8, r8)

08000bdc <__gesf2>:
 8000bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bde:	0042      	lsls	r2, r0, #1
 8000be0:	0246      	lsls	r6, r0, #9
 8000be2:	024d      	lsls	r5, r1, #9
 8000be4:	004c      	lsls	r4, r1, #1
 8000be6:	0fc3      	lsrs	r3, r0, #31
 8000be8:	0a76      	lsrs	r6, r6, #9
 8000bea:	0e12      	lsrs	r2, r2, #24
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	0e24      	lsrs	r4, r4, #24
 8000bf0:	0fc8      	lsrs	r0, r1, #31
 8000bf2:	2aff      	cmp	r2, #255	; 0xff
 8000bf4:	d01f      	beq.n	8000c36 <__gesf2+0x5a>
 8000bf6:	2cff      	cmp	r4, #255	; 0xff
 8000bf8:	d010      	beq.n	8000c1c <__gesf2+0x40>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d11f      	bne.n	8000c3e <__gesf2+0x62>
 8000bfe:	4271      	negs	r1, r6
 8000c00:	4171      	adcs	r1, r6
 8000c02:	2c00      	cmp	r4, #0
 8000c04:	d101      	bne.n	8000c0a <__gesf2+0x2e>
 8000c06:	2d00      	cmp	r5, #0
 8000c08:	d01e      	beq.n	8000c48 <__gesf2+0x6c>
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d10e      	bne.n	8000c2c <__gesf2+0x50>
 8000c0e:	4283      	cmp	r3, r0
 8000c10:	d01e      	beq.n	8000c50 <__gesf2+0x74>
 8000c12:	2102      	movs	r1, #2
 8000c14:	1e58      	subs	r0, r3, #1
 8000c16:	4008      	ands	r0, r1
 8000c18:	3801      	subs	r0, #1
 8000c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c1c:	2d00      	cmp	r5, #0
 8000c1e:	d126      	bne.n	8000c6e <__gesf2+0x92>
 8000c20:	2a00      	cmp	r2, #0
 8000c22:	d1f4      	bne.n	8000c0e <__gesf2+0x32>
 8000c24:	4271      	negs	r1, r6
 8000c26:	4171      	adcs	r1, r6
 8000c28:	2900      	cmp	r1, #0
 8000c2a:	d0f0      	beq.n	8000c0e <__gesf2+0x32>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d1f4      	bne.n	8000c1a <__gesf2+0x3e>
 8000c30:	2001      	movs	r0, #1
 8000c32:	4240      	negs	r0, r0
 8000c34:	e7f1      	b.n	8000c1a <__gesf2+0x3e>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d119      	bne.n	8000c6e <__gesf2+0x92>
 8000c3a:	2cff      	cmp	r4, #255	; 0xff
 8000c3c:	d0ee      	beq.n	8000c1c <__gesf2+0x40>
 8000c3e:	2c00      	cmp	r4, #0
 8000c40:	d1e5      	bne.n	8000c0e <__gesf2+0x32>
 8000c42:	2d00      	cmp	r5, #0
 8000c44:	d1e3      	bne.n	8000c0e <__gesf2+0x32>
 8000c46:	e7e4      	b.n	8000c12 <__gesf2+0x36>
 8000c48:	2000      	movs	r0, #0
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e5      	beq.n	8000c1a <__gesf2+0x3e>
 8000c4e:	e7e0      	b.n	8000c12 <__gesf2+0x36>
 8000c50:	42a2      	cmp	r2, r4
 8000c52:	dc05      	bgt.n	8000c60 <__gesf2+0x84>
 8000c54:	dbea      	blt.n	8000c2c <__gesf2+0x50>
 8000c56:	42ae      	cmp	r6, r5
 8000c58:	d802      	bhi.n	8000c60 <__gesf2+0x84>
 8000c5a:	d3e7      	bcc.n	8000c2c <__gesf2+0x50>
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	e7dc      	b.n	8000c1a <__gesf2+0x3e>
 8000c60:	4241      	negs	r1, r0
 8000c62:	4141      	adcs	r1, r0
 8000c64:	4248      	negs	r0, r1
 8000c66:	2102      	movs	r1, #2
 8000c68:	4008      	ands	r0, r1
 8000c6a:	3801      	subs	r0, #1
 8000c6c:	e7d5      	b.n	8000c1a <__gesf2+0x3e>
 8000c6e:	2002      	movs	r0, #2
 8000c70:	4240      	negs	r0, r0
 8000c72:	e7d2      	b.n	8000c1a <__gesf2+0x3e>

08000c74 <__lesf2>:
 8000c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c76:	0042      	lsls	r2, r0, #1
 8000c78:	0246      	lsls	r6, r0, #9
 8000c7a:	024d      	lsls	r5, r1, #9
 8000c7c:	004c      	lsls	r4, r1, #1
 8000c7e:	0fc3      	lsrs	r3, r0, #31
 8000c80:	0a76      	lsrs	r6, r6, #9
 8000c82:	0e12      	lsrs	r2, r2, #24
 8000c84:	0a6d      	lsrs	r5, r5, #9
 8000c86:	0e24      	lsrs	r4, r4, #24
 8000c88:	0fc8      	lsrs	r0, r1, #31
 8000c8a:	2aff      	cmp	r2, #255	; 0xff
 8000c8c:	d00d      	beq.n	8000caa <__lesf2+0x36>
 8000c8e:	2cff      	cmp	r4, #255	; 0xff
 8000c90:	d00f      	beq.n	8000cb2 <__lesf2+0x3e>
 8000c92:	2a00      	cmp	r2, #0
 8000c94:	d123      	bne.n	8000cde <__lesf2+0x6a>
 8000c96:	4271      	negs	r1, r6
 8000c98:	4171      	adcs	r1, r6
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d10f      	bne.n	8000cbe <__lesf2+0x4a>
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d10d      	bne.n	8000cbe <__lesf2+0x4a>
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	d014      	beq.n	8000cd2 <__lesf2+0x5e>
 8000ca8:	e00d      	b.n	8000cc6 <__lesf2+0x52>
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d110      	bne.n	8000cd0 <__lesf2+0x5c>
 8000cae:	2cff      	cmp	r4, #255	; 0xff
 8000cb0:	d115      	bne.n	8000cde <__lesf2+0x6a>
 8000cb2:	2d00      	cmp	r5, #0
 8000cb4:	d10c      	bne.n	8000cd0 <__lesf2+0x5c>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d103      	bne.n	8000cc2 <__lesf2+0x4e>
 8000cba:	4271      	negs	r1, r6
 8000cbc:	4171      	adcs	r1, r6
 8000cbe:	2900      	cmp	r1, #0
 8000cc0:	d108      	bne.n	8000cd4 <__lesf2+0x60>
 8000cc2:	4283      	cmp	r3, r0
 8000cc4:	d010      	beq.n	8000ce8 <__lesf2+0x74>
 8000cc6:	2102      	movs	r1, #2
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4008      	ands	r0, r1
 8000ccc:	3801      	subs	r0, #1
 8000cce:	e000      	b.n	8000cd2 <__lesf2+0x5e>
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d1fc      	bne.n	8000cd2 <__lesf2+0x5e>
 8000cd8:	2001      	movs	r0, #1
 8000cda:	4240      	negs	r0, r0
 8000cdc:	e7f9      	b.n	8000cd2 <__lesf2+0x5e>
 8000cde:	2c00      	cmp	r4, #0
 8000ce0:	d1ef      	bne.n	8000cc2 <__lesf2+0x4e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d1ed      	bne.n	8000cc2 <__lesf2+0x4e>
 8000ce6:	e7ee      	b.n	8000cc6 <__lesf2+0x52>
 8000ce8:	42a2      	cmp	r2, r4
 8000cea:	dc05      	bgt.n	8000cf8 <__lesf2+0x84>
 8000cec:	dbf2      	blt.n	8000cd4 <__lesf2+0x60>
 8000cee:	42ae      	cmp	r6, r5
 8000cf0:	d802      	bhi.n	8000cf8 <__lesf2+0x84>
 8000cf2:	d3ef      	bcc.n	8000cd4 <__lesf2+0x60>
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	e7ec      	b.n	8000cd2 <__lesf2+0x5e>
 8000cf8:	4241      	negs	r1, r0
 8000cfa:	4141      	adcs	r1, r0
 8000cfc:	4248      	negs	r0, r1
 8000cfe:	2102      	movs	r1, #2
 8000d00:	4008      	ands	r0, r1
 8000d02:	3801      	subs	r0, #1
 8000d04:	e7e5      	b.n	8000cd2 <__lesf2+0x5e>
 8000d06:	46c0      	nop			; (mov r8, r8)

08000d08 <__aeabi_i2f>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	2800      	cmp	r0, #0
 8000d0c:	d013      	beq.n	8000d36 <__aeabi_i2f+0x2e>
 8000d0e:	17c3      	asrs	r3, r0, #31
 8000d10:	18c5      	adds	r5, r0, r3
 8000d12:	405d      	eors	r5, r3
 8000d14:	0fc4      	lsrs	r4, r0, #31
 8000d16:	0028      	movs	r0, r5
 8000d18:	f000 f83c 	bl	8000d94 <__clzsi2>
 8000d1c:	239e      	movs	r3, #158	; 0x9e
 8000d1e:	0001      	movs	r1, r0
 8000d20:	1a1b      	subs	r3, r3, r0
 8000d22:	2b96      	cmp	r3, #150	; 0x96
 8000d24:	dc0f      	bgt.n	8000d46 <__aeabi_i2f+0x3e>
 8000d26:	2808      	cmp	r0, #8
 8000d28:	dd01      	ble.n	8000d2e <__aeabi_i2f+0x26>
 8000d2a:	3908      	subs	r1, #8
 8000d2c:	408d      	lsls	r5, r1
 8000d2e:	026d      	lsls	r5, r5, #9
 8000d30:	0a6d      	lsrs	r5, r5, #9
 8000d32:	b2d8      	uxtb	r0, r3
 8000d34:	e002      	b.n	8000d3c <__aeabi_i2f+0x34>
 8000d36:	2400      	movs	r4, #0
 8000d38:	2000      	movs	r0, #0
 8000d3a:	2500      	movs	r5, #0
 8000d3c:	05c0      	lsls	r0, r0, #23
 8000d3e:	4328      	orrs	r0, r5
 8000d40:	07e4      	lsls	r4, r4, #31
 8000d42:	4320      	orrs	r0, r4
 8000d44:	bd70      	pop	{r4, r5, r6, pc}
 8000d46:	2b99      	cmp	r3, #153	; 0x99
 8000d48:	dd0b      	ble.n	8000d62 <__aeabi_i2f+0x5a>
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	002e      	movs	r6, r5
 8000d4e:	1a12      	subs	r2, r2, r0
 8000d50:	40d6      	lsrs	r6, r2
 8000d52:	0002      	movs	r2, r0
 8000d54:	321b      	adds	r2, #27
 8000d56:	4095      	lsls	r5, r2
 8000d58:	0028      	movs	r0, r5
 8000d5a:	1e45      	subs	r5, r0, #1
 8000d5c:	41a8      	sbcs	r0, r5
 8000d5e:	0035      	movs	r5, r6
 8000d60:	4305      	orrs	r5, r0
 8000d62:	2905      	cmp	r1, #5
 8000d64:	dd01      	ble.n	8000d6a <__aeabi_i2f+0x62>
 8000d66:	1f4a      	subs	r2, r1, #5
 8000d68:	4095      	lsls	r5, r2
 8000d6a:	002a      	movs	r2, r5
 8000d6c:	4e08      	ldr	r6, [pc, #32]	; (8000d90 <__aeabi_i2f+0x88>)
 8000d6e:	4032      	ands	r2, r6
 8000d70:	0768      	lsls	r0, r5, #29
 8000d72:	d009      	beq.n	8000d88 <__aeabi_i2f+0x80>
 8000d74:	200f      	movs	r0, #15
 8000d76:	4028      	ands	r0, r5
 8000d78:	2804      	cmp	r0, #4
 8000d7a:	d005      	beq.n	8000d88 <__aeabi_i2f+0x80>
 8000d7c:	3204      	adds	r2, #4
 8000d7e:	0150      	lsls	r0, r2, #5
 8000d80:	d502      	bpl.n	8000d88 <__aeabi_i2f+0x80>
 8000d82:	239f      	movs	r3, #159	; 0x9f
 8000d84:	4032      	ands	r2, r6
 8000d86:	1a5b      	subs	r3, r3, r1
 8000d88:	0192      	lsls	r2, r2, #6
 8000d8a:	0a55      	lsrs	r5, r2, #9
 8000d8c:	b2d8      	uxtb	r0, r3
 8000d8e:	e7d5      	b.n	8000d3c <__aeabi_i2f+0x34>
 8000d90:	fbffffff 	.word	0xfbffffff

08000d94 <__clzsi2>:
 8000d94:	211c      	movs	r1, #28
 8000d96:	2301      	movs	r3, #1
 8000d98:	041b      	lsls	r3, r3, #16
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d301      	bcc.n	8000da2 <__clzsi2+0xe>
 8000d9e:	0c00      	lsrs	r0, r0, #16
 8000da0:	3910      	subs	r1, #16
 8000da2:	0a1b      	lsrs	r3, r3, #8
 8000da4:	4298      	cmp	r0, r3
 8000da6:	d301      	bcc.n	8000dac <__clzsi2+0x18>
 8000da8:	0a00      	lsrs	r0, r0, #8
 8000daa:	3908      	subs	r1, #8
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d301      	bcc.n	8000db6 <__clzsi2+0x22>
 8000db2:	0900      	lsrs	r0, r0, #4
 8000db4:	3904      	subs	r1, #4
 8000db6:	a202      	add	r2, pc, #8	; (adr r2, 8000dc0 <__clzsi2+0x2c>)
 8000db8:	5c10      	ldrb	r0, [r2, r0]
 8000dba:	1840      	adds	r0, r0, r1
 8000dbc:	4770      	bx	lr
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	02020304 	.word	0x02020304
 8000dc4:	01010101 	.word	0x01010101
	...

08000dd0 <__clzdi2>:
 8000dd0:	b510      	push	{r4, lr}
 8000dd2:	2900      	cmp	r1, #0
 8000dd4:	d103      	bne.n	8000dde <__clzdi2+0xe>
 8000dd6:	f7ff ffdd 	bl	8000d94 <__clzsi2>
 8000dda:	3020      	adds	r0, #32
 8000ddc:	e002      	b.n	8000de4 <__clzdi2+0x14>
 8000dde:	1c08      	adds	r0, r1, #0
 8000de0:	f7ff ffd8 	bl	8000d94 <__clzsi2>
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	0018      	movs	r0, r3
 8000df2:	230c      	movs	r3, #12
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f006 fc7e 	bl	80076f8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dfc:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000dfe:	4a2e      	ldr	r2, [pc, #184]	; (8000eb8 <MX_ADC1_Init+0xd0>)
 8000e00:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e02:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	0612      	lsls	r2, r2, #24
 8000e08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e16:	4b27      	ldr	r3, [pc, #156]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000e28:	4b22      	ldr	r3, [pc, #136]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2e:	4b21      	ldr	r3, [pc, #132]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e3c:	2220      	movs	r2, #32
 8000e3e:	2100      	movs	r1, #0
 8000e40:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e42:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4e:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e50:	222c      	movs	r2, #44	; 0x2c
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e6a:	223c      	movs	r2, #60	; 0x3c
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 fea9 	bl	8001bd0 <HAL_ADC_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000e82:	f000 f9b9 	bl	80011f8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	4a0c      	ldr	r2, [pc, #48]	; (8000ebc <MX_ADC1_Init+0xd4>)
 8000e8a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e98:	1d3a      	adds	r2, r7, #4
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_ADC1_Init+0xcc>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 f8c8 	bl	8002034 <HAL_ADC_ConfigChannel>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000ea8:	f000 f9a6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b004      	add	sp, #16
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000744 	.word	0x20000744
 8000eb8:	40012400 	.word	0x40012400
 8000ebc:	04000002 	.word	0x04000002

08000ec0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b08b      	sub	sp, #44	; 0x2c
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	2414      	movs	r4, #20
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2314      	movs	r3, #20
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f006 fc10 	bl	80076f8 <memset>
  if(adcHandle->Instance==ADC1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <HAL_ADC_MspInit+0x80>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d129      	bne.n	8000f36 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000ee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000ee8:	2180      	movs	r1, #128	; 0x80
 8000eea:	0349      	lsls	r1, r1, #13
 8000eec:	430a      	orrs	r2, r1
 8000eee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000ef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	035b      	lsls	r3, r3, #13
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_ADC_MspInit+0x84>)
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4013      	ands	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	2202      	movs	r2, #2
 8000f1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	2203      	movs	r2, #3
 8000f20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f28:	193a      	adds	r2, r7, r4
 8000f2a:	23a0      	movs	r3, #160	; 0xa0
 8000f2c:	05db      	lsls	r3, r3, #23
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f001 fed3 	bl	8002cdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b00b      	add	sp, #44	; 0x2c
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	40012400 	.word	0x40012400
 8000f44:	40021000 	.word	0x40021000

08000f48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f54:	2101      	movs	r1, #1
 8000f56:	430a      	orrs	r2, r1
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <MX_DMA_Init+0x38>)
 8000f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4013      	ands	r3, r2
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	2009      	movs	r0, #9
 8000f6c:	f001 fb66 	bl	800263c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f70:	2009      	movs	r0, #9
 8000f72:	f001 fb78 	bl	8002666 <HAL_NVIC_EnableIRQ>

}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	40021000 	.word	0x40021000

08000f84 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8a:	2414      	movs	r4, #20
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	0018      	movs	r0, r3
 8000f90:	2314      	movs	r3, #20
 8000f92:	001a      	movs	r2, r3
 8000f94:	2100      	movs	r1, #0
 8000f96:	f006 fbaf 	bl	80076f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f9a:	4b48      	ldr	r3, [pc, #288]	; (80010bc <MX_GPIO_Init+0x138>)
 8000f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9e:	4b47      	ldr	r3, [pc, #284]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fa0:	2104      	movs	r1, #4
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fa6:	4b45      	ldr	r3, [pc, #276]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000faa:	2204      	movs	r2, #4
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fb2:	4b42      	ldr	r3, [pc, #264]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fb6:	4b41      	ldr	r3, [pc, #260]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fb8:	2120      	movs	r1, #32
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fbe:	4b3f      	ldr	r3, [pc, #252]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fce:	4b3b      	ldr	r3, [pc, #236]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fda:	2201      	movs	r2, #1
 8000fdc:	4013      	ands	r3, r2
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_GPIO_Init+0x138>)
 8000fe8:	2102      	movs	r1, #2
 8000fea:	430a      	orrs	r2, r1
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_GPIO_Init+0x138>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_GPIO_Port, TEST_Pin, GPIO_PIN_RESET);
 8000ffa:	2380      	movs	r3, #128	; 0x80
 8000ffc:	0119      	lsls	r1, r3, #4
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	2200      	movs	r2, #0
 8001004:	0018      	movs	r0, r3
 8001006:	f001 ffcd 	bl	8002fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 800100a:	193b      	adds	r3, r7, r4
 800100c:	4a2c      	ldr	r2, [pc, #176]	; (80010c0 <MX_GPIO_Init+0x13c>)
 800100e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001010:	193b      	adds	r3, r7, r4
 8001012:	2203      	movs	r2, #3
 8001014:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	193b      	adds	r3, r7, r4
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800101c:	193b      	adds	r3, r7, r4
 800101e:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <MX_GPIO_Init+0x140>)
 8001020:	0019      	movs	r1, r3
 8001022:	0010      	movs	r0, r2
 8001024:	f001 fe5a 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2204      	movs	r2, #4
 800102c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2203      	movs	r2, #3
 8001032:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800103a:	193b      	adds	r3, r7, r4
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <MX_GPIO_Init+0x144>)
 800103e:	0019      	movs	r1, r3
 8001040:	0010      	movs	r0, r2
 8001042:	f001 fe4b 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA8 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001046:	193b      	adds	r3, r7, r4
 8001048:	4a20      	ldr	r2, [pc, #128]	; (80010cc <MX_GPIO_Init+0x148>)
 800104a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2203      	movs	r2, #3
 8001050:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	193b      	adds	r3, r7, r4
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	193a      	adds	r2, r7, r4
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	0011      	movs	r1, r2
 8001060:	0018      	movs	r0, r3
 8001062:	f001 fe3b 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001066:	0021      	movs	r1, r4
 8001068:	187b      	adds	r3, r7, r1
 800106a:	223c      	movs	r2, #60	; 0x3c
 800106c:	32ff      	adds	r2, #255	; 0xff
 800106e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001070:	000c      	movs	r4, r1
 8001072:	193b      	adds	r3, r7, r4
 8001074:	2203      	movs	r2, #3
 8001076:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	193b      	adds	r3, r7, r4
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107e:	193b      	adds	r3, r7, r4
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <MX_GPIO_Init+0x14c>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f001 fe29 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TEST_Pin;
 800108a:	0021      	movs	r1, r4
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2201      	movs	r2, #1
 8001098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2201      	movs	r2, #1
 800109e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80010a6:	187a      	adds	r2, r7, r1
 80010a8:	23a0      	movs	r3, #160	; 0xa0
 80010aa:	05db      	lsls	r3, r3, #23
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 fe14 	bl	8002cdc <HAL_GPIO_Init>

}
 80010b4:	46c0      	nop			; (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b00b      	add	sp, #44	; 0x2c
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	40021000 	.word	0x40021000
 80010c0:	0000c040 	.word	0x0000c040
 80010c4:	50000800 	.word	0x50000800
 80010c8:	50001400 	.word	0x50001400
 80010cc:	0000917d 	.word	0x0000917d
 80010d0:	50000400 	.word	0x50000400

080010d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d8:	f000 fbc2 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010dc:	f000 f812 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e0:	f7ff ff50 	bl	8000f84 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e4:	f7ff ff30 	bl	8000f48 <MX_DMA_Init>
  MX_TIM3_Init();
 80010e8:	f000 f9a2 	bl	8001430 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010ec:	f7ff fe7c 	bl	8000de8 <MX_ADC1_Init>
  MX_TIM14_Init();
 80010f0:	f000 fa1c 	bl	800152c <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80010f4:	f000 fae8 	bl	80016c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80010f8:	f005 ff54 	bl	8006fa4 <setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	loop();
 80010fc:	f005 ff6a 	bl	8006fd4 <loop>
 8001100:	e7fc      	b.n	80010fc <main+0x28>
	...

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b09d      	sub	sp, #116	; 0x74
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	2438      	movs	r4, #56	; 0x38
 800110c:	193b      	adds	r3, r7, r4
 800110e:	0018      	movs	r0, r3
 8001110:	2338      	movs	r3, #56	; 0x38
 8001112:	001a      	movs	r2, r3
 8001114:	2100      	movs	r1, #0
 8001116:	f006 faef 	bl	80076f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800111a:	2328      	movs	r3, #40	; 0x28
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	0018      	movs	r0, r3
 8001120:	2310      	movs	r3, #16
 8001122:	001a      	movs	r2, r3
 8001124:	2100      	movs	r1, #0
 8001126:	f006 fae7 	bl	80076f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800112a:	003b      	movs	r3, r7
 800112c:	0018      	movs	r0, r3
 800112e:	2328      	movs	r3, #40	; 0x28
 8001130:	001a      	movs	r2, r3
 8001132:	2100      	movs	r1, #0
 8001134:	f006 fae0 	bl	80076f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	0018      	movs	r0, r3
 800113e:	f001 ff4f 	bl	8002fe0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2202      	movs	r2, #2
 8001146:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2280      	movs	r2, #128	; 0x80
 800114c:	0052      	lsls	r2, r2, #1
 800114e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001150:	0021      	movs	r1, r4
 8001152:	187b      	adds	r3, r7, r1
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	187b      	adds	r3, r7, r1
 800115a:	2240      	movs	r2, #64	; 0x40
 800115c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115e:	187b      	adds	r3, r7, r1
 8001160:	2202      	movs	r2, #2
 8001162:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2202      	movs	r2, #2
 8001168:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2208      	movs	r2, #8
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	0292      	lsls	r2, r2, #10
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	0492      	lsls	r2, r2, #18
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001186:	187b      	adds	r3, r7, r1
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	0592      	lsls	r2, r2, #22
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118e:	187b      	adds	r3, r7, r1
 8001190:	0018      	movs	r0, r3
 8001192:	f001 ff71 	bl	8003078 <HAL_RCC_OscConfig>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d001      	beq.n	800119e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800119a:	f000 f82d 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800119e:	2128      	movs	r1, #40	; 0x28
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2207      	movs	r2, #7
 80011a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2202      	movs	r2, #2
 80011aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b2:	187b      	adds	r3, r7, r1
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	2102      	movs	r1, #2
 80011bc:	0018      	movs	r0, r3
 80011be:	f002 fa7b 	bl	80036b8 <HAL_RCC_ClockConfig>
 80011c2:	1e03      	subs	r3, r0, #0
 80011c4:	d001      	beq.n	80011ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011c6:	f000 f817 	bl	80011f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 80011ca:	003b      	movs	r3, r7
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <SystemClock_Config+0xf0>)
 80011ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011d0:	003b      	movs	r3, r7
 80011d2:	2200      	movs	r2, #0
 80011d4:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80011d6:	003b      	movs	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011dc:	003b      	movs	r3, r7
 80011de:	0018      	movs	r0, r3
 80011e0:	f002 fc14 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 80011e4:	1e03      	subs	r3, r0, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80011e8:	f000 f806 	bl	80011f8 <Error_Handler>
  }
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b01d      	add	sp, #116	; 0x74
 80011f2:	bd90      	pop	{r4, r7, pc}
 80011f4:	00004001 	.word	0x00004001

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	e7fe      	b.n	8001200 <Error_Handler+0x8>
	...

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120a:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <HAL_MspInit+0x44>)
 800120c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_MspInit+0x44>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	641a      	str	r2, [r3, #64]	; 0x40
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_MspInit+0x44>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_MspInit+0x44>)
 8001224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_MspInit+0x44>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0549      	lsls	r1, r1, #21
 800122c:	430a      	orrs	r2, r1
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <HAL_MspInit+0x44>)
 8001232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	055b      	lsls	r3, r3, #21
 8001238:	4013      	ands	r3, r2
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40021000 	.word	0x40021000

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <NMI_Handler+0x4>

08001252 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001256:	e7fe      	b.n	8001256 <HardFault_Handler+0x4>

08001258 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 fb60 	bl	8001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  if(DMA1->ISR & 0x02)
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <DMA1_Channel1_IRQHandler+0x28>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d004      	beq.n	8001294 <DMA1_Channel1_IRQHandler+0x18>

	 HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 800128a:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <DMA1_Channel1_IRQHandler+0x2c>)
 800128c:	2104      	movs	r1, #4
 800128e:	0018      	movs	r0, r3
 8001290:	f003 f826 	bl	80042e0 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <DMA1_Channel1_IRQHandler+0x30>)
 8001296:	0018      	movs	r0, r3
 8001298:	f001 fbde 	bl	8002a58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	40020000 	.word	0x40020000
 80012a8:	200007a8 	.word	0x200007a8
 80012ac:	200007f4 	.word	0x200007f4

080012b0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <TIM14_IRQHandler+0x14>)
 80012b6:	0018      	movs	r0, r3
 80012b8:	f003 f8ec 	bl	8004494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	20000850 	.word	0x20000850

080012c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <USART1_IRQHandler+0x14>)
 80012ce:	0018      	movs	r0, r3
 80012d0:	f004 fa6c 	bl	80057ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012d4:	46c0      	nop			; (mov r8, r8)
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	2000089c 	.word	0x2000089c

080012e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	e00a      	b.n	8001308 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012f2:	e000      	b.n	80012f6 <_read+0x16>
 80012f4:	bf00      	nop
 80012f6:	0001      	movs	r1, r0
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	b2ca      	uxtb	r2, r1
 8001300:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf0      	blt.n	80012f2 <_read+0x12>
	}

return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	0018      	movs	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	b006      	add	sp, #24
 8001318:	bd80      	pop	{r7, pc}

0800131a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b086      	sub	sp, #24
 800131e:	af00      	add	r7, sp, #0
 8001320:	60f8      	str	r0, [r7, #12]
 8001322:	60b9      	str	r1, [r7, #8]
 8001324:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e009      	b.n	8001340 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	1c5a      	adds	r2, r3, #1
 8001330:	60ba      	str	r2, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	0018      	movs	r0, r3
 8001336:	f006 f839 	bl	80073ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbf1      	blt.n	800132c <_write+0x12>
	}
	return len;
 8001348:	687b      	ldr	r3, [r7, #4]
}
 800134a:	0018      	movs	r0, r3
 800134c:	46bd      	mov	sp, r7
 800134e:	b006      	add	sp, #24
 8001350:	bd80      	pop	{r7, pc}

08001352 <_close>:

int _close(int file)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	return -1;
 800135a:	2301      	movs	r3, #1
 800135c:	425b      	negs	r3, r3
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}

08001366 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	0192      	lsls	r2, r2, #6
 8001376:	605a      	str	r2, [r3, #4]
	return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	0018      	movs	r0, r3
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
	return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f006 f962 	bl	80076a4 <__errno>
 80013e0:	0003      	movs	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	2301      	movs	r3, #1
 80013e8:	425b      	negs	r3, r3
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	18d2      	adds	r2, r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b006      	add	sp, #24
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20002000 	.word	0x20002000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000090 	.word	0x20000090
 8001414:	20000a10 	.word	0x20000a10

08001418 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <SystemInit+0x14>)
 800141e:	2280      	movs	r2, #128	; 0x80
 8001420:	0512      	lsls	r2, r2, #20
 8001422:	609a      	str	r2, [r3, #8]
#endif
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <MX_TIM3_Init>:
TIM_HandleTypeDef htim14;
DMA_HandleTypeDef hdma_tim3_ch2;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08e      	sub	sp, #56	; 0x38
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001436:	2328      	movs	r3, #40	; 0x28
 8001438:	18fb      	adds	r3, r7, r3
 800143a:	0018      	movs	r0, r3
 800143c:	2310      	movs	r3, #16
 800143e:	001a      	movs	r2, r3
 8001440:	2100      	movs	r1, #0
 8001442:	f006 f959 	bl	80076f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	231c      	movs	r3, #28
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	0018      	movs	r0, r3
 800144c:	230c      	movs	r3, #12
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f006 f951 	bl	80076f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001456:	003b      	movs	r3, r7
 8001458:	0018      	movs	r0, r3
 800145a:	231c      	movs	r3, #28
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f006 f94a 	bl	80076f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001464:	4b2f      	ldr	r3, [pc, #188]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001466:	4a30      	ldr	r2, [pc, #192]	; (8001528 <MX_TIM3_Init+0xf8>)
 8001468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800146a:	4b2e      	ldr	r3, [pc, #184]	; (8001524 <MX_TIM3_Init+0xf4>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001478:	224f      	movs	r2, #79	; 0x4f
 800147a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <MX_TIM3_Init+0xf4>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b28      	ldr	r3, [pc, #160]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <MX_TIM3_Init+0xf4>)
 800148a:	0018      	movs	r0, r3
 800148c:	f002 fc38 	bl	8003d00 <HAL_TIM_Base_Init>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001494:	f7ff feb0 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	2128      	movs	r1, #40	; 0x28
 800149a:	187b      	adds	r3, r7, r1
 800149c:	2280      	movs	r2, #128	; 0x80
 800149e:	0152      	lsls	r2, r2, #5
 80014a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a2:	187a      	adds	r2, r7, r1
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_TIM3_Init+0xf4>)
 80014a6:	0011      	movs	r1, r2
 80014a8:	0018      	movs	r0, r3
 80014aa:	f003 fa1b 	bl	80048e4 <HAL_TIM_ConfigClockSource>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80014b2:	f7ff fea1 	bl	80011f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_TIM3_Init+0xf4>)
 80014b8:	0018      	movs	r0, r3
 80014ba:	f002 fccd 	bl	8003e58 <HAL_TIM_PWM_Init>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80014c2:	f7ff fe99 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	211c      	movs	r1, #28
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d4:	187a      	adds	r2, r7, r1
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_TIM3_Init+0xf4>)
 80014d8:	0011      	movs	r1, r2
 80014da:	0018      	movs	r0, r3
 80014dc:	f003 ffa4 	bl	8005428 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80014e4:	f7ff fe88 	bl	80011f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2260      	movs	r2, #96	; 0x60
 80014ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80014ee:	003b      	movs	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014f4:	003b      	movs	r3, r7
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001500:	0039      	movs	r1, r7
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001504:	2204      	movs	r2, #4
 8001506:	0018      	movs	r0, r3
 8001508:	f003 f8f6 	bl	80046f8 <HAL_TIM_PWM_ConfigChannel>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001510:	f7ff fe72 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <MX_TIM3_Init+0xf4>)
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f89a 	bl	8001650 <HAL_TIM_MspPostInit>

}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b00e      	add	sp, #56	; 0x38
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200007a8 	.word	0x200007a8
 8001528:	40000400 	.word	0x40000400

0800152c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_TIM14_Init+0x40>)
 8001532:	4a0f      	ldr	r2, [pc, #60]	; (8001570 <MX_TIM14_Init+0x44>)
 8001534:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 639;
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_TIM14_Init+0x40>)
 8001538:	4a0e      	ldr	r2, [pc, #56]	; (8001574 <MX_TIM14_Init+0x48>)
 800153a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_TIM14_Init+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_TIM14_Init+0x40>)
 8001544:	2263      	movs	r2, #99	; 0x63
 8001546:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001548:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_TIM14_Init+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154e:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_TIM14_Init+0x40>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <MX_TIM14_Init+0x40>)
 8001556:	0018      	movs	r0, r3
 8001558:	f002 fbd2 	bl	8003d00 <HAL_TIM_Base_Init>
 800155c:	1e03      	subs	r3, r0, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001560:	f7ff fe4a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	20000850 	.word	0x20000850
 8001570:	40002000 	.word	0x40002000
 8001574:	0000027f 	.word	0x0000027f

08001578 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a2d      	ldr	r2, [pc, #180]	; (800163c <HAL_TIM_Base_MspInit+0xc4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d138      	bne.n	80015fc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800158a:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 800158c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 8001590:	2102      	movs	r1, #2
 8001592:	430a      	orrs	r2, r1
 8001594:	63da      	str	r2, [r3, #60]	; 0x3c
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 8001598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Channel1;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015a4:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_TIM_Base_MspInit+0xd0>)
 80015a6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80015a8:	4b26      	ldr	r3, [pc, #152]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015aa:	2221      	movs	r2, #33	; 0x21
 80015ac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015b0:	2210      	movs	r2, #16
 80015b2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015c2:	2280      	movs	r2, #128	; 0x80
 80015c4:	0052      	lsls	r2, r2, #1
 80015c6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015c8:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	00d2      	lsls	r2, r2, #3
 80015ce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015d8:	2280      	movs	r2, #128	; 0x80
 80015da:	0152      	lsls	r2, r2, #5
 80015dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015e0:	0018      	movs	r0, r3
 80015e2:	f001 f85d 	bl	80026a0 <HAL_DMA_Init>
 80015e6:	1e03      	subs	r3, r0, #0
 80015e8:	d001      	beq.n	80015ee <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80015ea:	f7ff fe05 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28
 80015f4:	4b13      	ldr	r3, [pc, #76]	; (8001644 <HAL_TIM_Base_MspInit+0xcc>)
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80015fa:	e01a      	b.n	8001632 <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM14)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_TIM_Base_MspInit+0xd4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d115      	bne.n	8001632 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 8001608:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800160a:	4b0d      	ldr	r3, [pc, #52]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	0209      	lsls	r1, r1, #8
 8001610:	430a      	orrs	r2, r1
 8001612:	641a      	str	r2, [r3, #64]	; 0x40
 8001614:	4b0a      	ldr	r3, [pc, #40]	; (8001640 <HAL_TIM_Base_MspInit+0xc8>)
 8001616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	021b      	lsls	r3, r3, #8
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	2013      	movs	r0, #19
 8001628:	f001 f808 	bl	800263c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800162c:	2013      	movs	r0, #19
 800162e:	f001 f81a 	bl	8002666 <HAL_NVIC_EnableIRQ>
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b004      	add	sp, #16
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	40000400 	.word	0x40000400
 8001640:	40021000 	.word	0x40021000
 8001644:	200007f4 	.word	0x200007f4
 8001648:	40020008 	.word	0x40020008
 800164c:	40002000 	.word	0x40002000

08001650 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001650:	b590      	push	{r4, r7, lr}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	240c      	movs	r4, #12
 800165a:	193b      	adds	r3, r7, r4
 800165c:	0018      	movs	r0, r3
 800165e:	2314      	movs	r3, #20
 8001660:	001a      	movs	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	f006 f848 	bl	80076f8 <memset>
  if(timHandle->Instance==TIM3)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a14      	ldr	r2, [pc, #80]	; (80016c0 <HAL_TIM_MspPostInit+0x70>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d122      	bne.n	80016b8 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <HAL_TIM_MspPostInit+0x74>)
 8001674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_TIM_MspPostInit+0x74>)
 8001678:	2101      	movs	r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	635a      	str	r2, [r3, #52]	; 0x34
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_TIM_MspPostInit+0x74>)
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800168a:	0021      	movs	r1, r4
 800168c:	187b      	adds	r3, r7, r1
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	187b      	adds	r3, r7, r1
 8001694:	2202      	movs	r2, #2
 8001696:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001698:	187b      	adds	r3, r7, r1
 800169a:	2201      	movs	r2, #1
 800169c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2203      	movs	r2, #3
 80016a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2201      	movs	r2, #1
 80016a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016aa:	187a      	adds	r2, r7, r1
 80016ac:	23a0      	movs	r3, #160	; 0xa0
 80016ae:	05db      	lsls	r3, r3, #23
 80016b0:	0011      	movs	r1, r2
 80016b2:	0018      	movs	r0, r3
 80016b4:	f001 fb12 	bl	8002cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b009      	add	sp, #36	; 0x24
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	40000400 	.word	0x40000400
 80016c4:	40021000 	.word	0x40021000

080016c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b23      	ldr	r3, [pc, #140]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016ce:	4a24      	ldr	r2, [pc, #144]	; (8001760 <MX_USART1_UART_Init+0x98>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016d2:	4b22      	ldr	r3, [pc, #136]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016d4:	2296      	movs	r2, #150	; 0x96
 80016d6:	0192      	lsls	r2, r2, #6
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_USART1_UART_Init+0x94>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <MX_USART1_UART_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001712:	0018      	movs	r0, r3
 8001714:	f003 ff08 	bl	8005528 <HAL_UART_Init>
 8001718:	1e03      	subs	r3, r0, #0
 800171a:	d001      	beq.n	8001720 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800171c:	f7ff fd6c 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001722:	2100      	movs	r1, #0
 8001724:	0018      	movs	r0, r3
 8001726:	f005 fb39 	bl	8006d9c <HAL_UARTEx_SetTxFifoThreshold>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800172e:	f7ff fd63 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001734:	2100      	movs	r1, #0
 8001736:	0018      	movs	r0, r3
 8001738:	f005 fb70 	bl	8006e1c <HAL_UARTEx_SetRxFifoThreshold>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d001      	beq.n	8001744 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001740:	f7ff fd5a 	bl	80011f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <MX_USART1_UART_Init+0x94>)
 8001746:	0018      	movs	r0, r3
 8001748:	f005 faee 	bl	8006d28 <HAL_UARTEx_DisableFifoMode>
 800174c:	1e03      	subs	r3, r0, #0
 800174e:	d001      	beq.n	8001754 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001750:	f7ff fd52 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	2000089c 	.word	0x2000089c
 8001760:	40013800 	.word	0x40013800

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b08b      	sub	sp, #44	; 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	2414      	movs	r4, #20
 800176e:	193b      	adds	r3, r7, r4
 8001770:	0018      	movs	r0, r3
 8001772:	2314      	movs	r3, #20
 8001774:	001a      	movs	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	f005 ffbe 	bl	80076f8 <memset>
  if(uartHandle->Instance==USART1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_UART_MspInit+0x9c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d137      	bne.n	80017f6 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <HAL_UART_MspInit+0xa0>)
 8001788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800178a:	4b1e      	ldr	r3, [pc, #120]	; (8001804 <HAL_UART_MspInit+0xa0>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	01c9      	lsls	r1, r1, #7
 8001790:	430a      	orrs	r2, r1
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <HAL_UART_MspInit+0xa0>)
 8001796:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	01db      	lsls	r3, r3, #7
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0xa0>)
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	4b17      	ldr	r3, [pc, #92]	; (8001804 <HAL_UART_MspInit+0xa0>)
 80017a8:	2102      	movs	r1, #2
 80017aa:	430a      	orrs	r2, r1
 80017ac:	635a      	str	r2, [r3, #52]	; 0x34
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0xa0>)
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ba:	0021      	movs	r1, r4
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	22c0      	movs	r2, #192	; 0xc0
 80017c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2202      	movs	r2, #2
 80017c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <HAL_UART_MspInit+0xa4>)
 80017de:	0019      	movs	r1, r3
 80017e0:	0010      	movs	r0, r2
 80017e2:	f001 fa7b 	bl	8002cdc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2100      	movs	r1, #0
 80017ea:	201b      	movs	r0, #27
 80017ec:	f000 ff26 	bl	800263c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017f0:	201b      	movs	r0, #27
 80017f2:	f000 ff38 	bl	8002666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b00b      	add	sp, #44	; 0x2c
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40013800 	.word	0x40013800
 8001804:	40021000 	.word	0x40021000
 8001808:	50000400 	.word	0x50000400

0800180c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001810:	f7ff fe02 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	; (8001848 <LoopForever+0x6>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	; (800184c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	; (8001850 <LoopForever+0xe>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopForever+0x12>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	; (8001858 <LoopForever+0x16>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800183a:	f005 ff39 	bl	80076b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800183e:	f7ff fc49 	bl	80010d4 <main>

08001842 <LoopForever>:

LoopForever:
  b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   r0, =_estack
 8001844:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001850:	08008338 	.word	0x08008338
  ldr r2, =_sbss
 8001854:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001858:	20000a0c 	.word	0x20000a0c

0800185c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_IRQHandler>
	...

08001860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_Init+0x3c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_Init+0x3c>)
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0049      	lsls	r1, r1, #1
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187a:	2000      	movs	r0, #0
 800187c:	f000 f810 	bl	80018a0 <HAL_InitTick>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d003      	beq.n	800188c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001884:	1dfb      	adds	r3, r7, #7
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e001      	b.n	8001890 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fcba 	bl	8001204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	781b      	ldrb	r3, [r3, #0]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	230f      	movs	r3, #15
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80018b0:	4b1d      	ldr	r3, [pc, #116]	; (8001928 <HAL_InitTick+0x88>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d02b      	beq.n	8001910 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_InitTick+0x8c>)
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	4b1a      	ldr	r3, [pc, #104]	; (8001928 <HAL_InitTick+0x88>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	0019      	movs	r1, r3
 80018c2:	23fa      	movs	r3, #250	; 0xfa
 80018c4:	0098      	lsls	r0, r3, #2
 80018c6:	f7fe fc1d 	bl	8000104 <__udivsi3>
 80018ca:	0003      	movs	r3, r0
 80018cc:	0019      	movs	r1, r3
 80018ce:	0020      	movs	r0, r4
 80018d0:	f7fe fc18 	bl	8000104 <__udivsi3>
 80018d4:	0003      	movs	r3, r0
 80018d6:	0018      	movs	r0, r3
 80018d8:	f000 fed5 	bl	8002686 <HAL_SYSTICK_Config>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d112      	bne.n	8001906 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d80a      	bhi.n	80018fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	2301      	movs	r3, #1
 80018ea:	425b      	negs	r3, r3
 80018ec:	2200      	movs	r2, #0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 fea4 	bl	800263c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_InitTick+0x90>)
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e00d      	b.n	8001918 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80018fc:	230f      	movs	r3, #15
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	2201      	movs	r2, #1
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001906:	230f      	movs	r3, #15
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e003      	b.n	8001918 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001910:	230f      	movs	r3, #15
 8001912:	18fb      	adds	r3, r7, r3
 8001914:	2201      	movs	r2, #1
 8001916:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001918:	230f      	movs	r3, #15
 800191a:	18fb      	adds	r3, r7, r3
 800191c:	781b      	ldrb	r3, [r3, #0]
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b005      	add	sp, #20
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	20000008 	.word	0x20000008
 800192c:	20000000 	.word	0x20000000
 8001930:	20000004 	.word	0x20000004

08001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_IncTick+0x1c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	001a      	movs	r2, r3
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_IncTick+0x20>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	18d2      	adds	r2, r2, r3
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_IncTick+0x20>)
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	20000008 	.word	0x20000008
 8001954:	2000092c 	.word	0x2000092c

08001958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  return uwTick;
 800195c:	4b02      	ldr	r3, [pc, #8]	; (8001968 <HAL_GetTick+0x10>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	0018      	movs	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	2000092c 	.word	0x2000092c

0800196c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001974:	f7ff fff0 	bl	8001958 <HAL_GetTick>
 8001978:	0003      	movs	r3, r0
 800197a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	3301      	adds	r3, #1
 8001984:	d005      	beq.n	8001992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_Delay+0x44>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	001a      	movs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	189b      	adds	r3, r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	f7ff ffe0 	bl	8001958 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d8f7      	bhi.n	8001994 <HAL_Delay+0x28>
  {
  }
}
 80019a4:	46c0      	nop			; (mov r8, r8)
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	20000008 	.word	0x20000008

080019b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80019c4:	401a      	ands	r2, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	601a      	str	r2, [r3, #0]
}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	fe3fffff 	.word	0xfe3fffff

080019dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	23e0      	movs	r3, #224	; 0xe0
 80019ea:	045b      	lsls	r3, r3, #17
 80019ec:	4013      	ands	r3, r2
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b084      	sub	sp, #16
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	2104      	movs	r1, #4
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	2107      	movs	r1, #7
 8001a0e:	4091      	lsls	r1, r2
 8001a10:	000a      	movs	r2, r1
 8001a12:	43d2      	mvns	r2, r2
 8001a14:	401a      	ands	r2, r3
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2104      	movs	r1, #4
 8001a1a:	400b      	ands	r3, r1
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	4099      	lsls	r1, r3
 8001a20:	000b      	movs	r3, r1
 8001a22:	431a      	orrs	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001a28:	46c0      	nop			; (mov r8, r8)
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	211f      	movs	r1, #31
 8001a44:	400a      	ands	r2, r1
 8001a46:	210f      	movs	r1, #15
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	43d2      	mvns	r2, r2
 8001a4e:	401a      	ands	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	0e9b      	lsrs	r3, r3, #26
 8001a54:	210f      	movs	r1, #15
 8001a56:	4019      	ands	r1, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	201f      	movs	r0, #31
 8001a5c:	4003      	ands	r3, r0
 8001a5e:	4099      	lsls	r1, r3
 8001a60:	000b      	movs	r3, r1
 8001a62:	431a      	orrs	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b004      	add	sp, #16
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	035b      	lsls	r3, r3, #13
 8001a82:	0b5b      	lsrs	r3, r3, #13
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	0352      	lsls	r2, r2, #13
 8001aa4:	0b52      	lsrs	r2, r2, #13
 8001aa6:	43d2      	mvns	r2, r2
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	68ba      	ldr	r2, [r7, #8]
 8001aca:	0212      	lsls	r2, r2, #8
 8001acc:	43d2      	mvns	r2, r2
 8001ace:	401a      	ands	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	400b      	ands	r3, r1
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <LL_ADC_SetChannelSamplingTime+0x34>)
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	07ffff00 	.word	0x07ffff00

08001af0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <LL_ADC_EnableInternalRegulator+0x24>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	0552      	lsls	r2, r2, #21
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b002      	add	sp, #8
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	6fffffe8 	.word	0x6fffffe8

08001b18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	2380      	movs	r3, #128	; 0x80
 8001b26:	055b      	lsls	r3, r3, #21
 8001b28:	401a      	ands	r2, r3
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	055b      	lsls	r3, r3, #21
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d101      	bne.n	8001b36 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	0018      	movs	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	b002      	add	sp, #8
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <LL_ADC_Enable+0x20>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2201      	movs	r2, #1
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b58:	46c0      	nop			; (mov r8, r8)
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	b002      	add	sp, #8
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	7fffffe8 	.word	0x7fffffe8

08001b64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2201      	movs	r2, #1
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <LL_ADC_IsEnabled+0x18>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_ADC_IsEnabled+0x1a>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b002      	add	sp, #8
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	4a04      	ldr	r2, [pc, #16]	; (8001ba8 <LL_ADC_REG_StartConversion+0x20>)
 8001b96:	4013      	ands	r3, r2
 8001b98:	2204      	movs	r2, #4
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ba0:	46c0      	nop			; (mov r8, r8)
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	7fffffe8 	.word	0x7fffffe8

08001bac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2204      	movs	r2, #4
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d101      	bne.n	8001bc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	231f      	movs	r3, #31
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d101      	bne.n	8001bf6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e1ab      	b.n	8001f4e <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10a      	bne.n	8001c14 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	0018      	movs	r0, r3
 8001c02:	f7ff f95d 	bl	8000ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2254      	movs	r2, #84	; 0x54
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f7ff ff7d 	bl	8001b18 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d114      	bne.n	8001c4c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	0018      	movs	r0, r3
 8001c28:	f7ff ff62 	bl	8001af0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001c2c:	4bca      	ldr	r3, [pc, #808]	; (8001f58 <HAL_ADC_Init+0x388>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	49ca      	ldr	r1, [pc, #808]	; (8001f5c <HAL_ADC_Init+0x38c>)
 8001c32:	0018      	movs	r0, r3
 8001c34:	f7fe fa66 	bl	8000104 <__udivsi3>
 8001c38:	0003      	movs	r3, r0
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c3e:	e002      	b.n	8001c46 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f9      	bne.n	8001c40 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff ff61 	bl	8001b18 <LL_ADC_IsInternalRegulatorEnabled>
 8001c56:	1e03      	subs	r3, r0, #0
 8001c58:	d10f      	bne.n	8001c7a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5e:	2210      	movs	r2, #16
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c72:	231f      	movs	r3, #31
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f7ff ff94 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8001c84:	0003      	movs	r3, r0
 8001c86:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d000      	beq.n	8001c94 <HAL_ADC_Init+0xc4>
 8001c92:	e14f      	b.n	8001f34 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d000      	beq.n	8001c9c <HAL_ADC_Init+0xcc>
 8001c9a:	e14b      	b.n	8001f34 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4aaf      	ldr	r2, [pc, #700]	; (8001f60 <HAL_ADC_Init+0x390>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	2202      	movs	r2, #2
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ff57 	bl	8001b64 <LL_ADC_IsEnabled>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d151      	bne.n	8001d5e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2218      	movs	r2, #24
 8001cc2:	4393      	bics	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0f9b      	lsrs	r3, r3, #30
 8001cd8:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cde:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8001ce4:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8001cea:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8001cf0:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	223c      	movs	r2, #60	; 0x3c
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d103      	bne.n	8001d0a <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4313      	orrs	r3, r2
 8001d08:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	4a94      	ldr	r2, [pc, #592]	; (8001f64 <HAL_ADC_Init+0x394>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	0019      	movs	r1, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	23c0      	movs	r3, #192	; 0xc0
 8001d26:	061b      	lsls	r3, r3, #24
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d018      	beq.n	8001d5e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	05db      	lsls	r3, r3, #23
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d012      	beq.n	8001d5e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d00c      	beq.n	8001d5e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d44:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_ADC_Init+0x398>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a88      	ldr	r2, [pc, #544]	; (8001f6c <HAL_ADC_Init+0x39c>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23f0      	movs	r3, #240	; 0xf0
 8001d54:	039b      	lsls	r3, r3, #14
 8001d56:	401a      	ands	r2, r3
 8001d58:	4b83      	ldr	r3, [pc, #524]	; (8001f68 <HAL_ADC_Init+0x398>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	7e1b      	ldrb	r3, [r3, #24]
 8001d62:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7e5b      	ldrb	r3, [r3, #25]
 8001d68:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001d6a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7e9b      	ldrb	r3, [r3, #26]
 8001d70:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001d72:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_ADC_Init+0x1b2>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	015b      	lsls	r3, r3, #5
 8001d80:	e000      	b.n	8001d84 <HAL_ADC_Init+0x1b4>
 8001d82:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001d84:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001d8a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	da04      	bge.n	8001d9e <HAL_ADC_Init+0x1ce>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	085b      	lsrs	r3, r3, #1
 8001d9c:	e001      	b.n	8001da2 <HAL_ADC_Init+0x1d2>
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8001da2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	212c      	movs	r1, #44	; 0x2c
 8001da8:	5c5b      	ldrb	r3, [r3, r1]
 8001daa:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001dac:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	5c9b      	ldrb	r3, [r3, r2]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d115      	bne.n	8001dea <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	7e9b      	ldrb	r3, [r3, #26]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	0252      	lsls	r2, r2, #9
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
 8001dd0:	e00b      	b.n	8001dea <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	431a      	orrs	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	2201      	movs	r2, #1
 8001de4:	431a      	orrs	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001df6:	23e0      	movs	r3, #224	; 0xe0
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001e00:	4313      	orrs	r3, r2
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	4a58      	ldr	r2, [pc, #352]	; (8001f70 <HAL_ADC_Init+0x3a0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	0019      	movs	r1, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	4a53      	ldr	r2, [pc, #332]	; (8001f74 <HAL_ADC_Init+0x3a4>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	001a      	movs	r2, r3
 8001e3e:	2100      	movs	r1, #0
 8001e40:	f7ff fdd9 	bl	80019f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6818      	ldr	r0, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4c:	494a      	ldr	r1, [pc, #296]	; (8001f78 <HAL_ADC_Init+0x3a8>)
 8001e4e:	001a      	movs	r2, r3
 8001e50:	f7ff fdd1 	bl	80019f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d109      	bne.n	8001e70 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2110      	movs	r1, #16
 8001e68:	4249      	negs	r1, r1
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
 8001e6e:	e03a      	b.n	8001ee6 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	039b      	lsls	r3, r3, #14
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d134      	bne.n	8001ee6 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00c      	b.n	8001e9c <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	40da      	lsrs	r2, r3
 8001e8c:	0013      	movs	r3, r2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	d006      	beq.n	8001ea4 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b07      	cmp	r3, #7
 8001ea0:	d9ef      	bls.n	8001e82 <HAL_ADC_Init+0x2b2>
 8001ea2:	e000      	b.n	8001ea6 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8001ea4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d109      	bne.n	8001ec0 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	4249      	negs	r1, r1
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28
 8001ebe:	e012      	b.n	8001ee6 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	221c      	movs	r2, #28
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	4252      	negs	r2, r2
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0011      	movs	r1, r2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a23      	ldr	r2, [pc, #140]	; (8001f7c <HAL_ADC_Init+0x3ac>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d10b      	bne.n	8001f0e <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	2203      	movs	r2, #3
 8001f02:	4393      	bics	r3, r2
 8001f04:	2201      	movs	r2, #1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001f0c:	e01c      	b.n	8001f48 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	2212      	movs	r2, #18
 8001f14:	4393      	bics	r3, r2
 8001f16:	2210      	movs	r2, #16
 8001f18:	431a      	orrs	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	2201      	movs	r2, #1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001f32:	e009      	b.n	8001f48 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	2210      	movs	r2, #16
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f40:	231f      	movs	r3, #31
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f48:	231f      	movs	r3, #31
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b008      	add	sp, #32
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	00030d40 	.word	0x00030d40
 8001f60:	fffffefd 	.word	0xfffffefd
 8001f64:	1ffffc02 	.word	0x1ffffc02
 8001f68:	40012708 	.word	0x40012708
 8001f6c:	ffc3ffff 	.word	0xffc3ffff
 8001f70:	fffe0219 	.word	0xfffe0219
 8001f74:	dffffc02 	.word	0xdffffc02
 8001f78:	07ffff04 	.word	0x07ffff04
 8001f7c:	833fffe7 	.word	0x833fffe7

08001f80 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7ff fe0d 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d135      	bne.n	8002002 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2254      	movs	r2, #84	; 0x54
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d101      	bne.n	8001fa4 <HAL_ADC_Start+0x24>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e035      	b.n	8002010 <HAL_ADC_Start+0x90>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2254      	movs	r2, #84	; 0x54
 8001fa8:	2101      	movs	r1, #1
 8001faa:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fac:	250f      	movs	r5, #15
 8001fae:	197c      	adds	r4, r7, r5
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 fa18 	bl	80023e8 <ADC_Enable>
 8001fb8:	0003      	movs	r3, r0
 8001fba:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fbc:	197b      	adds	r3, r7, r5
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d119      	bne.n	8001ff8 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_ADC_Start+0x98>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0052      	lsls	r2, r2, #1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	221c      	movs	r2, #28
 8001fe2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2254      	movs	r2, #84	; 0x54
 8001fe8:	2100      	movs	r1, #0
 8001fea:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff fdc9 	bl	8001b88 <LL_ADC_REG_StartConversion>
 8001ff6:	e008      	b.n	800200a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2254      	movs	r2, #84	; 0x54
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	5499      	strb	r1, [r3, r2]
 8002000:	e003      	b.n	800200a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002002:	230f      	movs	r3, #15
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2202      	movs	r2, #2
 8002008:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800200a:	230f      	movs	r3, #15
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	781b      	ldrb	r3, [r3, #0]
}
 8002010:	0018      	movs	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bdb0      	pop	{r4, r5, r7, pc}
 8002018:	fffff0fe 	.word	0xfffff0fe

0800201c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b002      	add	sp, #8
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800203e:	2317      	movs	r3, #23
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2254      	movs	r2, #84	; 0x54
 800204e:	5c9b      	ldrb	r3, [r3, r2]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_ADC_ConfigChannel+0x24>
 8002054:	2302      	movs	r3, #2
 8002056:	e1c2      	b.n	80023de <HAL_ADC_ConfigChannel+0x3aa>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2254      	movs	r2, #84	; 0x54
 800205c:	2101      	movs	r1, #1
 800205e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	0018      	movs	r0, r3
 8002066:	f7ff fda1 	bl	8001bac <LL_ADC_REG_IsConversionOngoing>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d000      	beq.n	8002070 <HAL_ADC_ConfigChannel+0x3c>
 800206e:	e1a5      	b.n	80023bc <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b02      	cmp	r3, #2
 8002076:	d100      	bne.n	800207a <HAL_ADC_ConfigChannel+0x46>
 8002078:	e144      	b.n	8002304 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	429a      	cmp	r2, r3
 8002084:	d004      	beq.n	8002090 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800208a:	4ac2      	ldr	r2, [pc, #776]	; (8002394 <HAL_ADC_ConfigChannel+0x360>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	0019      	movs	r1, r3
 800209a:	0010      	movs	r0, r2
 800209c:	f7ff fce8 	bl	8001a70 <LL_ADC_REG_SetSequencerChAdd>
 80020a0:	e0c9      	b.n	8002236 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	211f      	movs	r1, #31
 80020ac:	400b      	ands	r3, r1
 80020ae:	210f      	movs	r1, #15
 80020b0:	4099      	lsls	r1, r3
 80020b2:	000b      	movs	r3, r1
 80020b4:	43db      	mvns	r3, r3
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	035b      	lsls	r3, r3, #13
 80020c0:	0b5b      	lsrs	r3, r3, #13
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x9c>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0e9b      	lsrs	r3, r3, #26
 80020ca:	221f      	movs	r2, #31
 80020cc:	4013      	ands	r3, r2
 80020ce:	e098      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2201      	movs	r2, #1
 80020d6:	4013      	ands	r3, r2
 80020d8:	d000      	beq.n	80020dc <HAL_ADC_ConfigChannel+0xa8>
 80020da:	e091      	b.n	8002200 <HAL_ADC_ConfigChannel+0x1cc>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2202      	movs	r2, #2
 80020e2:	4013      	ands	r3, r2
 80020e4:	d000      	beq.n	80020e8 <HAL_ADC_ConfigChannel+0xb4>
 80020e6:	e089      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1c8>
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2204      	movs	r2, #4
 80020ee:	4013      	ands	r3, r2
 80020f0:	d000      	beq.n	80020f4 <HAL_ADC_ConfigChannel+0xc0>
 80020f2:	e081      	b.n	80021f8 <HAL_ADC_ConfigChannel+0x1c4>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	d000      	beq.n	8002100 <HAL_ADC_ConfigChannel+0xcc>
 80020fe:	e079      	b.n	80021f4 <HAL_ADC_ConfigChannel+0x1c0>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2210      	movs	r2, #16
 8002106:	4013      	ands	r3, r2
 8002108:	d000      	beq.n	800210c <HAL_ADC_ConfigChannel+0xd8>
 800210a:	e071      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x1bc>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	4013      	ands	r3, r2
 8002114:	d000      	beq.n	8002118 <HAL_ADC_ConfigChannel+0xe4>
 8002116:	e069      	b.n	80021ec <HAL_ADC_ConfigChannel+0x1b8>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2240      	movs	r2, #64	; 0x40
 800211e:	4013      	ands	r3, r2
 8002120:	d000      	beq.n	8002124 <HAL_ADC_ConfigChannel+0xf0>
 8002122:	e061      	b.n	80021e8 <HAL_ADC_ConfigChannel+0x1b4>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2280      	movs	r2, #128	; 0x80
 800212a:	4013      	ands	r3, r2
 800212c:	d000      	beq.n	8002130 <HAL_ADC_ConfigChannel+0xfc>
 800212e:	e059      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x1b0>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4013      	ands	r3, r2
 800213a:	d151      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x1ac>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2380      	movs	r3, #128	; 0x80
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4013      	ands	r3, r2
 8002146:	d149      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1a8>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4013      	ands	r3, r2
 8002152:	d141      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x1a4>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	4013      	ands	r3, r2
 800215e:	d139      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1a0>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	4013      	ands	r3, r2
 800216a:	d131      	bne.n	80021d0 <HAL_ADC_ConfigChannel+0x19c>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	019b      	lsls	r3, r3, #6
 8002174:	4013      	ands	r3, r2
 8002176:	d129      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x198>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	2380      	movs	r3, #128	; 0x80
 800217e:	01db      	lsls	r3, r3, #7
 8002180:	4013      	ands	r3, r2
 8002182:	d121      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x194>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	4013      	ands	r3, r2
 800218e:	d119      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x190>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	025b      	lsls	r3, r3, #9
 8002198:	4013      	ands	r3, r2
 800219a:	d111      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x18c>
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	2380      	movs	r3, #128	; 0x80
 80021a2:	029b      	lsls	r3, r3, #10
 80021a4:	4013      	ands	r3, r2
 80021a6:	d109      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x188>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	02db      	lsls	r3, r3, #11
 80021b0:	4013      	ands	r3, r2
 80021b2:	d001      	beq.n	80021b8 <HAL_ADC_ConfigChannel+0x184>
 80021b4:	2312      	movs	r3, #18
 80021b6:	e024      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021b8:	2300      	movs	r3, #0
 80021ba:	e022      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021bc:	2311      	movs	r3, #17
 80021be:	e020      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021c0:	2310      	movs	r3, #16
 80021c2:	e01e      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021c4:	230f      	movs	r3, #15
 80021c6:	e01c      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021c8:	230e      	movs	r3, #14
 80021ca:	e01a      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021cc:	230d      	movs	r3, #13
 80021ce:	e018      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021d0:	230c      	movs	r3, #12
 80021d2:	e016      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021d4:	230b      	movs	r3, #11
 80021d6:	e014      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021d8:	230a      	movs	r3, #10
 80021da:	e012      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021dc:	2309      	movs	r3, #9
 80021de:	e010      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021e0:	2308      	movs	r3, #8
 80021e2:	e00e      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021e4:	2307      	movs	r3, #7
 80021e6:	e00c      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021e8:	2306      	movs	r3, #6
 80021ea:	e00a      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021ec:	2305      	movs	r3, #5
 80021ee:	e008      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021f0:	2304      	movs	r3, #4
 80021f2:	e006      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021f4:	2303      	movs	r3, #3
 80021f6:	e004      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021f8:	2302      	movs	r3, #2
 80021fa:	e002      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_ADC_ConfigChannel+0x1ce>
 8002200:	2300      	movs	r3, #0
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	6852      	ldr	r2, [r2, #4]
 8002206:	201f      	movs	r0, #31
 8002208:	4002      	ands	r2, r0
 800220a:	4093      	lsls	r3, r2
 800220c:	000a      	movs	r2, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	429a      	cmp	r2, r3
 8002222:	d808      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	f7ff fbfd 	bl	8001a30 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	6819      	ldr	r1, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	001a      	movs	r2, r3
 8002244:	f7ff fc38 	bl	8001ab8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db00      	blt.n	8002252 <HAL_ADC_ConfigChannel+0x21e>
 8002250:	e0be      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002252:	4b51      	ldr	r3, [pc, #324]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 8002254:	0018      	movs	r0, r3
 8002256:	f7ff fbc1 	bl	80019dc <LL_ADC_GetCommonPathInternalCh>
 800225a:	0003      	movs	r3, r0
 800225c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a4e      	ldr	r2, [pc, #312]	; (800239c <HAL_ADC_ConfigChannel+0x368>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d123      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002270:	d11e      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2280      	movs	r2, #128	; 0x80
 8002276:	0412      	lsls	r2, r2, #16
 8002278:	4313      	orrs	r3, r2
 800227a:	4a47      	ldr	r2, [pc, #284]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 800227c:	0019      	movs	r1, r3
 800227e:	0010      	movs	r0, r2
 8002280:	f7ff fb98 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_ADC_ConfigChannel+0x36c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4946      	ldr	r1, [pc, #280]	; (80023a4 <HAL_ADC_ConfigChannel+0x370>)
 800228a:	0018      	movs	r0, r3
 800228c:	f7fd ff3a 	bl	8000104 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	001a      	movs	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	189b      	adds	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	3301      	adds	r3, #1
 800229e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a0:	e002      	b.n	80022a8 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f9      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80022ae:	e08f      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a3c      	ldr	r2, [pc, #240]	; (80023a8 <HAL_ADC_ConfigChannel+0x374>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10e      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2a4>
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	045b      	lsls	r3, r3, #17
 80022c0:	4013      	ands	r3, r2
 80022c2:	d109      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2280      	movs	r2, #128	; 0x80
 80022c8:	0452      	lsls	r2, r2, #17
 80022ca:	4313      	orrs	r3, r2
 80022cc:	4a32      	ldr	r2, [pc, #200]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 80022ce:	0019      	movs	r1, r3
 80022d0:	0010      	movs	r0, r2
 80022d2:	f7ff fb6f 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
 80022d6:	e07b      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a33      	ldr	r2, [pc, #204]	; (80023ac <HAL_ADC_ConfigChannel+0x378>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d000      	beq.n	80022e4 <HAL_ADC_ConfigChannel+0x2b0>
 80022e2:	e075      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	03db      	lsls	r3, r3, #15
 80022ea:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80022ec:	d000      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x2bc>
 80022ee:	e06f      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	03d2      	lsls	r2, r2, #15
 80022f6:	4313      	orrs	r3, r2
 80022f8:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 80022fa:	0019      	movs	r1, r3
 80022fc:	0010      	movs	r0, r2
 80022fe:	f7ff fb59 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
 8002302:	e065      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	429a      	cmp	r2, r3
 800230e:	d004      	beq.n	800231a <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_ADC_ConfigChannel+0x360>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d107      	bne.n	800232a <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0019      	movs	r1, r3
 8002324:	0010      	movs	r0, r2
 8002326:	f7ff fbb4 	bl	8001a92 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	da4e      	bge.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 8002334:	0018      	movs	r0, r3
 8002336:	f7ff fb51 	bl	80019dc <LL_ADC_GetCommonPathInternalCh>
 800233a:	0003      	movs	r3, r0
 800233c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a16      	ldr	r2, [pc, #88]	; (800239c <HAL_ADC_ConfigChannel+0x368>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_ADC_ConfigChannel+0x37c>)
 800234c:	4013      	ands	r3, r2
 800234e:	4a12      	ldr	r2, [pc, #72]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 8002350:	0019      	movs	r1, r3
 8002352:	0010      	movs	r0, r2
 8002354:	f7ff fb2e 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
 8002358:	e03a      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_ADC_ConfigChannel+0x374>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d108      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	4a13      	ldr	r2, [pc, #76]	; (80023b4 <HAL_ADC_ConfigChannel+0x380>)
 8002368:	4013      	ands	r3, r2
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 800236c:	0019      	movs	r1, r3
 800236e:	0010      	movs	r0, r2
 8002370:	f7ff fb20 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
 8002374:	e02c      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <HAL_ADC_ConfigChannel+0x378>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d127      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4a0d      	ldr	r2, [pc, #52]	; (80023b8 <HAL_ADC_ConfigChannel+0x384>)
 8002384:	4013      	ands	r3, r2
 8002386:	4a04      	ldr	r2, [pc, #16]	; (8002398 <HAL_ADC_ConfigChannel+0x364>)
 8002388:	0019      	movs	r1, r3
 800238a:	0010      	movs	r0, r2
 800238c:	f7ff fb12 	bl	80019b4 <LL_ADC_SetCommonPathInternalCh>
 8002390:	e01e      	b.n	80023d0 <HAL_ADC_ConfigChannel+0x39c>
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	80000004 	.word	0x80000004
 8002398:	40012708 	.word	0x40012708
 800239c:	b0001000 	.word	0xb0001000
 80023a0:	20000000 	.word	0x20000000
 80023a4:	00030d40 	.word	0x00030d40
 80023a8:	b8004000 	.word	0xb8004000
 80023ac:	b4002000 	.word	0xb4002000
 80023b0:	ff7fffff 	.word	0xff7fffff
 80023b4:	feffffff 	.word	0xfeffffff
 80023b8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c0:	2220      	movs	r2, #32
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023c8:	2317      	movs	r3, #23
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2254      	movs	r2, #84	; 0x54
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80023d8:	2317      	movs	r3, #23
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b006      	add	sp, #24
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)

080023e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f7ff fbb3 	bl	8001b64 <LL_ADC_IsEnabled>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d162      	bne.n	80024c8 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <ADC_Enable+0xec>)
 800240a:	4013      	ands	r3, r2
 800240c:	d00d      	beq.n	800242a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	2210      	movs	r2, #16
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241e:	2201      	movs	r2, #1
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e04f      	b.n	80024ca <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fb86 	bl	8001b40 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002434:	4b28      	ldr	r3, [pc, #160]	; (80024d8 <ADC_Enable+0xf0>)
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff fad0 	bl	80019dc <LL_ADC_GetCommonPathInternalCh>
 800243c:	0002      	movs	r2, r0
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	041b      	lsls	r3, r3, #16
 8002442:	4013      	ands	r3, r2
 8002444:	d00f      	beq.n	8002466 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002446:	4b25      	ldr	r3, [pc, #148]	; (80024dc <ADC_Enable+0xf4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4925      	ldr	r1, [pc, #148]	; (80024e0 <ADC_Enable+0xf8>)
 800244c:	0018      	movs	r0, r3
 800244e:	f7fd fe59 	bl	8000104 <__udivsi3>
 8002452:	0003      	movs	r3, r0
 8002454:	3301      	adds	r3, #1
 8002456:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3b01      	subs	r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7e5b      	ldrb	r3, [r3, #25]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d02c      	beq.n	80024c8 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800246e:	f7ff fa73 	bl	8001958 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002476:	e020      	b.n	80024ba <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff fb71 	bl	8001b64 <LL_ADC_IsEnabled>
 8002482:	1e03      	subs	r3, r0, #0
 8002484:	d104      	bne.n	8002490 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0018      	movs	r0, r3
 800248c:	f7ff fb58 	bl	8001b40 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002490:	f7ff fa62 	bl	8001958 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d90d      	bls.n	80024ba <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a2:	2210      	movs	r2, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ae:	2201      	movs	r2, #1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e007      	b.n	80024ca <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	4013      	ands	r3, r2
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d1d7      	bne.n	8002478 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	0018      	movs	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b004      	add	sp, #16
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	80000017 	.word	0x80000017
 80024d8:	40012708 	.word	0x40012708
 80024dc:	20000000 	.word	0x20000000
 80024e0:	00030d40 	.word	0x00030d40

080024e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	0002      	movs	r2, r0
 80024ec:	1dfb      	adds	r3, r7, #7
 80024ee:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80024f0:	1dfb      	adds	r3, r7, #7
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b7f      	cmp	r3, #127	; 0x7f
 80024f6:	d809      	bhi.n	800250c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024f8:	1dfb      	adds	r3, r7, #7
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	001a      	movs	r2, r3
 80024fe:	231f      	movs	r3, #31
 8002500:	401a      	ands	r2, r3
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <__NVIC_EnableIRQ+0x30>)
 8002504:	2101      	movs	r1, #1
 8002506:	4091      	lsls	r1, r2
 8002508:	000a      	movs	r2, r1
 800250a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b002      	add	sp, #8
 8002512:	bd80      	pop	{r7, pc}
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	0002      	movs	r2, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b7f      	cmp	r3, #127	; 0x7f
 800252c:	d828      	bhi.n	8002580 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <__NVIC_SetPriority+0xd4>)
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	b25b      	sxtb	r3, r3
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	33c0      	adds	r3, #192	; 0xc0
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	589b      	ldr	r3, [r3, r2]
 800253e:	1dfa      	adds	r2, r7, #7
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	0011      	movs	r1, r2
 8002544:	2203      	movs	r2, #3
 8002546:	400a      	ands	r2, r1
 8002548:	00d2      	lsls	r2, r2, #3
 800254a:	21ff      	movs	r1, #255	; 0xff
 800254c:	4091      	lsls	r1, r2
 800254e:	000a      	movs	r2, r1
 8002550:	43d2      	mvns	r2, r2
 8002552:	401a      	ands	r2, r3
 8002554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	22ff      	movs	r2, #255	; 0xff
 800255c:	401a      	ands	r2, r3
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	0018      	movs	r0, r3
 8002564:	2303      	movs	r3, #3
 8002566:	4003      	ands	r3, r0
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800256c:	481f      	ldr	r0, [pc, #124]	; (80025ec <__NVIC_SetPriority+0xd4>)
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b25b      	sxtb	r3, r3
 8002574:	089b      	lsrs	r3, r3, #2
 8002576:	430a      	orrs	r2, r1
 8002578:	33c0      	adds	r3, #192	; 0xc0
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800257e:	e031      	b.n	80025e4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002580:	4a1b      	ldr	r2, [pc, #108]	; (80025f0 <__NVIC_SetPriority+0xd8>)
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	0019      	movs	r1, r3
 8002588:	230f      	movs	r3, #15
 800258a:	400b      	ands	r3, r1
 800258c:	3b08      	subs	r3, #8
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3306      	adds	r3, #6
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	18d3      	adds	r3, r2, r3
 8002596:	3304      	adds	r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1dfa      	adds	r2, r7, #7
 800259c:	7812      	ldrb	r2, [r2, #0]
 800259e:	0011      	movs	r1, r2
 80025a0:	2203      	movs	r2, #3
 80025a2:	400a      	ands	r2, r1
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	21ff      	movs	r1, #255	; 0xff
 80025a8:	4091      	lsls	r1, r2
 80025aa:	000a      	movs	r2, r1
 80025ac:	43d2      	mvns	r2, r2
 80025ae:	401a      	ands	r2, r3
 80025b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	22ff      	movs	r2, #255	; 0xff
 80025b8:	401a      	ands	r2, r3
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0018      	movs	r0, r3
 80025c0:	2303      	movs	r3, #3
 80025c2:	4003      	ands	r3, r0
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025c8:	4809      	ldr	r0, [pc, #36]	; (80025f0 <__NVIC_SetPriority+0xd8>)
 80025ca:	1dfb      	adds	r3, r7, #7
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	001c      	movs	r4, r3
 80025d0:	230f      	movs	r3, #15
 80025d2:	4023      	ands	r3, r4
 80025d4:	3b08      	subs	r3, #8
 80025d6:	089b      	lsrs	r3, r3, #2
 80025d8:	430a      	orrs	r2, r1
 80025da:	3306      	adds	r3, #6
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	18c3      	adds	r3, r0, r3
 80025e0:	3304      	adds	r3, #4
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b003      	add	sp, #12
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	e000e100 	.word	0xe000e100
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	1e5a      	subs	r2, r3, #1
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	045b      	lsls	r3, r3, #17
 8002604:	429a      	cmp	r2, r3
 8002606:	d301      	bcc.n	800260c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002608:	2301      	movs	r3, #1
 800260a:	e010      	b.n	800262e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <SysTick_Config+0x44>)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	3a01      	subs	r2, #1
 8002612:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002614:	2301      	movs	r3, #1
 8002616:	425b      	negs	r3, r3
 8002618:	2103      	movs	r1, #3
 800261a:	0018      	movs	r0, r3
 800261c:	f7ff ff7c 	bl	8002518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x44>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x44>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	0018      	movs	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	b002      	add	sp, #8
 8002634:	bd80      	pop	{r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	210f      	movs	r1, #15
 8002648:	187b      	adds	r3, r7, r1
 800264a:	1c02      	adds	r2, r0, #0
 800264c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	187b      	adds	r3, r7, r1
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	b25b      	sxtb	r3, r3
 8002656:	0011      	movs	r1, r2
 8002658:	0018      	movs	r0, r3
 800265a:	f7ff ff5d 	bl	8002518 <__NVIC_SetPriority>
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	0002      	movs	r2, r0
 800266e:	1dfb      	adds	r3, r7, #7
 8002670:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002672:	1dfb      	adds	r3, r7, #7
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	b25b      	sxtb	r3, r3
 8002678:	0018      	movs	r0, r3
 800267a:	f7ff ff33 	bl	80024e4 <__NVIC_EnableIRQ>
}
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff ffaf 	bl	80025f4 <SysTick_Config>
 8002696:	0003      	movs	r3, r0
}
 8002698:	0018      	movs	r0, r3
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e077      	b.n	80027a2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a3d      	ldr	r2, [pc, #244]	; (80027ac <HAL_DMA_Init+0x10c>)
 80026b8:	4694      	mov	ip, r2
 80026ba:	4463      	add	r3, ip
 80026bc:	2114      	movs	r1, #20
 80026be:	0018      	movs	r0, r3
 80026c0:	f7fd fd20 	bl	8000104 <__udivsi3>
 80026c4:	0003      	movs	r3, r0
 80026c6:	009a      	lsls	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2225      	movs	r2, #37	; 0x25
 80026d0:	2102      	movs	r1, #2
 80026d2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4934      	ldr	r1, [pc, #208]	; (80027b0 <HAL_DMA_Init+0x110>)
 80026e0:	400a      	ands	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fa8d 	bl	8002c3c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	01db      	lsls	r3, r3, #7
 800272a:	429a      	cmp	r2, r3
 800272c:	d102      	bne.n	8002734 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273c:	213f      	movs	r1, #63	; 0x3f
 800273e:	400a      	ands	r2, r1
 8002740:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800274a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d011      	beq.n	8002778 <HAL_DMA_Init+0xd8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d80d      	bhi.n	8002778 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 fa98 	bl	8002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	e008      	b.n	800278a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2225      	movs	r2, #37	; 0x25
 8002794:	2101      	movs	r1, #1
 8002796:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2224      	movs	r2, #36	; 0x24
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b002      	add	sp, #8
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	bffdfff8 	.word	0xbffdfff8
 80027b0:	ffff800f 	.word	0xffff800f

080027b4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2317      	movs	r3, #23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2224      	movs	r2, #36	; 0x24
 80027ce:	5c9b      	ldrb	r3, [r3, r2]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d101      	bne.n	80027d8 <HAL_DMA_Start_IT+0x24>
 80027d4:	2302      	movs	r3, #2
 80027d6:	e06f      	b.n	80028b8 <HAL_DMA_Start_IT+0x104>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2224      	movs	r2, #36	; 0x24
 80027dc:	2101      	movs	r1, #1
 80027de:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2225      	movs	r2, #37	; 0x25
 80027e4:	5c9b      	ldrb	r3, [r3, r2]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d157      	bne.n	800289c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2225      	movs	r2, #37	; 0x25
 80027f0:	2102      	movs	r1, #2
 80027f2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	438a      	bics	r2, r1
 8002808:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f9d3 	bl	8002bbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	210e      	movs	r1, #14
 800282a:	430a      	orrs	r2, r1
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	e00f      	b.n	8002850 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2104      	movs	r1, #4
 800283c:	438a      	bics	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	210a      	movs	r1, #10
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	025b      	lsls	r3, r3, #9
 800285a:	4013      	ands	r3, r2
 800285c:	d008      	beq.n	8002870 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	0049      	lsls	r1, r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	2180      	movs	r1, #128	; 0x80
 8002884:	0049      	lsls	r1, r1, #1
 8002886:	430a      	orrs	r2, r1
 8002888:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	430a      	orrs	r2, r1
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00a      	b.n	80028b2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2224      	movs	r2, #36	; 0x24
 80028a6:	2100      	movs	r1, #0
 80028a8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80028aa:	2317      	movs	r3, #23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80028b2:	2317      	movs	r3, #23
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	781b      	ldrb	r3, [r3, #0]
}
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b006      	add	sp, #24
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e050      	b.n	8002974 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2225      	movs	r2, #37	; 0x25
 80028d6:	5c9b      	ldrb	r3, [r3, r2]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d008      	beq.n	80028f0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2204      	movs	r2, #4
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2224      	movs	r2, #36	; 0x24
 80028e8:	2100      	movs	r1, #0
 80028ea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e041      	b.n	8002974 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	210e      	movs	r1, #14
 80028fc:	438a      	bics	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	491c      	ldr	r1, [pc, #112]	; (800297c <HAL_DMA_Abort+0xbc>)
 800290c:	400a      	ands	r2, r1
 800290e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002920:	4b17      	ldr	r3, [pc, #92]	; (8002980 <HAL_DMA_Abort+0xc0>)
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	221c      	movs	r2, #28
 800292a:	4013      	ands	r3, r2
 800292c:	2201      	movs	r2, #1
 800292e:	409a      	lsls	r2, r3
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_DMA_Abort+0xc0>)
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800293e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <HAL_DMA_Abort+0xbc>)
 8002954:	400a      	ands	r2, r1
 8002956:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002960:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2225      	movs	r2, #37	; 0x25
 8002966:	2101      	movs	r1, #1
 8002968:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2224      	movs	r2, #36	; 0x24
 800296e:	2100      	movs	r1, #0
 8002970:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}
 800297c:	fffffeff 	.word	0xfffffeff
 8002980:	40020000 	.word	0x40020000

08002984 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	210f      	movs	r1, #15
 800298e:	187b      	adds	r3, r7, r1
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2225      	movs	r2, #37	; 0x25
 8002998:	5c9b      	ldrb	r3, [r3, r2]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d006      	beq.n	80029ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2204      	movs	r2, #4
 80029a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e049      	b.n	8002a42 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	210e      	movs	r1, #14
 80029ba:	438a      	bics	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2101      	movs	r1, #1
 80029ca:	438a      	bics	r2, r1
 80029cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d8:	491d      	ldr	r1, [pc, #116]	; (8002a50 <HAL_DMA_Abort_IT+0xcc>)
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_DMA_Abort_IT+0xd0>)
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	221c      	movs	r2, #28
 80029e8:	4013      	ands	r3, r2
 80029ea:	2201      	movs	r2, #1
 80029ec:	409a      	lsls	r2, r3
 80029ee:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_DMA_Abort_IT+0xd0>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a10:	490f      	ldr	r1, [pc, #60]	; (8002a50 <HAL_DMA_Abort_IT+0xcc>)
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002a1e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2225      	movs	r2, #37	; 0x25
 8002a24:	2101      	movs	r1, #1
 8002a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d004      	beq.n	8002a42 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	0010      	movs	r0, r2
 8002a40:	4798      	blx	r3
    }
  }
  return status;
 8002a42:	230f      	movs	r3, #15
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	781b      	ldrb	r3, [r3, #0]
}
 8002a48:	0018      	movs	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b004      	add	sp, #16
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	fffffeff 	.word	0xfffffeff
 8002a54:	40020000 	.word	0x40020000

08002a58 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002a60:	4b55      	ldr	r3, [pc, #340]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	221c      	movs	r2, #28
 8002a74:	4013      	ands	r3, r2
 8002a76:	2204      	movs	r2, #4
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d027      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x7a>
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2204      	movs	r2, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	d023      	beq.n	8002ad2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2220      	movs	r2, #32
 8002a92:	4013      	ands	r3, r2
 8002a94:	d107      	bne.n	8002aa6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002aa6:	4b44      	ldr	r3, [pc, #272]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002aa8:	6859      	ldr	r1, [r3, #4]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	221c      	movs	r2, #28
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2204      	movs	r2, #4
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d100      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x6e>
 8002ac4:	e073      	b.n	8002bae <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	0010      	movs	r0, r2
 8002ace:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002ad0:	e06d      	b.n	8002bae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	221c      	movs	r2, #28
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2202      	movs	r2, #2
 8002adc:	409a      	lsls	r2, r3
 8002ade:	0013      	movs	r3, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d02e      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xec>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	4013      	ands	r3, r2
 8002aec:	d02a      	beq.n	8002b44 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2220      	movs	r2, #32
 8002af6:	4013      	ands	r3, r2
 8002af8:	d10b      	bne.n	8002b12 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	210a      	movs	r1, #10
 8002b06:	438a      	bics	r2, r1
 8002b08:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2225      	movs	r2, #37	; 0x25
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	221c      	movs	r2, #28
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2202      	movs	r2, #2
 8002b20:	409a      	lsls	r2, r3
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2224      	movs	r2, #36	; 0x24
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03a      	beq.n	8002bae <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	0010      	movs	r0, r2
 8002b40:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002b42:	e034      	b.n	8002bae <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	221c      	movs	r2, #28
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2208      	movs	r2, #8
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	0013      	movs	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4013      	ands	r3, r2
 8002b56:	d02b      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x158>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2208      	movs	r2, #8
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	210e      	movs	r1, #14
 8002b6c:	438a      	bics	r2, r1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002b70:	4b11      	ldr	r3, [pc, #68]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002b72:	6859      	ldr	r1, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	221c      	movs	r2, #28
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <HAL_DMA_IRQHandler+0x160>)
 8002b82:	430a      	orrs	r2, r1
 8002b84:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2225      	movs	r2, #37	; 0x25
 8002b90:	2101      	movs	r1, #1
 8002b92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2224      	movs	r2, #36	; 0x24
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	0010      	movs	r0, r2
 8002bac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46c0      	nop			; (mov r8, r8)
}
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40020000 	.word	0x40020000

08002bbc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002bd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002be4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <DMA_SetConfig+0x7c>)
 8002be8:	6859      	ldr	r1, [r3, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	221c      	movs	r2, #28
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <DMA_SetConfig+0x7c>)
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d108      	bne.n	8002c1e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c1c:	e007      	b.n	8002c2e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	60da      	str	r2, [r3, #12]
}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b004      	add	sp, #16
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	40020000 	.word	0x40020000

08002c3c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	089b      	lsrs	r3, r3, #2
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002c4c:	4694      	mov	ip, r2
 8002c4e:	4463      	add	r3, ip
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	001a      	movs	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	23ff      	movs	r3, #255	; 0xff
 8002c60:	4013      	ands	r3, r2
 8002c62:	3b08      	subs	r3, #8
 8002c64:	2114      	movs	r1, #20
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7fd fa4c 	bl	8000104 <__udivsi3>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a07      	ldr	r2, [pc, #28]	; (8002c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002c74:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	221f      	movs	r2, #31
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b004      	add	sp, #16
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	10008200 	.word	0x10008200
 8002c90:	40020880 	.word	0x40020880

08002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	223f      	movs	r2, #63	; 0x3f
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002caa:	4694      	mov	ip, r2
 8002cac:	4463      	add	r3, ip
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a07      	ldr	r2, [pc, #28]	; (8002cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	1000823f 	.word	0x1000823f
 8002cd8:	40020940 	.word	0x40020940

08002cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cea:	e147      	b.n	8002f7c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4091      	lsls	r1, r2
 8002cf6:	000a      	movs	r2, r1
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d100      	bne.n	8002d04 <HAL_GPIO_Init+0x28>
 8002d02:	e138      	b.n	8002f76 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d00b      	beq.n	8002d24 <HAL_GPIO_Init+0x48>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d007      	beq.n	8002d24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d18:	2b11      	cmp	r3, #17
 8002d1a:	d003      	beq.n	8002d24 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	2b12      	cmp	r3, #18
 8002d22:	d130      	bne.n	8002d86 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	409a      	lsls	r2, r3
 8002d32:	0013      	movs	r3, r2
 8002d34:	43da      	mvns	r2, r3
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	409a      	lsls	r2, r3
 8002d46:	0013      	movs	r3, r2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	0013      	movs	r3, r2
 8002d62:	43da      	mvns	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4013      	ands	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	091b      	lsrs	r3, r3, #4
 8002d70:	2201      	movs	r2, #1
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
 8002d78:	0013      	movs	r3, r2
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	409a      	lsls	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	409a      	lsls	r2, r3
 8002da8:	0013      	movs	r3, r2
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0xea>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b12      	cmp	r3, #18
 8002dc4:	d123      	bne.n	8002e0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	08da      	lsrs	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3208      	adds	r2, #8
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	58d3      	ldr	r3, [r2, r3]
 8002dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	2207      	movs	r2, #7
 8002dd8:	4013      	ands	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	220f      	movs	r2, #15
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	43da      	mvns	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2107      	movs	r1, #7
 8002df2:	400b      	ands	r3, r1
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	409a      	lsls	r2, r3
 8002df8:	0013      	movs	r3, r2
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	0092      	lsls	r2, r2, #2
 8002e0a:	6939      	ldr	r1, [r7, #16]
 8002e0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	2203      	movs	r2, #3
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	0013      	movs	r3, r2
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4013      	ands	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	409a      	lsls	r2, r3
 8002e34:	0013      	movs	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	055b      	lsls	r3, r3, #21
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d100      	bne.n	8002e50 <HAL_GPIO_Init+0x174>
 8002e4e:	e092      	b.n	8002f76 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002e50:	4a50      	ldr	r2, [pc, #320]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3318      	adds	r3, #24
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	589b      	ldr	r3, [r3, r2]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2203      	movs	r2, #3
 8002e62:	4013      	ands	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	220f      	movs	r2, #15
 8002e68:	409a      	lsls	r2, r3
 8002e6a:	0013      	movs	r3, r2
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	23a0      	movs	r3, #160	; 0xa0
 8002e78:	05db      	lsls	r3, r3, #23
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d013      	beq.n	8002ea6 <HAL_GPIO_Init+0x1ca>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a45      	ldr	r2, [pc, #276]	; (8002f98 <HAL_GPIO_Init+0x2bc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00d      	beq.n	8002ea2 <HAL_GPIO_Init+0x1c6>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a44      	ldr	r2, [pc, #272]	; (8002f9c <HAL_GPIO_Init+0x2c0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d007      	beq.n	8002e9e <HAL_GPIO_Init+0x1c2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <HAL_GPIO_Init+0x2c4>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d101      	bne.n	8002e9a <HAL_GPIO_Init+0x1be>
 8002e96:	2303      	movs	r3, #3
 8002e98:	e006      	b.n	8002ea8 <HAL_GPIO_Init+0x1cc>
 8002e9a:	2305      	movs	r3, #5
 8002e9c:	e004      	b.n	8002ea8 <HAL_GPIO_Init+0x1cc>
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e002      	b.n	8002ea8 <HAL_GPIO_Init+0x1cc>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_GPIO_Init+0x1cc>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	697a      	ldr	r2, [r7, #20]
 8002eaa:	2103      	movs	r1, #3
 8002eac:	400a      	ands	r2, r1
 8002eae:	00d2      	lsls	r2, r2, #3
 8002eb0:	4093      	lsls	r3, r2
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002eb8:	4936      	ldr	r1, [pc, #216]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	089b      	lsrs	r3, r3, #2
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ec6:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002ec8:	2380      	movs	r3, #128	; 0x80
 8002eca:	58d3      	ldr	r3, [r2, r3]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	025b      	lsls	r3, r3, #9
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d003      	beq.n	8002eec <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eec:	4929      	ldr	r1, [pc, #164]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002ef6:	2384      	movs	r3, #132	; 0x84
 8002ef8:	58d3      	ldr	r3, [r2, r3]
 8002efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	43da      	mvns	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	029b      	lsls	r3, r3, #10
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d003      	beq.n	8002f1a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f1a:	491e      	ldr	r1, [pc, #120]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002f1c:	2284      	movs	r2, #132	; 0x84
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f22:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	035b      	lsls	r3, r3, #13
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	039b      	lsls	r3, r3, #14
 8002f64:	4013      	ands	r3, r2
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_GPIO_Init+0x2b8>)
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	40da      	lsrs	r2, r3
 8002f84:	1e13      	subs	r3, r2, #0
 8002f86:	d000      	beq.n	8002f8a <HAL_GPIO_Init+0x2ae>
 8002f88:	e6b0      	b.n	8002cec <HAL_GPIO_Init+0x10>
  }
}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b006      	add	sp, #24
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40021800 	.word	0x40021800
 8002f98:	50000400 	.word	0x50000400
 8002f9c:	50000800 	.word	0x50000800
 8002fa0:	50000c00 	.word	0x50000c00

08002fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	0008      	movs	r0, r1
 8002fae:	0011      	movs	r1, r2
 8002fb0:	1cbb      	adds	r3, r7, #2
 8002fb2:	1c02      	adds	r2, r0, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
 8002fb6:	1c7b      	adds	r3, r7, #1
 8002fb8:	1c0a      	adds	r2, r1, #0
 8002fba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fbc:	1c7b      	adds	r3, r7, #1
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fc4:	1cbb      	adds	r3, r7, #2
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fcc:	e003      	b.n	8002fd6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fce:	1cbb      	adds	r3, r7, #2
 8002fd0:	881a      	ldrh	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
	...

08002fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a19      	ldr	r2, [pc, #100]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002fee:	4013      	ands	r3, r2
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	2380      	movs	r3, #128	; 0x80
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d11f      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	0013      	movs	r3, r2
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	189b      	adds	r3, r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4912      	ldr	r1, [pc, #72]	; (800305c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003012:	0018      	movs	r0, r3
 8003014:	f7fd f876 	bl	8000104 <__udivsi3>
 8003018:	0003      	movs	r3, r0
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800301e:	e008      	b.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	3b01      	subs	r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	e001      	b.n	8003032 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e009      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	401a      	ands	r2, r3
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	429a      	cmp	r2, r3
 8003042:	d0ed      	beq.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	0018      	movs	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	b004      	add	sp, #16
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40007000 	.word	0x40007000
 8003054:	fffff9ff 	.word	0xfffff9ff
 8003058:	20000000 	.word	0x20000000
 800305c:	000f4240 	.word	0x000f4240

08003060 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	23e0      	movs	r3, #224	; 0xe0
 800306a:	01db      	lsls	r3, r3, #7
 800306c:	4013      	ands	r3, r2
}
 800306e:	0018      	movs	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e304      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2201      	movs	r2, #1
 8003090:	4013      	ands	r3, r2
 8003092:	d100      	bne.n	8003096 <HAL_RCC_OscConfig+0x1e>
 8003094:	e07c      	b.n	8003190 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4bc3      	ldr	r3, [pc, #780]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2238      	movs	r2, #56	; 0x38
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a0:	4bc0      	ldr	r3, [pc, #768]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	2203      	movs	r2, #3
 80030a6:	4013      	ands	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d102      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3e>
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d002      	beq.n	80030bc <HAL_RCC_OscConfig+0x44>
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d10b      	bne.n	80030d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	4bb9      	ldr	r3, [pc, #740]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	2380      	movs	r3, #128	; 0x80
 80030c2:	029b      	lsls	r3, r3, #10
 80030c4:	4013      	ands	r3, r2
 80030c6:	d062      	beq.n	800318e <HAL_RCC_OscConfig+0x116>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d15e      	bne.n	800318e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e2df      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	025b      	lsls	r3, r3, #9
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x78>
 80030e0:	4bb0      	ldr	r3, [pc, #704]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	4baf      	ldr	r3, [pc, #700]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	0249      	lsls	r1, r1, #9
 80030ea:	430a      	orrs	r2, r1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e020      	b.n	8003132 <HAL_RCC_OscConfig+0xba>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	23a0      	movs	r3, #160	; 0xa0
 80030f6:	02db      	lsls	r3, r3, #11
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d10e      	bne.n	800311a <HAL_RCC_OscConfig+0xa2>
 80030fc:	4ba9      	ldr	r3, [pc, #676]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4ba8      	ldr	r3, [pc, #672]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	02c9      	lsls	r1, r1, #11
 8003106:	430a      	orrs	r2, r1
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	4ba6      	ldr	r3, [pc, #664]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4ba5      	ldr	r3, [pc, #660]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003110:	2180      	movs	r1, #128	; 0x80
 8003112:	0249      	lsls	r1, r1, #9
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	e00b      	b.n	8003132 <HAL_RCC_OscConfig+0xba>
 800311a:	4ba2      	ldr	r3, [pc, #648]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003120:	49a1      	ldr	r1, [pc, #644]	; (80033a8 <HAL_RCC_OscConfig+0x330>)
 8003122:	400a      	ands	r2, r1
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	4b9f      	ldr	r3, [pc, #636]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b9e      	ldr	r3, [pc, #632]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800312c:	499f      	ldr	r1, [pc, #636]	; (80033ac <HAL_RCC_OscConfig+0x334>)
 800312e:	400a      	ands	r2, r1
 8003130:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d014      	beq.n	8003164 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313a:	f7fe fc0d 	bl	8001958 <HAL_GetTick>
 800313e:	0003      	movs	r3, r0
 8003140:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003144:	f7fe fc08 	bl	8001958 <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e29e      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	029b      	lsls	r3, r3, #10
 800315e:	4013      	ands	r3, r2
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0xcc>
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe fbf8 	bl	8001958 <HAL_GetTick>
 8003168:	0003      	movs	r3, r0
 800316a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800316e:	f7fe fbf3 	bl	8001958 <HAL_GetTick>
 8003172:	0002      	movs	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	; 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e289      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003180:	4b88      	ldr	r3, [pc, #544]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	029b      	lsls	r3, r3, #10
 8003188:	4013      	ands	r3, r2
 800318a:	d1f0      	bne.n	800316e <HAL_RCC_OscConfig+0xf6>
 800318c:	e000      	b.n	8003190 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800318e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2202      	movs	r2, #2
 8003196:	4013      	ands	r3, r2
 8003198:	d100      	bne.n	800319c <HAL_RCC_OscConfig+0x124>
 800319a:	e099      	b.n	80032d0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319c:	4b81      	ldr	r3, [pc, #516]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2238      	movs	r2, #56	; 0x38
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a6:	4b7f      	ldr	r3, [pc, #508]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	2203      	movs	r2, #3
 80031ac:	4013      	ands	r3, r2
 80031ae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b10      	cmp	r3, #16
 80031b4:	d102      	bne.n	80031bc <HAL_RCC_OscConfig+0x144>
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d002      	beq.n	80031c2 <HAL_RCC_OscConfig+0x14a>
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d135      	bne.n	800322e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c2:	4b78      	ldr	r3, [pc, #480]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4013      	ands	r3, r2
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x162>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e25c      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b72      	ldr	r3, [pc, #456]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a74      	ldr	r2, [pc, #464]	; (80033b0 <HAL_RCC_OscConfig+0x338>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	021a      	lsls	r2, r3, #8
 80031ea:	4b6e      	ldr	r3, [pc, #440]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80031f6:	4b6b      	ldr	r3, [pc, #428]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a6e      	ldr	r2, [pc, #440]	; (80033b4 <HAL_RCC_OscConfig+0x33c>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	4b67      	ldr	r3, [pc, #412]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800320a:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	0adb      	lsrs	r3, r3, #11
 8003210:	2207      	movs	r2, #7
 8003212:	4013      	ands	r3, r2
 8003214:	4a68      	ldr	r2, [pc, #416]	; (80033b8 <HAL_RCC_OscConfig+0x340>)
 8003216:	40da      	lsrs	r2, r3
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x344>)
 800321a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <HAL_RCC_OscConfig+0x348>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0018      	movs	r0, r3
 8003222:	f7fe fb3d 	bl	80018a0 <HAL_InitTick>
 8003226:	1e03      	subs	r3, r0, #0
 8003228:	d051      	beq.n	80032ce <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e232      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d030      	beq.n	8003298 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003236:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a5e      	ldr	r2, [pc, #376]	; (80033b4 <HAL_RCC_OscConfig+0x33c>)
 800323c:	4013      	ands	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	4b57      	ldr	r3, [pc, #348]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800324a:	4b56      	ldr	r3, [pc, #344]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003250:	2180      	movs	r1, #128	; 0x80
 8003252:	0049      	lsls	r1, r1, #1
 8003254:	430a      	orrs	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7fe fb7e 	bl	8001958 <HAL_GetTick>
 800325c:	0003      	movs	r3, r0
 800325e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003260:	e008      	b.n	8003274 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003262:	f7fe fb79 	bl	8001958 <HAL_GetTick>
 8003266:	0002      	movs	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e20f      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003274:	4b4b      	ldr	r3, [pc, #300]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4013      	ands	r3, r2
 800327e:	d0f0      	beq.n	8003262 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003280:	4b48      	ldr	r3, [pc, #288]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4a4a      	ldr	r2, [pc, #296]	; (80033b0 <HAL_RCC_OscConfig+0x338>)
 8003286:	4013      	ands	r3, r2
 8003288:	0019      	movs	r1, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	021a      	lsls	r2, r3, #8
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	e01b      	b.n	80032d0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003298:	4b42      	ldr	r3, [pc, #264]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b41      	ldr	r3, [pc, #260]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800329e:	4949      	ldr	r1, [pc, #292]	; (80033c4 <HAL_RCC_OscConfig+0x34c>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a4:	f7fe fb58 	bl	8001958 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fb53 	bl	8001958 <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1e9      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	4013      	ands	r3, r2
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x236>
 80032cc:	e000      	b.n	80032d0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	4013      	ands	r3, r2
 80032d8:	d047      	beq.n	800336a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032da:	4b32      	ldr	r3, [pc, #200]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2238      	movs	r2, #56	; 0x38
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b18      	cmp	r3, #24
 80032e4:	d10a      	bne.n	80032fc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80032e6:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 80032e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ea:	2202      	movs	r2, #2
 80032ec:	4013      	ands	r3, r2
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x2f2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d138      	bne.n	800336a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e1cb      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d019      	beq.n	8003338 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003304:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003308:	4b26      	ldr	r3, [pc, #152]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800330a:	2101      	movs	r1, #1
 800330c:	430a      	orrs	r2, r1
 800330e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fb22 	bl	8001958 <HAL_GetTick>
 8003314:	0003      	movs	r3, r0
 8003316:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800331a:	f7fe fb1d 	bl	8001958 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1b3      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800332c:	4b1d      	ldr	r3, [pc, #116]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800332e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003330:	2202      	movs	r2, #2
 8003332:	4013      	ands	r3, r2
 8003334:	d0f1      	beq.n	800331a <HAL_RCC_OscConfig+0x2a2>
 8003336:	e018      	b.n	800336a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800333a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800333c:	4b19      	ldr	r3, [pc, #100]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003344:	f7fe fb08 	bl	8001958 <HAL_GetTick>
 8003348:	0003      	movs	r3, r0
 800334a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe fb03 	bl	8001958 <HAL_GetTick>
 8003352:	0002      	movs	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e199      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003360:	4b10      	ldr	r3, [pc, #64]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003364:	2202      	movs	r2, #2
 8003366:	4013      	ands	r3, r2
 8003368:	d1f1      	bne.n	800334e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	d100      	bne.n	8003376 <HAL_RCC_OscConfig+0x2fe>
 8003374:	e0c6      	b.n	8003504 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003376:	231f      	movs	r3, #31
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2238      	movs	r2, #56	; 0x38
 8003384:	4013      	ands	r3, r2
 8003386:	2b20      	cmp	r3, #32
 8003388:	d11e      	bne.n	80033c8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_RCC_OscConfig+0x32c>)
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	2202      	movs	r2, #2
 8003390:	4013      	ands	r3, r2
 8003392:	d100      	bne.n	8003396 <HAL_RCC_OscConfig+0x31e>
 8003394:	e0b6      	b.n	8003504 <HAL_RCC_OscConfig+0x48c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d000      	beq.n	80033a0 <HAL_RCC_OscConfig+0x328>
 800339e:	e0b1      	b.n	8003504 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e177      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	fffeffff 	.word	0xfffeffff
 80033ac:	fffbffff 	.word	0xfffbffff
 80033b0:	ffff80ff 	.word	0xffff80ff
 80033b4:	ffffc7ff 	.word	0xffffc7ff
 80033b8:	00f42400 	.word	0x00f42400
 80033bc:	20000000 	.word	0x20000000
 80033c0:	20000004 	.word	0x20000004
 80033c4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033c8:	4bb4      	ldr	r3, [pc, #720]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80033ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	055b      	lsls	r3, r3, #21
 80033d0:	4013      	ands	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_RCC_OscConfig+0x360>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x362>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d011      	beq.n	8003402 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4baf      	ldr	r3, [pc, #700]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80033e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e2:	4bae      	ldr	r3, [pc, #696]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	0549      	lsls	r1, r1, #21
 80033e8:	430a      	orrs	r2, r1
 80033ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80033ec:	4bab      	ldr	r3, [pc, #684]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80033ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	055b      	lsls	r3, r3, #21
 80033f4:	4013      	ands	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80033fa:	231f      	movs	r3, #31
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003402:	4ba7      	ldr	r3, [pc, #668]	; (80036a0 <HAL_RCC_OscConfig+0x628>)
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4013      	ands	r3, r2
 800340c:	d11a      	bne.n	8003444 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340e:	4ba4      	ldr	r3, [pc, #656]	; (80036a0 <HAL_RCC_OscConfig+0x628>)
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	4ba3      	ldr	r3, [pc, #652]	; (80036a0 <HAL_RCC_OscConfig+0x628>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0049      	lsls	r1, r1, #1
 8003418:	430a      	orrs	r2, r1
 800341a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800341c:	f7fe fa9c 	bl	8001958 <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003426:	f7fe fa97 	bl	8001958 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e12d      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003438:	4b99      	ldr	r3, [pc, #612]	; (80036a0 <HAL_RCC_OscConfig+0x628>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4013      	ands	r3, r2
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <HAL_RCC_OscConfig+0x3e2>
 800344c:	4b93      	ldr	r3, [pc, #588]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800344e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003450:	4b92      	ldr	r3, [pc, #584]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003452:	2101      	movs	r1, #1
 8003454:	430a      	orrs	r2, r1
 8003456:	65da      	str	r2, [r3, #92]	; 0x5c
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x41c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d10c      	bne.n	800347c <HAL_RCC_OscConfig+0x404>
 8003462:	4b8e      	ldr	r3, [pc, #568]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003466:	4b8d      	ldr	r3, [pc, #564]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003468:	2104      	movs	r1, #4
 800346a:	430a      	orrs	r2, r1
 800346c:	65da      	str	r2, [r3, #92]	; 0x5c
 800346e:	4b8b      	ldr	r3, [pc, #556]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003470:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003472:	4b8a      	ldr	r3, [pc, #552]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003474:	2101      	movs	r1, #1
 8003476:	430a      	orrs	r2, r1
 8003478:	65da      	str	r2, [r3, #92]	; 0x5c
 800347a:	e00b      	b.n	8003494 <HAL_RCC_OscConfig+0x41c>
 800347c:	4b87      	ldr	r3, [pc, #540]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800347e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003480:	4b86      	ldr	r3, [pc, #536]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003482:	2101      	movs	r1, #1
 8003484:	438a      	bics	r2, r1
 8003486:	65da      	str	r2, [r3, #92]	; 0x5c
 8003488:	4b84      	ldr	r3, [pc, #528]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800348a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800348c:	4b83      	ldr	r3, [pc, #524]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800348e:	2104      	movs	r1, #4
 8003490:	438a      	bics	r2, r1
 8003492:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d014      	beq.n	80034c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fe fa5c 	bl	8001958 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a4:	e009      	b.n	80034ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fe fa57 	bl	8001958 <HAL_GetTick>
 80034aa:	0002      	movs	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	4a7c      	ldr	r2, [pc, #496]	; (80036a4 <HAL_RCC_OscConfig+0x62c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e0ec      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b78      	ldr	r3, [pc, #480]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2202      	movs	r2, #2
 80034c0:	4013      	ands	r3, r2
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x42e>
 80034c4:	e013      	b.n	80034ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7fe fa47 	bl	8001958 <HAL_GetTick>
 80034ca:	0003      	movs	r3, r0
 80034cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034ce:	e009      	b.n	80034e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fa42 	bl	8001958 <HAL_GetTick>
 80034d4:	0002      	movs	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	4a72      	ldr	r2, [pc, #456]	; (80036a4 <HAL_RCC_OscConfig+0x62c>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e0d7      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e4:	4b6d      	ldr	r3, [pc, #436]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80034e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e8:	2202      	movs	r2, #2
 80034ea:	4013      	ands	r3, r2
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80034ee:	231f      	movs	r3, #31
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d105      	bne.n	8003504 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80034f8:	4b68      	ldr	r3, [pc, #416]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80034fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fc:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80034fe:	496a      	ldr	r1, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x630>)
 8003500:	400a      	ands	r2, r1
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69db      	ldr	r3, [r3, #28]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d100      	bne.n	800350e <HAL_RCC_OscConfig+0x496>
 800350c:	e0c1      	b.n	8003692 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800350e:	4b63      	ldr	r3, [pc, #396]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2238      	movs	r2, #56	; 0x38
 8003514:	4013      	ands	r3, r2
 8003516:	2b10      	cmp	r3, #16
 8003518:	d100      	bne.n	800351c <HAL_RCC_OscConfig+0x4a4>
 800351a:	e081      	b.n	8003620 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b02      	cmp	r3, #2
 8003522:	d156      	bne.n	80035d2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003524:	4b5d      	ldr	r3, [pc, #372]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4b5c      	ldr	r3, [pc, #368]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800352a:	4960      	ldr	r1, [pc, #384]	; (80036ac <HAL_RCC_OscConfig+0x634>)
 800352c:	400a      	ands	r2, r1
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe fa12 	bl	8001958 <HAL_GetTick>
 8003534:	0003      	movs	r3, r0
 8003536:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353a:	f7fe fa0d 	bl	8001958 <HAL_GetTick>
 800353e:	0002      	movs	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0a3      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	049b      	lsls	r3, r3, #18
 8003554:	4013      	ands	r3, r2
 8003556:	d1f0      	bne.n	800353a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003558:	4b50      	ldr	r3, [pc, #320]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_RCC_OscConfig+0x638>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1a      	ldr	r2, [r3, #32]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	431a      	orrs	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	431a      	orrs	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	431a      	orrs	r2, r3
 8003586:	4b45      	ldr	r3, [pc, #276]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003588:	430a      	orrs	r2, r1
 800358a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358c:	4b43      	ldr	r3, [pc, #268]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	4b42      	ldr	r3, [pc, #264]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003592:	2180      	movs	r1, #128	; 0x80
 8003594:	0449      	lsls	r1, r1, #17
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800359a:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	4b3f      	ldr	r3, [pc, #252]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	0549      	lsls	r1, r1, #21
 80035a4:	430a      	orrs	r2, r1
 80035a6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe f9d6 	bl	8001958 <HAL_GetTick>
 80035ac:	0003      	movs	r3, r0
 80035ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe f9d1 	bl	8001958 <HAL_GetTick>
 80035b6:	0002      	movs	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e067      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	049b      	lsls	r3, r3, #18
 80035cc:	4013      	ands	r3, r2
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x53a>
 80035d0:	e05f      	b.n	8003692 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b32      	ldr	r3, [pc, #200]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b31      	ldr	r3, [pc, #196]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035d8:	4934      	ldr	r1, [pc, #208]	; (80036ac <HAL_RCC_OscConfig+0x634>)
 80035da:	400a      	ands	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80035de:	4b2f      	ldr	r3, [pc, #188]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	4b2e      	ldr	r3, [pc, #184]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035e4:	2103      	movs	r1, #3
 80035e6:	438a      	bics	r2, r1
 80035e8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80035ea:	4b2c      	ldr	r3, [pc, #176]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	4b2b      	ldr	r3, [pc, #172]	; (800369c <HAL_RCC_OscConfig+0x624>)
 80035f0:	4930      	ldr	r1, [pc, #192]	; (80036b4 <HAL_RCC_OscConfig+0x63c>)
 80035f2:	400a      	ands	r2, r1
 80035f4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f6:	f7fe f9af 	bl	8001958 <HAL_GetTick>
 80035fa:	0003      	movs	r3, r0
 80035fc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f9aa 	bl	8001958 <HAL_GetTick>
 8003604:	0002      	movs	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e040      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003612:	4b22      	ldr	r3, [pc, #136]	; (800369c <HAL_RCC_OscConfig+0x624>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	049b      	lsls	r3, r3, #18
 800361a:	4013      	ands	r3, r2
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x588>
 800361e:	e038      	b.n	8003692 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e033      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800362c:	4b1b      	ldr	r3, [pc, #108]	; (800369c <HAL_RCC_OscConfig+0x624>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2203      	movs	r2, #3
 8003636:	401a      	ands	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	429a      	cmp	r2, r3
 800363e:	d126      	bne.n	800368e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	2270      	movs	r2, #112	; 0x70
 8003644:	401a      	ands	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d11f      	bne.n	800368e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	23fe      	movs	r3, #254	; 0xfe
 8003652:	01db      	lsls	r3, r3, #7
 8003654:	401a      	ands	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800365c:	429a      	cmp	r2, r3
 800365e:	d116      	bne.n	800368e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	23f8      	movs	r3, #248	; 0xf8
 8003664:	039b      	lsls	r3, r3, #14
 8003666:	401a      	ands	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800366c:	429a      	cmp	r2, r3
 800366e:	d10e      	bne.n	800368e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	23e0      	movs	r3, #224	; 0xe0
 8003674:	051b      	lsls	r3, r3, #20
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	0f5b      	lsrs	r3, r3, #29
 8003684:	075a      	lsls	r2, r3, #29
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d001      	beq.n	8003692 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b008      	add	sp, #32
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	40007000 	.word	0x40007000
 80036a4:	00001388 	.word	0x00001388
 80036a8:	efffffff 	.word	0xefffffff
 80036ac:	feffffff 	.word	0xfeffffff
 80036b0:	11c1808c 	.word	0x11c1808c
 80036b4:	eefeffff 	.word	0xeefeffff

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0e9      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036cc:	4b76      	ldr	r3, [pc, #472]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2207      	movs	r2, #7
 80036d2:	4013      	ands	r3, r2
 80036d4:	683a      	ldr	r2, [r7, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d91e      	bls.n	8003718 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036da:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2207      	movs	r2, #7
 80036e0:	4393      	bics	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	4b70      	ldr	r3, [pc, #448]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036ec:	f7fe f934 	bl	8001958 <HAL_GetTick>
 80036f0:	0003      	movs	r3, r0
 80036f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036f4:	e009      	b.n	800370a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f6:	f7fe f92f 	bl	8001958 <HAL_GetTick>
 80036fa:	0002      	movs	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	4a6a      	ldr	r2, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x1f4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e0ca      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800370a:	4b67      	ldr	r3, [pc, #412]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2207      	movs	r2, #7
 8003710:	4013      	ands	r3, r2
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d1ee      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	d015      	beq.n	800374e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2204      	movs	r2, #4
 8003728:	4013      	ands	r3, r2
 800372a:	d006      	beq.n	800373a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800372c:	4b60      	ldr	r3, [pc, #384]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b5f      	ldr	r3, [pc, #380]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 8003732:	21e0      	movs	r1, #224	; 0xe0
 8003734:	01c9      	lsls	r1, r1, #7
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373a:	4b5d      	ldr	r3, [pc, #372]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	4a5d      	ldr	r2, [pc, #372]	; (80038b4 <HAL_RCC_ClockConfig+0x1fc>)
 8003740:	4013      	ands	r3, r2
 8003742:	0019      	movs	r1, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	4b59      	ldr	r3, [pc, #356]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800374a:	430a      	orrs	r2, r1
 800374c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2201      	movs	r2, #1
 8003754:	4013      	ands	r3, r2
 8003756:	d057      	beq.n	8003808 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d107      	bne.n	8003770 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003760:	4b53      	ldr	r3, [pc, #332]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	4013      	ands	r3, r2
 800376a:	d12b      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e097      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d107      	bne.n	8003788 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003778:	4b4d      	ldr	r3, [pc, #308]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2380      	movs	r3, #128	; 0x80
 800377e:	049b      	lsls	r3, r3, #18
 8003780:	4013      	ands	r3, r2
 8003782:	d11f      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e08b      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003790:	4b47      	ldr	r3, [pc, #284]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4013      	ands	r3, r2
 800379a:	d113      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e07f      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 80037aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037ac:	2202      	movs	r2, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d108      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e074      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	4b3e      	ldr	r3, [pc, #248]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e06d      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c4:	4b3a      	ldr	r3, [pc, #232]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2207      	movs	r2, #7
 80037ca:	4393      	bics	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	4b37      	ldr	r3, [pc, #220]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 80037d4:	430a      	orrs	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fe f8be 	bl	8001958 <HAL_GetTick>
 80037dc:	0003      	movs	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e0:	e009      	b.n	80037f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e2:	f7fe f8b9 	bl	8001958 <HAL_GetTick>
 80037e6:	0002      	movs	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	4a2f      	ldr	r2, [pc, #188]	; (80038ac <HAL_RCC_ClockConfig+0x1f4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e054      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b2e      	ldr	r3, [pc, #184]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2238      	movs	r2, #56	; 0x38
 80037fc:	401a      	ands	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	429a      	cmp	r2, r3
 8003806:	d1ec      	bne.n	80037e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003808:	4b27      	ldr	r3, [pc, #156]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2207      	movs	r2, #7
 800380e:	4013      	ands	r3, r2
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d21e      	bcs.n	8003854 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2207      	movs	r2, #7
 800381c:	4393      	bics	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	4b21      	ldr	r3, [pc, #132]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003828:	f7fe f896 	bl	8001958 <HAL_GetTick>
 800382c:	0003      	movs	r3, r0
 800382e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003830:	e009      	b.n	8003846 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003832:	f7fe f891 	bl	8001958 <HAL_GetTick>
 8003836:	0002      	movs	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	4a1b      	ldr	r2, [pc, #108]	; (80038ac <HAL_RCC_ClockConfig+0x1f4>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e02c      	b.n	80038a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2207      	movs	r2, #7
 800384c:	4013      	ands	r3, r2
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d1ee      	bne.n	8003832 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2204      	movs	r2, #4
 800385a:	4013      	ands	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800385e:	4b14      	ldr	r3, [pc, #80]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <HAL_RCC_ClockConfig+0x200>)
 8003864:	4013      	ands	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68da      	ldr	r2, [r3, #12]
 800386c:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800386e:	430a      	orrs	r2, r1
 8003870:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003872:	f000 f829 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8003876:	0001      	movs	r1, r0
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <HAL_RCC_ClockConfig+0x1f8>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	220f      	movs	r2, #15
 8003880:	401a      	ands	r2, r3
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <HAL_RCC_ClockConfig+0x204>)
 8003884:	0092      	lsls	r2, r2, #2
 8003886:	58d3      	ldr	r3, [r2, r3]
 8003888:	221f      	movs	r2, #31
 800388a:	4013      	ands	r3, r2
 800388c:	000a      	movs	r2, r1
 800388e:	40da      	lsrs	r2, r3
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCC_ClockConfig+0x208>)
 8003892:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x20c>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0018      	movs	r0, r3
 800389a:	f7fe f801 	bl	80018a0 <HAL_InitTick>
 800389e:	0003      	movs	r3, r0
}
 80038a0:	0018      	movs	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b004      	add	sp, #16
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40022000 	.word	0x40022000
 80038ac:	00001388 	.word	0x00001388
 80038b0:	40021000 	.word	0x40021000
 80038b4:	fffff0ff 	.word	0xfffff0ff
 80038b8:	ffff8fff 	.word	0xffff8fff
 80038bc:	080081d4 	.word	0x080081d4
 80038c0:	20000000 	.word	0x20000000
 80038c4:	20000004 	.word	0x20000004

080038c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ce:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2238      	movs	r2, #56	; 0x38
 80038d4:	4013      	ands	r3, r2
 80038d6:	d10f      	bne.n	80038f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80038d8:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	0adb      	lsrs	r3, r3, #11
 80038de:	2207      	movs	r2, #7
 80038e0:	4013      	ands	r3, r2
 80038e2:	2201      	movs	r2, #1
 80038e4:	409a      	lsls	r2, r3
 80038e6:	0013      	movs	r3, r2
 80038e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80038ea:	6839      	ldr	r1, [r7, #0]
 80038ec:	4835      	ldr	r0, [pc, #212]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80038ee:	f7fc fc09 	bl	8000104 <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	e05d      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038f8:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2238      	movs	r2, #56	; 0x38
 80038fe:	4013      	ands	r3, r2
 8003900:	2b08      	cmp	r3, #8
 8003902:	d102      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003904:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e054      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390a:	4b2d      	ldr	r3, [pc, #180]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2238      	movs	r2, #56	; 0x38
 8003910:	4013      	ands	r3, r2
 8003912:	2b10      	cmp	r3, #16
 8003914:	d138      	bne.n	8003988 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003916:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2203      	movs	r2, #3
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003920:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	091b      	lsrs	r3, r3, #4
 8003926:	2207      	movs	r2, #7
 8003928:	4013      	ands	r3, r2
 800392a:	3301      	adds	r3, #1
 800392c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b03      	cmp	r3, #3
 8003932:	d10d      	bne.n	8003950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4824      	ldr	r0, [pc, #144]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8003938:	f7fc fbe4 	bl	8000104 <__udivsi3>
 800393c:	0003      	movs	r3, r0
 800393e:	0019      	movs	r1, r3
 8003940:	4b1f      	ldr	r3, [pc, #124]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	227f      	movs	r2, #127	; 0x7f
 8003948:	4013      	ands	r3, r2
 800394a:	434b      	muls	r3, r1
 800394c:	617b      	str	r3, [r7, #20]
        break;
 800394e:	e00d      	b.n	800396c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	481c      	ldr	r0, [pc, #112]	; (80039c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003954:	f7fc fbd6 	bl	8000104 <__udivsi3>
 8003958:	0003      	movs	r3, r0
 800395a:	0019      	movs	r1, r3
 800395c:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	0a1b      	lsrs	r3, r3, #8
 8003962:	227f      	movs	r2, #127	; 0x7f
 8003964:	4013      	ands	r3, r2
 8003966:	434b      	muls	r3, r1
 8003968:	617b      	str	r3, [r7, #20]
        break;
 800396a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800396c:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0f5b      	lsrs	r3, r3, #29
 8003972:	2207      	movs	r2, #7
 8003974:	4013      	ands	r3, r2
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	6978      	ldr	r0, [r7, #20]
 800397e:	f7fc fbc1 	bl	8000104 <__udivsi3>
 8003982:	0003      	movs	r3, r0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e015      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003988:	4b0d      	ldr	r3, [pc, #52]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2238      	movs	r2, #56	; 0x38
 800398e:	4013      	ands	r3, r2
 8003990:	2b20      	cmp	r3, #32
 8003992:	d103      	bne.n	800399c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	021b      	lsls	r3, r3, #8
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800399c:	4b08      	ldr	r3, [pc, #32]	; (80039c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	2238      	movs	r2, #56	; 0x38
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b18      	cmp	r3, #24
 80039a6:	d103      	bne.n	80039b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80039a8:	23fa      	movs	r3, #250	; 0xfa
 80039aa:	01db      	lsls	r3, r3, #7
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e001      	b.n	80039b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039b4:	693b      	ldr	r3, [r7, #16]
}
 80039b6:	0018      	movs	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	b006      	add	sp, #24
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	46c0      	nop			; (mov r8, r8)
 80039c0:	40021000 	.word	0x40021000
 80039c4:	00f42400 	.word	0x00f42400
 80039c8:	007a1200 	.word	0x007a1200

080039cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039d0:	4b02      	ldr	r3, [pc, #8]	; (80039dc <HAL_RCC_GetHCLKFreq+0x10>)
 80039d2:	681b      	ldr	r3, [r3, #0]
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b5b0      	push	{r4, r5, r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80039e4:	f7ff fff2 	bl	80039cc <HAL_RCC_GetHCLKFreq>
 80039e8:	0004      	movs	r4, r0
 80039ea:	f7ff fb39 	bl	8003060 <LL_RCC_GetAPB1Prescaler>
 80039ee:	0003      	movs	r3, r0
 80039f0:	0b1a      	lsrs	r2, r3, #12
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039f4:	0092      	lsls	r2, r2, #2
 80039f6:	58d3      	ldr	r3, [r2, r3]
 80039f8:	221f      	movs	r2, #31
 80039fa:	4013      	ands	r3, r2
 80039fc:	40dc      	lsrs	r4, r3
 80039fe:	0023      	movs	r3, r4
}
 8003a00:	0018      	movs	r0, r3
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bdb0      	pop	{r4, r5, r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	08008214 	.word	0x08008214

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a14:	2313      	movs	r3, #19
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a1c:	2312      	movs	r3, #18
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	2200      	movs	r2, #0
 8003a22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	029b      	lsls	r3, r3, #10
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d100      	bne.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a30:	e0a3      	b.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a32:	2011      	movs	r0, #17
 8003a34:	183b      	adds	r3, r7, r0
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a3a:	4ba5      	ldr	r3, [pc, #660]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a3e:	2380      	movs	r3, #128	; 0x80
 8003a40:	055b      	lsls	r3, r3, #21
 8003a42:	4013      	ands	r3, r2
 8003a44:	d110      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a46:	4ba2      	ldr	r3, [pc, #648]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a4a:	4ba1      	ldr	r3, [pc, #644]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a4c:	2180      	movs	r1, #128	; 0x80
 8003a4e:	0549      	lsls	r1, r1, #21
 8003a50:	430a      	orrs	r2, r1
 8003a52:	63da      	str	r2, [r3, #60]	; 0x3c
 8003a54:	4b9e      	ldr	r3, [pc, #632]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	055b      	lsls	r3, r3, #21
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]
 8003a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a62:	183b      	adds	r3, r7, r0
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a68:	4b9a      	ldr	r3, [pc, #616]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b99      	ldr	r3, [pc, #612]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a6e:	2180      	movs	r1, #128	; 0x80
 8003a70:	0049      	lsls	r1, r1, #1
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a76:	f7fd ff6f 	bl	8001958 <HAL_GetTick>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7e:	e00b      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a80:	f7fd ff6a 	bl	8001958 <HAL_GetTick>
 8003a84:	0002      	movs	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d904      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003a8e:	2313      	movs	r3, #19
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	2203      	movs	r2, #3
 8003a94:	701a      	strb	r2, [r3, #0]
        break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a98:	4b8e      	ldr	r3, [pc, #568]	; (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d0ed      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003aa4:	2313      	movs	r3, #19
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d154      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ab2:	23c0      	movs	r3, #192	; 0xc0
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d019      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d014      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aca:	4b81      	ldr	r3, [pc, #516]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ace:	4a82      	ldr	r2, [pc, #520]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad4:	4b7e      	ldr	r3, [pc, #504]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ad8:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ada:	2180      	movs	r1, #128	; 0x80
 8003adc:	0249      	lsls	r1, r1, #9
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae2:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ae8:	497c      	ldr	r1, [pc, #496]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003aea:	400a      	ands	r2, r1
 8003aec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003aee:	4b78      	ldr	r3, [pc, #480]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2201      	movs	r2, #1
 8003af8:	4013      	ands	r3, r2
 8003afa:	d016      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003afc:	f7fd ff2c 	bl	8001958 <HAL_GetTick>
 8003b00:	0003      	movs	r3, r0
 8003b02:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b04:	e00c      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b06:	f7fd ff27 	bl	8001958 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	4a73      	ldr	r2, [pc, #460]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d904      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003b16:	2313      	movs	r3, #19
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2203      	movs	r2, #3
 8003b1c:	701a      	strb	r2, [r3, #0]
            break;
 8003b1e:	e004      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b20:	4b6b      	ldr	r3, [pc, #428]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	2202      	movs	r2, #2
 8003b26:	4013      	ands	r3, r2
 8003b28:	d0ed      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003b2a:	2313      	movs	r3, #19
 8003b2c:	18fb      	adds	r3, r7, r3
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10a      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b34:	4b66      	ldr	r3, [pc, #408]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	4a67      	ldr	r2, [pc, #412]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	0019      	movs	r1, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b42:	4b63      	ldr	r3, [pc, #396]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b44:	430a      	orrs	r2, r1
 8003b46:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b48:	e00c      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b4a:	2312      	movs	r3, #18
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	2213      	movs	r2, #19
 8003b50:	18ba      	adds	r2, r7, r2
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b58:	2312      	movs	r3, #18
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2213      	movs	r2, #19
 8003b5e:	18ba      	adds	r2, r7, r2
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b64:	2311      	movs	r3, #17
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b72:	4b57      	ldr	r3, [pc, #348]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b74:	495b      	ldr	r1, [pc, #364]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003b76:	400a      	ands	r2, r1
 8003b78:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	4013      	ands	r3, r2
 8003b82:	d009      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b84:	4b52      	ldr	r3, [pc, #328]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b88:	2203      	movs	r2, #3
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ba2:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba6:	4a50      	ldr	r2, [pc, #320]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	4b47      	ldr	r3, [pc, #284]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d009      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc2:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc6:	4a49      	ldr	r2, [pc, #292]	; (8003cec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003bc8:	4013      	ands	r3, r2
 8003bca:	0019      	movs	r1, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4013      	ands	r3, r2
 8003be0:	d009      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be2:	4b3b      	ldr	r3, [pc, #236]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	0019      	movs	r1, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699a      	ldr	r2, [r3, #24]
 8003bf0:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d009      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c00:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	4a3b      	ldr	r2, [pc, #236]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	0019      	movs	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c10:	430a      	orrs	r2, r1
 8003c12:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	01db      	lsls	r3, r3, #7
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	0899      	lsrs	r1, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69da      	ldr	r2, [r3, #28]
 8003c36:	2380      	movs	r3, #128	; 0x80
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	0249      	lsls	r1, r1, #9
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	039b      	lsls	r3, r3, #14
 8003c54:	4013      	ands	r3, r2
 8003c56:	d016      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c58:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	4a26      	ldr	r2, [pc, #152]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	0019      	movs	r1, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1a      	ldr	r2, [r3, #32]
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1a      	ldr	r2, [r3, #32]
 8003c70:	2380      	movs	r3, #128	; 0x80
 8003c72:	03db      	lsls	r3, r3, #15
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d106      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	4b14      	ldr	r3, [pc, #80]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c7e:	2180      	movs	r1, #128	; 0x80
 8003c80:	0449      	lsls	r1, r1, #17
 8003c82:	430a      	orrs	r2, r1
 8003c84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d016      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	0019      	movs	r1, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	01db      	lsls	r3, r3, #7
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0249      	lsls	r1, r1, #9
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003cc0:	2312      	movs	r3, #18
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	781b      	ldrb	r3, [r3, #0]
}
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b006      	add	sp, #24
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40007000 	.word	0x40007000
 8003cd8:	fffffcff 	.word	0xfffffcff
 8003cdc:	fffeffff 	.word	0xfffeffff
 8003ce0:	00001388 	.word	0x00001388
 8003ce4:	efffffff 	.word	0xefffffff
 8003ce8:	fffff3ff 	.word	0xfffff3ff
 8003cec:	fff3ffff 	.word	0xfff3ffff
 8003cf0:	ffcfffff 	.word	0xffcfffff
 8003cf4:	ffffcfff 	.word	0xffffcfff
 8003cf8:	ffbfffff 	.word	0xffbfffff
 8003cfc:	ffff3fff 	.word	0xffff3fff

08003d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e04a      	b.n	8003da8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	223d      	movs	r2, #61	; 0x3d
 8003d16:	5c9b      	ldrb	r3, [r3, r2]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d107      	bne.n	8003d2e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	223c      	movs	r2, #60	; 0x3c
 8003d22:	2100      	movs	r1, #0
 8003d24:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fd fc25 	bl	8001578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	223d      	movs	r2, #61	; 0x3d
 8003d32:	2102      	movs	r1, #2
 8003d34:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3304      	adds	r3, #4
 8003d3e:	0019      	movs	r1, r3
 8003d40:	0010      	movs	r0, r2
 8003d42:	f000 ff9f 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2248      	movs	r2, #72	; 0x48
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	223e      	movs	r2, #62	; 0x3e
 8003d52:	2101      	movs	r1, #1
 8003d54:	5499      	strb	r1, [r3, r2]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	223f      	movs	r2, #63	; 0x3f
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	5499      	strb	r1, [r3, r2]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2240      	movs	r2, #64	; 0x40
 8003d62:	2101      	movs	r1, #1
 8003d64:	5499      	strb	r1, [r3, r2]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2241      	movs	r2, #65	; 0x41
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	5499      	strb	r1, [r3, r2]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2242      	movs	r2, #66	; 0x42
 8003d72:	2101      	movs	r1, #1
 8003d74:	5499      	strb	r1, [r3, r2]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2243      	movs	r2, #67	; 0x43
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2244      	movs	r2, #68	; 0x44
 8003d82:	2101      	movs	r1, #1
 8003d84:	5499      	strb	r1, [r3, r2]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2245      	movs	r2, #69	; 0x45
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	5499      	strb	r1, [r3, r2]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2246      	movs	r2, #70	; 0x46
 8003d92:	2101      	movs	r1, #1
 8003d94:	5499      	strb	r1, [r3, r2]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2247      	movs	r2, #71	; 0x47
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223d      	movs	r2, #61	; 0x3d
 8003da2:	2101      	movs	r1, #1
 8003da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b002      	add	sp, #8
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	223d      	movs	r2, #61	; 0x3d
 8003dbc:	5c9b      	ldrb	r3, [r3, r2]
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d001      	beq.n	8003dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e03d      	b.n	8003e44 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	223d      	movs	r2, #61	; 0x3d
 8003dcc:	2102      	movs	r1, #2
 8003dce:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68da      	ldr	r2, [r3, #12]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2101      	movs	r1, #1
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00a      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x50>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	2380      	movs	r3, #128	; 0x80
 8003df0:	05db      	lsls	r3, r3, #23
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d004      	beq.n	8003e00 <HAL_TIM_Base_Start_IT+0x50>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a15      	ldr	r2, [pc, #84]	; (8003e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d116      	bne.n	8003e2e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <HAL_TIM_Base_Start_IT+0xa4>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d016      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x90>
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d011      	beq.n	8003e40 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2101      	movs	r1, #1
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2c:	e008      	b.n	8003e40 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2101      	movs	r1, #1
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	601a      	str	r2, [r3, #0]
 8003e3e:	e000      	b.n	8003e42 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e40:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	0018      	movs	r0, r3
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b004      	add	sp, #16
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40012c00 	.word	0x40012c00
 8003e50:	40000400 	.word	0x40000400
 8003e54:	00010007 	.word	0x00010007

08003e58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e04a      	b.n	8003f00 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	223d      	movs	r2, #61	; 0x3d
 8003e6e:	5c9b      	ldrb	r3, [r3, r2]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223c      	movs	r2, #60	; 0x3c
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f000 f841 	bl	8003f08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	223d      	movs	r2, #61	; 0x3d
 8003e8a:	2102      	movs	r1, #2
 8003e8c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	0019      	movs	r1, r3
 8003e98:	0010      	movs	r0, r2
 8003e9a:	f000 fef3 	bl	8004c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2248      	movs	r2, #72	; 0x48
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	223e      	movs	r2, #62	; 0x3e
 8003eaa:	2101      	movs	r1, #1
 8003eac:	5499      	strb	r1, [r3, r2]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	223f      	movs	r2, #63	; 0x3f
 8003eb2:	2101      	movs	r1, #1
 8003eb4:	5499      	strb	r1, [r3, r2]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2240      	movs	r2, #64	; 0x40
 8003eba:	2101      	movs	r1, #1
 8003ebc:	5499      	strb	r1, [r3, r2]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2241      	movs	r2, #65	; 0x41
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	5499      	strb	r1, [r3, r2]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2242      	movs	r2, #66	; 0x42
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5499      	strb	r1, [r3, r2]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2243      	movs	r2, #67	; 0x43
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2244      	movs	r2, #68	; 0x44
 8003eda:	2101      	movs	r1, #1
 8003edc:	5499      	strb	r1, [r3, r2]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2245      	movs	r2, #69	; 0x45
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	5499      	strb	r1, [r3, r2]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2246      	movs	r2, #70	; 0x46
 8003eea:	2101      	movs	r1, #1
 8003eec:	5499      	strb	r1, [r3, r2]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2247      	movs	r2, #71	; 0x47
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	223d      	movs	r2, #61	; 0x3d
 8003efa:	2101      	movs	r1, #1
 8003efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	0018      	movs	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	b002      	add	sp, #8
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f10:	46c0      	nop			; (mov r8, r8)
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	001a      	movs	r2, r3
 8003f26:	1cbb      	adds	r3, r7, #2
 8003f28:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d108      	bne.n	8003f42 <HAL_TIM_PWM_Start_DMA+0x2a>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	223e      	movs	r2, #62	; 0x3e
 8003f34:	5c9b      	ldrb	r3, [r3, r2]
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	425a      	negs	r2, r3
 8003f3c:	4153      	adcs	r3, r2
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	e037      	b.n	8003fb2 <HAL_TIM_PWM_Start_DMA+0x9a>
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d108      	bne.n	8003f5a <HAL_TIM_PWM_Start_DMA+0x42>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	223f      	movs	r2, #63	; 0x3f
 8003f4c:	5c9b      	ldrb	r3, [r3, r2]
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	3b02      	subs	r3, #2
 8003f52:	425a      	negs	r2, r3
 8003f54:	4153      	adcs	r3, r2
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	e02b      	b.n	8003fb2 <HAL_TIM_PWM_Start_DMA+0x9a>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d108      	bne.n	8003f72 <HAL_TIM_PWM_Start_DMA+0x5a>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	5c9b      	ldrb	r3, [r3, r2]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	3b02      	subs	r3, #2
 8003f6a:	425a      	negs	r2, r3
 8003f6c:	4153      	adcs	r3, r2
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	e01f      	b.n	8003fb2 <HAL_TIM_PWM_Start_DMA+0x9a>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d108      	bne.n	8003f8a <HAL_TIM_PWM_Start_DMA+0x72>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2241      	movs	r2, #65	; 0x41
 8003f7c:	5c9b      	ldrb	r3, [r3, r2]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	3b02      	subs	r3, #2
 8003f82:	425a      	negs	r2, r3
 8003f84:	4153      	adcs	r3, r2
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e013      	b.n	8003fb2 <HAL_TIM_PWM_Start_DMA+0x9a>
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	d108      	bne.n	8003fa2 <HAL_TIM_PWM_Start_DMA+0x8a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2242      	movs	r2, #66	; 0x42
 8003f94:	5c9b      	ldrb	r3, [r3, r2]
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	3b02      	subs	r3, #2
 8003f9a:	425a      	negs	r2, r3
 8003f9c:	4153      	adcs	r3, r2
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	e007      	b.n	8003fb2 <HAL_TIM_PWM_Start_DMA+0x9a>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2243      	movs	r2, #67	; 0x43
 8003fa6:	5c9b      	ldrb	r3, [r3, r2]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	3b02      	subs	r3, #2
 8003fac:	425a      	negs	r2, r3
 8003fae:	4153      	adcs	r3, r2
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e17e      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d108      	bne.n	8003fd2 <HAL_TIM_PWM_Start_DMA+0xba>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	223e      	movs	r2, #62	; 0x3e
 8003fc4:	5c9b      	ldrb	r3, [r3, r2]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	425a      	negs	r2, r3
 8003fcc:	4153      	adcs	r3, r2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	e037      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x12a>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d108      	bne.n	8003fea <HAL_TIM_PWM_Start_DMA+0xd2>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	223f      	movs	r2, #63	; 0x3f
 8003fdc:	5c9b      	ldrb	r3, [r3, r2]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	425a      	negs	r2, r3
 8003fe4:	4153      	adcs	r3, r2
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	e02b      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x12a>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d108      	bne.n	8004002 <HAL_TIM_PWM_Start_DMA+0xea>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2240      	movs	r2, #64	; 0x40
 8003ff4:	5c9b      	ldrb	r3, [r3, r2]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	425a      	negs	r2, r3
 8003ffc:	4153      	adcs	r3, r2
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	e01f      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x12a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d108      	bne.n	800401a <HAL_TIM_PWM_Start_DMA+0x102>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2241      	movs	r2, #65	; 0x41
 800400c:	5c9b      	ldrb	r3, [r3, r2]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	3b01      	subs	r3, #1
 8004012:	425a      	negs	r2, r3
 8004014:	4153      	adcs	r3, r2
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e013      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x12a>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b10      	cmp	r3, #16
 800401e:	d108      	bne.n	8004032 <HAL_TIM_PWM_Start_DMA+0x11a>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2242      	movs	r2, #66	; 0x42
 8004024:	5c9b      	ldrb	r3, [r3, r2]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	3b01      	subs	r3, #1
 800402a:	425a      	negs	r2, r3
 800402c:	4153      	adcs	r3, r2
 800402e:	b2db      	uxtb	r3, r3
 8004030:	e007      	b.n	8004042 <HAL_TIM_PWM_Start_DMA+0x12a>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2243      	movs	r2, #67	; 0x43
 8004036:	5c9b      	ldrb	r3, [r3, r2]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	3b01      	subs	r3, #1
 800403c:	425a      	negs	r2, r3
 800403e:	4153      	adcs	r3, r2
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d035      	beq.n	80040b2 <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d105      	bne.n	8004058 <HAL_TIM_PWM_Start_DMA+0x140>
 800404c:	1cbb      	adds	r3, r7, #2
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e12f      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_TIM_PWM_Start_DMA+0x150>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	223e      	movs	r2, #62	; 0x3e
 8004062:	2102      	movs	r1, #2
 8004064:	5499      	strb	r1, [r3, r2]
 8004066:	e026      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2b04      	cmp	r3, #4
 800406c:	d104      	bne.n	8004078 <HAL_TIM_PWM_Start_DMA+0x160>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	223f      	movs	r2, #63	; 0x3f
 8004072:	2102      	movs	r1, #2
 8004074:	5499      	strb	r1, [r3, r2]
 8004076:	e01e      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2b08      	cmp	r3, #8
 800407c:	d104      	bne.n	8004088 <HAL_TIM_PWM_Start_DMA+0x170>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2240      	movs	r2, #64	; 0x40
 8004082:	2102      	movs	r1, #2
 8004084:	5499      	strb	r1, [r3, r2]
 8004086:	e016      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d104      	bne.n	8004098 <HAL_TIM_PWM_Start_DMA+0x180>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2241      	movs	r2, #65	; 0x41
 8004092:	2102      	movs	r1, #2
 8004094:	5499      	strb	r1, [r3, r2]
 8004096:	e00e      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b10      	cmp	r3, #16
 800409c:	d104      	bne.n	80040a8 <HAL_TIM_PWM_Start_DMA+0x190>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2242      	movs	r2, #66	; 0x42
 80040a2:	2102      	movs	r1, #2
 80040a4:	5499      	strb	r1, [r3, r2]
 80040a6:	e006      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2243      	movs	r2, #67	; 0x43
 80040ac:	2102      	movs	r1, #2
 80040ae:	5499      	strb	r1, [r3, r2]
 80040b0:	e001      	b.n	80040b6 <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e100      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }

  switch (Channel)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b0c      	cmp	r3, #12
 80040ba:	d100      	bne.n	80040be <HAL_TIM_PWM_Start_DMA+0x1a6>
 80040bc:	e080      	b.n	80041c0 <HAL_TIM_PWM_Start_DMA+0x2a8>
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	2b0c      	cmp	r3, #12
 80040c2:	d900      	bls.n	80040c6 <HAL_TIM_PWM_Start_DMA+0x1ae>
 80040c4:	e0a1      	b.n	800420a <HAL_TIM_PWM_Start_DMA+0x2f2>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d054      	beq.n	8004176 <HAL_TIM_PWM_Start_DMA+0x25e>
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d900      	bls.n	80040d4 <HAL_TIM_PWM_Start_DMA+0x1bc>
 80040d2:	e09a      	b.n	800420a <HAL_TIM_PWM_Start_DMA+0x2f2>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_PWM_Start_DMA+0x1ca>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d025      	beq.n	800412c <HAL_TIM_PWM_Start_DMA+0x214>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 80040e0:	e093      	b.n	800420a <HAL_TIM_PWM_Start_DMA+0x2f2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	4a76      	ldr	r2, [pc, #472]	; (80042c0 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80040e8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	4a75      	ldr	r2, [pc, #468]	; (80042c4 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	4a74      	ldr	r2, [pc, #464]	; (80042c8 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3334      	adds	r3, #52	; 0x34
 8004106:	001a      	movs	r2, r3
 8004108:	1cbb      	adds	r3, r7, #2
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	f7fe fb52 	bl	80027b4 <HAL_DMA_Start_IT>
 8004110:	1e03      	subs	r3, r0, #0
 8004112:	d001      	beq.n	8004118 <HAL_TIM_PWM_Start_DMA+0x200>
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0cf      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2180      	movs	r1, #128	; 0x80
 8004124:	0089      	lsls	r1, r1, #2
 8004126:	430a      	orrs	r2, r1
 8004128:	60da      	str	r2, [r3, #12]
      break;
 800412a:	e06f      	b.n	800420c <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	4a63      	ldr	r2, [pc, #396]	; (80042c0 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	4a62      	ldr	r2, [pc, #392]	; (80042c4 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800413a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	4a61      	ldr	r2, [pc, #388]	; (80042c8 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8004142:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	3338      	adds	r3, #56	; 0x38
 8004150:	001a      	movs	r2, r3
 8004152:	1cbb      	adds	r3, r7, #2
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	f7fe fb2d 	bl	80027b4 <HAL_DMA_Start_IT>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d001      	beq.n	8004162 <HAL_TIM_PWM_Start_DMA+0x24a>
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e0aa      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	00c9      	lsls	r1, r1, #3
 8004170:	430a      	orrs	r2, r1
 8004172:	60da      	str	r2, [r3, #12]
      break;
 8004174:	e04a      	b.n	800420c <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417a:	4a51      	ldr	r2, [pc, #324]	; (80042c0 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8004184:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	4a4f      	ldr	r2, [pc, #316]	; (80042c8 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 800418c:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	333c      	adds	r3, #60	; 0x3c
 800419a:	001a      	movs	r2, r3
 800419c:	1cbb      	adds	r3, r7, #2
 800419e:	881b      	ldrh	r3, [r3, #0]
 80041a0:	f7fe fb08 	bl	80027b4 <HAL_DMA_Start_IT>
 80041a4:	1e03      	subs	r3, r0, #0
 80041a6:	d001      	beq.n	80041ac <HAL_TIM_PWM_Start_DMA+0x294>
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e085      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2180      	movs	r1, #128	; 0x80
 80041b8:	0109      	lsls	r1, r1, #4
 80041ba:	430a      	orrs	r2, r1
 80041bc:	60da      	str	r2, [r3, #12]
      break;
 80041be:	e025      	b.n	800420c <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c4:	4a3e      	ldr	r2, [pc, #248]	; (80042c0 <HAL_TIM_PWM_Start_DMA+0x3a8>)
 80041c6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	4a3c      	ldr	r2, [pc, #240]	; (80042c8 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3340      	adds	r3, #64	; 0x40
 80041e4:	001a      	movs	r2, r3
 80041e6:	1cbb      	adds	r3, r7, #2
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	f7fe fae3 	bl	80027b4 <HAL_DMA_Start_IT>
 80041ee:	1e03      	subs	r3, r0, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_TIM_PWM_Start_DMA+0x2de>
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e060      	b.n	80042b8 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2180      	movs	r1, #128	; 0x80
 8004202:	0149      	lsls	r1, r1, #5
 8004204:	430a      	orrs	r2, r1
 8004206:	60da      	str	r2, [r3, #12]
      break;
 8004208:	e000      	b.n	800420c <HAL_TIM_PWM_Start_DMA+0x2f4>
      break;
 800420a:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68b9      	ldr	r1, [r7, #8]
 8004212:	2201      	movs	r2, #1
 8004214:	0018      	movs	r0, r3
 8004216:	f001 f8e3 	bl	80053e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_TIM_PWM_Start_DMA+0x3b4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_TIM_PWM_Start_DMA+0x320>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a29      	ldr	r2, [pc, #164]	; (80042d0 <HAL_TIM_PWM_Start_DMA+0x3b8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_TIM_PWM_Start_DMA+0x320>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a28      	ldr	r2, [pc, #160]	; (80042d4 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d101      	bne.n	800423c <HAL_TIM_PWM_Start_DMA+0x324>
 8004238:	2301      	movs	r3, #1
 800423a:	e000      	b.n	800423e <HAL_TIM_PWM_Start_DMA+0x326>
 800423c:	2300      	movs	r3, #0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d008      	beq.n	8004254 <HAL_TIM_PWM_Start_DMA+0x33c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2180      	movs	r1, #128	; 0x80
 800424e:	0209      	lsls	r1, r1, #8
 8004250:	430a      	orrs	r2, r1
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1c      	ldr	r2, [pc, #112]	; (80042cc <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00a      	beq.n	8004274 <HAL_TIM_PWM_Start_DMA+0x35c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	05db      	lsls	r3, r3, #23
 8004266:	429a      	cmp	r2, r3
 8004268:	d004      	beq.n	8004274 <HAL_TIM_PWM_Start_DMA+0x35c>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d116      	bne.n	80042a2 <HAL_TIM_PWM_Start_DMA+0x38a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIM_PWM_Start_DMA+0x3c4>)
 800427c:	4013      	ands	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b06      	cmp	r3, #6
 8004284:	d016      	beq.n	80042b4 <HAL_TIM_PWM_Start_DMA+0x39c>
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	2380      	movs	r3, #128	; 0x80
 800428a:	025b      	lsls	r3, r3, #9
 800428c:	429a      	cmp	r2, r3
 800428e:	d011      	beq.n	80042b4 <HAL_TIM_PWM_Start_DMA+0x39c>
    {
      __HAL_TIM_ENABLE(htim);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2101      	movs	r1, #1
 800429c:	430a      	orrs	r2, r1
 800429e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	e008      	b.n	80042b4 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2101      	movs	r1, #1
 80042ae:	430a      	orrs	r2, r1
 80042b0:	601a      	str	r2, [r3, #0]
 80042b2:	e000      	b.n	80042b6 <HAL_TIM_PWM_Start_DMA+0x39e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b006      	add	sp, #24
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	08004b71 	.word	0x08004b71
 80042c4:	08004c1b 	.word	0x08004c1b
 80042c8:	08004add 	.word	0x08004add
 80042cc:	40012c00 	.word	0x40012c00
 80042d0:	40014400 	.word	0x40014400
 80042d4:	40014800 	.word	0x40014800
 80042d8:	40000400 	.word	0x40000400
 80042dc:	00010007 	.word	0x00010007

080042e0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d039      	beq.n	8004364 <HAL_TIM_PWM_Stop_DMA+0x84>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b0c      	cmp	r3, #12
 80042f4:	d844      	bhi.n	8004380 <HAL_TIM_PWM_Stop_DMA+0xa0>
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d025      	beq.n	8004348 <HAL_TIM_PWM_Stop_DMA+0x68>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d83e      	bhi.n	8004380 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_TIM_PWM_Stop_DMA+0x30>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b04      	cmp	r3, #4
 800430c:	d00e      	beq.n	800432c <HAL_TIM_PWM_Stop_DMA+0x4c>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 800430e:	e037      	b.n	8004380 <HAL_TIM_PWM_Stop_DMA+0xa0>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4954      	ldr	r1, [pc, #336]	; (800446c <HAL_TIM_PWM_Stop_DMA+0x18c>)
 800431c:	400a      	ands	r2, r1
 800431e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	0018      	movs	r0, r3
 8004326:	f7fe fb2d 	bl	8002984 <HAL_DMA_Abort_IT>
      break;
 800432a:	e02a      	b.n	8004382 <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	494e      	ldr	r1, [pc, #312]	; (8004470 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8004338:	400a      	ands	r2, r1
 800433a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004340:	0018      	movs	r0, r3
 8004342:	f7fe fb1f 	bl	8002984 <HAL_DMA_Abort_IT>
      break;
 8004346:	e01c      	b.n	8004382 <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4948      	ldr	r1, [pc, #288]	; (8004474 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8004354:	400a      	ands	r2, r1
 8004356:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	0018      	movs	r0, r3
 800435e:	f7fe fb11 	bl	8002984 <HAL_DMA_Abort_IT>
      break;
 8004362:	e00e      	b.n	8004382 <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4942      	ldr	r1, [pc, #264]	; (8004478 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8004370:	400a      	ands	r2, r1
 8004372:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004378:	0018      	movs	r0, r3
 800437a:	f7fe fb03 	bl	8002984 <HAL_DMA_Abort_IT>
      break;
 800437e:	e000      	b.n	8004382 <HAL_TIM_PWM_Stop_DMA+0xa2>
      break;
 8004380:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6839      	ldr	r1, [r7, #0]
 8004388:	2200      	movs	r2, #0
 800438a:	0018      	movs	r0, r3
 800438c:	f001 f828 	bl	80053e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a39      	ldr	r2, [pc, #228]	; (800447c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d009      	beq.n	80043ae <HAL_TIM_PWM_Stop_DMA+0xce>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a38      	ldr	r2, [pc, #224]	; (8004480 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d004      	beq.n	80043ae <HAL_TIM_PWM_Stop_DMA+0xce>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_PWM_Stop_DMA+0xd2>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_TIM_PWM_Stop_DMA+0xd4>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d013      	beq.n	80043e0 <HAL_TIM_PWM_Stop_DMA+0x100>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	4a32      	ldr	r2, [pc, #200]	; (8004488 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80043c0:	4013      	ands	r3, r2
 80043c2:	d10d      	bne.n	80043e0 <HAL_TIM_PWM_Stop_DMA+0x100>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6a1b      	ldr	r3, [r3, #32]
 80043ca:	4a30      	ldr	r2, [pc, #192]	; (800448c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_PWM_Stop_DMA+0x100>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	492d      	ldr	r1, [pc, #180]	; (8004490 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80043dc:	400a      	ands	r2, r1
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4a28      	ldr	r2, [pc, #160]	; (8004488 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	d10d      	bne.n	8004408 <HAL_TIM_PWM_Stop_DMA+0x128>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	4a26      	ldr	r2, [pc, #152]	; (800448c <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	d107      	bne.n	8004408 <HAL_TIM_PWM_Stop_DMA+0x128>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2101      	movs	r1, #1
 8004404:	438a      	bics	r2, r1
 8004406:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d104      	bne.n	8004418 <HAL_TIM_PWM_Stop_DMA+0x138>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223e      	movs	r2, #62	; 0x3e
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]
 8004416:	e023      	b.n	8004460 <HAL_TIM_PWM_Stop_DMA+0x180>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b04      	cmp	r3, #4
 800441c:	d104      	bne.n	8004428 <HAL_TIM_PWM_Stop_DMA+0x148>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	223f      	movs	r2, #63	; 0x3f
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]
 8004426:	e01b      	b.n	8004460 <HAL_TIM_PWM_Stop_DMA+0x180>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b08      	cmp	r3, #8
 800442c:	d104      	bne.n	8004438 <HAL_TIM_PWM_Stop_DMA+0x158>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2240      	movs	r2, #64	; 0x40
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
 8004436:	e013      	b.n	8004460 <HAL_TIM_PWM_Stop_DMA+0x180>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b0c      	cmp	r3, #12
 800443c:	d104      	bne.n	8004448 <HAL_TIM_PWM_Stop_DMA+0x168>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2241      	movs	r2, #65	; 0x41
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]
 8004446:	e00b      	b.n	8004460 <HAL_TIM_PWM_Stop_DMA+0x180>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b10      	cmp	r3, #16
 800444c:	d104      	bne.n	8004458 <HAL_TIM_PWM_Stop_DMA+0x178>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2242      	movs	r2, #66	; 0x42
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]
 8004456:	e003      	b.n	8004460 <HAL_TIM_PWM_Stop_DMA+0x180>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2243      	movs	r2, #67	; 0x43
 800445c:	2101      	movs	r1, #1
 800445e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	0018      	movs	r0, r3
 8004464:	46bd      	mov	sp, r7
 8004466:	b002      	add	sp, #8
 8004468:	bd80      	pop	{r7, pc}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	fffffdff 	.word	0xfffffdff
 8004470:	fffffbff 	.word	0xfffffbff
 8004474:	fffff7ff 	.word	0xfffff7ff
 8004478:	ffffefff 	.word	0xffffefff
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40014400 	.word	0x40014400
 8004484:	40014800 	.word	0x40014800
 8004488:	00001111 	.word	0x00001111
 800448c:	00000444 	.word	0x00000444
 8004490:	ffff7fff 	.word	0xffff7fff

08004494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d124      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	2202      	movs	r2, #2
 80044b2:	4013      	ands	r3, r2
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d11d      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2203      	movs	r2, #3
 80044be:	4252      	negs	r2, r2
 80044c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2203      	movs	r2, #3
 80044d0:	4013      	ands	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 fad8 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80044dc:	e007      	b.n	80044ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 facb 	bl	8004a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f000 fad7 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	2204      	movs	r2, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d125      	bne.n	800454e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2204      	movs	r2, #4
 800450a:	4013      	ands	r3, r2
 800450c:	2b04      	cmp	r3, #4
 800450e:	d11e      	bne.n	800454e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2205      	movs	r2, #5
 8004516:	4252      	negs	r2, r2
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2202      	movs	r2, #2
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	699a      	ldr	r2, [r3, #24]
 8004526:	23c0      	movs	r3, #192	; 0xc0
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4013      	ands	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	0018      	movs	r0, r3
 8004532:	f000 faab 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 8004536:	e007      	b.n	8004548 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0018      	movs	r0, r3
 800453c:	f000 fa9e 	bl	8004a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0018      	movs	r0, r3
 8004544:	f000 faaa 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2208      	movs	r2, #8
 8004556:	4013      	ands	r3, r2
 8004558:	2b08      	cmp	r3, #8
 800455a:	d124      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2208      	movs	r2, #8
 8004564:	4013      	ands	r3, r2
 8004566:	2b08      	cmp	r3, #8
 8004568:	d11d      	bne.n	80045a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2209      	movs	r2, #9
 8004570:	4252      	negs	r2, r2
 8004572:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2204      	movs	r2, #4
 8004578:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2203      	movs	r2, #3
 8004582:	4013      	ands	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	0018      	movs	r0, r3
 800458a:	f000 fa7f 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 800458e:	e007      	b.n	80045a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	0018      	movs	r0, r3
 8004594:	f000 fa72 	bl	8004a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	0018      	movs	r0, r3
 800459c:	f000 fa7e 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2210      	movs	r2, #16
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d125      	bne.n	8004600 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	2210      	movs	r2, #16
 80045bc:	4013      	ands	r3, r2
 80045be:	2b10      	cmp	r3, #16
 80045c0:	d11e      	bne.n	8004600 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2211      	movs	r2, #17
 80045c8:	4252      	negs	r2, r2
 80045ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2208      	movs	r2, #8
 80045d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	23c0      	movs	r3, #192	; 0xc0
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 fa52 	bl	8004a8c <HAL_TIM_IC_CaptureCallback>
 80045e8:	e007      	b.n	80045fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f000 fa45 	bl	8004a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0018      	movs	r0, r3
 80045f6:	f000 fa51 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	2201      	movs	r2, #1
 8004608:	4013      	ands	r3, r2
 800460a:	2b01      	cmp	r3, #1
 800460c:	d10f      	bne.n	800462e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	4013      	ands	r3, r2
 8004618:	2b01      	cmp	r3, #1
 800461a:	d108      	bne.n	800462e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2202      	movs	r2, #2
 8004622:	4252      	negs	r2, r2
 8004624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	0018      	movs	r0, r3
 800462a:	f002 fca3 	bl	8006f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	2280      	movs	r2, #128	; 0x80
 8004636:	4013      	ands	r3, r2
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d10f      	bne.n	800465c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	4013      	ands	r3, r2
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d108      	bne.n	800465c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2281      	movs	r2, #129	; 0x81
 8004650:	4252      	negs	r2, r2
 8004652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	0018      	movs	r0, r3
 8004658:	f000 ff56 	bl	8005508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	005b      	lsls	r3, r3, #1
 8004666:	401a      	ands	r2, r3
 8004668:	2380      	movs	r3, #128	; 0x80
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	429a      	cmp	r2, r3
 800466e:	d10e      	bne.n	800468e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2280      	movs	r2, #128	; 0x80
 8004678:	4013      	ands	r3, r2
 800467a:	2b80      	cmp	r3, #128	; 0x80
 800467c:	d107      	bne.n	800468e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <HAL_TIM_IRQHandler+0x260>)
 8004684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	0018      	movs	r0, r3
 800468a:	f000 ff45 	bl	8005518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	2240      	movs	r2, #64	; 0x40
 8004696:	4013      	ands	r3, r2
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d10f      	bne.n	80046bc <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d108      	bne.n	80046bc <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2241      	movs	r2, #65	; 0x41
 80046b0:	4252      	negs	r2, r2
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fa00 	bl	8004abc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2220      	movs	r2, #32
 80046c4:	4013      	ands	r3, r2
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10f      	bne.n	80046ea <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	4013      	ands	r3, r2
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d108      	bne.n	80046ea <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2221      	movs	r2, #33	; 0x21
 80046de:	4252      	negs	r2, r2
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	0018      	movs	r0, r3
 80046e6:	f000 ff07 	bl	80054f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046ea:	46c0      	nop			; (mov r8, r8)
 80046ec:	46bd      	mov	sp, r7
 80046ee:	b002      	add	sp, #8
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	fffffeff 	.word	0xfffffeff

080046f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	223c      	movs	r2, #60	; 0x3c
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800470e:	2302      	movs	r3, #2
 8004710:	e0df      	b.n	80048d2 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	223c      	movs	r2, #60	; 0x3c
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b14      	cmp	r3, #20
 800471e:	d900      	bls.n	8004722 <HAL_TIM_PWM_ConfigChannel+0x2a>
 8004720:	e0d1      	b.n	80048c6 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	009a      	lsls	r2, r3, #2
 8004726:	4b6d      	ldr	r3, [pc, #436]	; (80048dc <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	0011      	movs	r1, r2
 8004736:	0018      	movs	r0, r3
 8004738:	f000 fb1a 	bl	8004d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2108      	movs	r1, #8
 8004748:	430a      	orrs	r2, r1
 800474a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2104      	movs	r1, #4
 8004758:	438a      	bics	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6999      	ldr	r1, [r3, #24]
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	619a      	str	r2, [r3, #24]
      break;
 800476e:	e0ab      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	0011      	movs	r1, r2
 8004778:	0018      	movs	r0, r3
 800477a:	f000 fb79 	bl	8004e70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2180      	movs	r1, #128	; 0x80
 800478a:	0109      	lsls	r1, r1, #4
 800478c:	430a      	orrs	r2, r1
 800478e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4951      	ldr	r1, [pc, #324]	; (80048e0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800479c:	400a      	ands	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6999      	ldr	r1, [r3, #24]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	619a      	str	r2, [r3, #24]
      break;
 80047b4:	e088      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 fbd4 	bl	8004f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2108      	movs	r1, #8
 80047d0:	430a      	orrs	r2, r1
 80047d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69da      	ldr	r2, [r3, #28]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2104      	movs	r1, #4
 80047e0:	438a      	bics	r2, r1
 80047e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69d9      	ldr	r1, [r3, #28]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	61da      	str	r2, [r3, #28]
      break;
 80047f6:	e067      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	0011      	movs	r1, r2
 8004800:	0018      	movs	r0, r3
 8004802:	f000 fc35 	bl	8005070 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	69da      	ldr	r2, [r3, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	0109      	lsls	r1, r1, #4
 8004814:	430a      	orrs	r2, r1
 8004816:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69da      	ldr	r2, [r3, #28]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	492f      	ldr	r1, [pc, #188]	; (80048e0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8004824:	400a      	ands	r2, r1
 8004826:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	69d9      	ldr	r1, [r3, #28]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	61da      	str	r2, [r3, #28]
      break;
 800483c:	e044      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f000 fc76 	bl	8005138 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2108      	movs	r1, #8
 8004858:	430a      	orrs	r2, r1
 800485a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2104      	movs	r1, #4
 8004868:	438a      	bics	r2, r1
 800486a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800487e:	e023      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	0011      	movs	r1, r2
 8004888:	0018      	movs	r0, r3
 800488a:	f000 fcaf 	bl	80051ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2180      	movs	r1, #128	; 0x80
 800489a:	0109      	lsls	r1, r1, #4
 800489c:	430a      	orrs	r2, r1
 800489e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	021a      	lsls	r2, r3, #8
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	430a      	orrs	r2, r1
 80048c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80048c4:	e000      	b.n	80048c8 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80048c6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	223c      	movs	r2, #60	; 0x3c
 80048cc:	2100      	movs	r1, #0
 80048ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	0018      	movs	r0, r3
 80048d4:	46bd      	mov	sp, r7
 80048d6:	b004      	add	sp, #16
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	08008234 	.word	0x08008234
 80048e0:	fffffbff 	.word	0xfffffbff

080048e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	223c      	movs	r2, #60	; 0x3c
 80048f2:	5c9b      	ldrb	r3, [r3, r2]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_TIM_ConfigClockSource+0x18>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e0b7      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x188>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	223c      	movs	r2, #60	; 0x3c
 8004900:	2101      	movs	r1, #1
 8004902:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	223d      	movs	r2, #61	; 0x3d
 8004908:	2102      	movs	r1, #2
 800490a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a57      	ldr	r2, [pc, #348]	; (8004a74 <HAL_TIM_ConfigClockSource+0x190>)
 8004918:	4013      	ands	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4a56      	ldr	r2, [pc, #344]	; (8004a78 <HAL_TIM_ConfigClockSource+0x194>)
 8004920:	4013      	ands	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2280      	movs	r2, #128	; 0x80
 8004932:	0192      	lsls	r2, r2, #6
 8004934:	4293      	cmp	r3, r2
 8004936:	d040      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0xd6>
 8004938:	2280      	movs	r2, #128	; 0x80
 800493a:	0192      	lsls	r2, r2, #6
 800493c:	4293      	cmp	r3, r2
 800493e:	d900      	bls.n	8004942 <HAL_TIM_ConfigClockSource+0x5e>
 8004940:	e088      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	0152      	lsls	r2, r2, #5
 8004946:	4293      	cmp	r3, r2
 8004948:	d100      	bne.n	800494c <HAL_TIM_ConfigClockSource+0x68>
 800494a:	e085      	b.n	8004a58 <HAL_TIM_ConfigClockSource+0x174>
 800494c:	2280      	movs	r2, #128	; 0x80
 800494e:	0152      	lsls	r2, r2, #5
 8004950:	4293      	cmp	r3, r2
 8004952:	d900      	bls.n	8004956 <HAL_TIM_ConfigClockSource+0x72>
 8004954:	e07e      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 8004956:	2b70      	cmp	r3, #112	; 0x70
 8004958:	d018      	beq.n	800498c <HAL_TIM_ConfigClockSource+0xa8>
 800495a:	d900      	bls.n	800495e <HAL_TIM_ConfigClockSource+0x7a>
 800495c:	e07a      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 800495e:	2b60      	cmp	r3, #96	; 0x60
 8004960:	d04f      	beq.n	8004a02 <HAL_TIM_ConfigClockSource+0x11e>
 8004962:	d900      	bls.n	8004966 <HAL_TIM_ConfigClockSource+0x82>
 8004964:	e076      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 8004966:	2b50      	cmp	r3, #80	; 0x50
 8004968:	d03b      	beq.n	80049e2 <HAL_TIM_ConfigClockSource+0xfe>
 800496a:	d900      	bls.n	800496e <HAL_TIM_ConfigClockSource+0x8a>
 800496c:	e072      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d057      	beq.n	8004a22 <HAL_TIM_ConfigClockSource+0x13e>
 8004972:	d900      	bls.n	8004976 <HAL_TIM_ConfigClockSource+0x92>
 8004974:	e06e      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 8004976:	2b30      	cmp	r3, #48	; 0x30
 8004978:	d063      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x15e>
 800497a:	d86b      	bhi.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 800497c:	2b20      	cmp	r3, #32
 800497e:	d060      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x15e>
 8004980:	d868      	bhi.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d05d      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x15e>
 8004986:	2b10      	cmp	r3, #16
 8004988:	d05b      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800498a:	e063      	b.n	8004a54 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6818      	ldr	r0, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	6899      	ldr	r1, [r3, #8]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	f000 fd00 	bl	80053a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2277      	movs	r2, #119	; 0x77
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	609a      	str	r2, [r3, #8]
      break;
 80049b8:	e04f      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6899      	ldr	r1, [r3, #8]
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f000 fce9 	bl	80053a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2180      	movs	r1, #128	; 0x80
 80049da:	01c9      	lsls	r1, r1, #7
 80049dc:	430a      	orrs	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
      break;
 80049e0:	e03b      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	6859      	ldr	r1, [r3, #4]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	001a      	movs	r2, r3
 80049f0:	f000 fc5a 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2150      	movs	r1, #80	; 0x50
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fcb4 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 8004a00:	e02b      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6818      	ldr	r0, [r3, #0]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	6859      	ldr	r1, [r3, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	001a      	movs	r2, r3
 8004a10:	f000 fc78 	bl	8005304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2160      	movs	r1, #96	; 0x60
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	f000 fca4 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 8004a20:	e01b      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6859      	ldr	r1, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	001a      	movs	r2, r3
 8004a30:	f000 fc3a 	bl	80052a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2140      	movs	r1, #64	; 0x40
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 fc94 	bl	8005368 <TIM_ITRx_SetConfig>
      break;
 8004a40:	e00b      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	0019      	movs	r1, r3
 8004a4c:	0010      	movs	r0, r2
 8004a4e:	f000 fc8b 	bl	8005368 <TIM_ITRx_SetConfig>
        break;
 8004a52:	e002      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	e000      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8004a58:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	223d      	movs	r2, #61	; 0x3d
 8004a5e:	2101      	movs	r1, #1
 8004a60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	223c      	movs	r2, #60	; 0x3c
 8004a66:	2100      	movs	r1, #0
 8004a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	ffceff88 	.word	0xffceff88
 8004a78:	ffff00ff 	.word	0xffff00ff

08004a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a84:	46c0      	nop			; (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b082      	sub	sp, #8
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a94:	46c0      	nop			; (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b002      	add	sp, #8
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa4:	46c0      	nop			; (mov r8, r8)
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b002      	add	sp, #8
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004ab4:	46c0      	nop			; (mov r8, r8)
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b002      	add	sp, #8
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b002      	add	sp, #8
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004ad4:	46c0      	nop			; (mov r8, r8)
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	b002      	add	sp, #8
 8004ada:	bd80      	pop	{r7, pc}

08004adc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d107      	bne.n	8004b04 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	223e      	movs	r2, #62	; 0x3e
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
 8004b02:	e02a      	b.n	8004b5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d107      	bne.n	8004b1e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2202      	movs	r2, #2
 8004b12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	223f      	movs	r2, #63	; 0x3f
 8004b18:	2101      	movs	r1, #1
 8004b1a:	5499      	strb	r1, [r3, r2]
 8004b1c:	e01d      	b.n	8004b5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2240      	movs	r2, #64	; 0x40
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]
 8004b36:	e010      	b.n	8004b5a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d107      	bne.n	8004b52 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2208      	movs	r2, #8
 8004b46:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2241      	movs	r2, #65	; 0x41
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	5499      	strb	r1, [r3, r2]
 8004b50:	e003      	b.n	8004b5a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	223d      	movs	r2, #61	; 0x3d
 8004b56:	2101      	movs	r1, #1
 8004b58:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	0018      	movs	r0, r3
 8004b5e:	f7ff ffb5 	bl	8004acc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b004      	add	sp, #16
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d10b      	bne.n	8004ba0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d136      	bne.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	223e      	movs	r2, #62	; 0x3e
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	5499      	strb	r1, [r3, r2]
 8004b9e:	e031      	b.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d10b      	bne.n	8004bc2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2202      	movs	r2, #2
 8004bae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d125      	bne.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	223f      	movs	r2, #63	; 0x3f
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	5499      	strb	r1, [r3, r2]
 8004bc0:	e020      	b.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d10b      	bne.n	8004be4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d114      	bne.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2240      	movs	r2, #64	; 0x40
 8004bde:	2101      	movs	r1, #1
 8004be0:	5499      	strb	r1, [r3, r2]
 8004be2:	e00f      	b.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d10a      	bne.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2208      	movs	r2, #8
 8004bf2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d103      	bne.n	8004c04 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2241      	movs	r2, #65	; 0x41
 8004c00:	2101      	movs	r1, #1
 8004c02:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	0018      	movs	r0, r3
 8004c08:	f7ff ff48 	bl	8004a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	771a      	strb	r2, [r3, #28]
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c26:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	429a      	cmp	r2, r3
 8004c30:	d103      	bne.n	8004c3a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	771a      	strb	r2, [r3, #28]
 8004c38:	e019      	b.n	8004c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d103      	bne.n	8004c4c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2202      	movs	r2, #2
 8004c48:	771a      	strb	r2, [r3, #28]
 8004c4a:	e010      	b.n	8004c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d103      	bne.n	8004c5e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2204      	movs	r2, #4
 8004c5a:	771a      	strb	r2, [r3, #28]
 8004c5c:	e007      	b.n	8004c6e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d102      	bne.n	8004c6e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2208      	movs	r2, #8
 8004c6c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	0018      	movs	r0, r3
 8004c72:	f7ff ff1b 	bl	8004aac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
}
 8004c7c:	46c0      	nop			; (mov r8, r8)
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a30      	ldr	r2, [pc, #192]	; (8004d58 <TIM_Base_SetConfig+0xd4>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d008      	beq.n	8004cae <TIM_Base_SetConfig+0x2a>
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	05db      	lsls	r3, r3, #23
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0x2a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <TIM_Base_SetConfig+0xd8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2270      	movs	r2, #112	; 0x70
 8004cb2:	4393      	bics	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a25      	ldr	r2, [pc, #148]	; (8004d58 <TIM_Base_SetConfig+0xd4>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d014      	beq.n	8004cf2 <TIM_Base_SetConfig+0x6e>
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	05db      	lsls	r3, r3, #23
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d00f      	beq.n	8004cf2 <TIM_Base_SetConfig+0x6e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <TIM_Base_SetConfig+0xd8>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00b      	beq.n	8004cf2 <TIM_Base_SetConfig+0x6e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a20      	ldr	r2, [pc, #128]	; (8004d60 <TIM_Base_SetConfig+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d007      	beq.n	8004cf2 <TIM_Base_SetConfig+0x6e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <TIM_Base_SetConfig+0xe0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d003      	beq.n	8004cf2 <TIM_Base_SetConfig+0x6e>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <TIM_Base_SetConfig+0xe4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d108      	bne.n	8004d04 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <TIM_Base_SetConfig+0xe8>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2280      	movs	r2, #128	; 0x80
 8004d08:	4393      	bics	r3, r2
 8004d0a:	001a      	movs	r2, r3
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	695b      	ldr	r3, [r3, #20]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a0a      	ldr	r2, [pc, #40]	; (8004d58 <TIM_Base_SetConfig+0xd4>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0xbe>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a0b      	ldr	r2, [pc, #44]	; (8004d64 <TIM_Base_SetConfig+0xe0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0xbe>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <TIM_Base_SetConfig+0xe4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d103      	bne.n	8004d4a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	691a      	ldr	r2, [r3, #16]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	615a      	str	r2, [r3, #20]
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40002000 	.word	0x40002000
 8004d64:	40014400 	.word	0x40014400
 8004d68:	40014800 	.word	0x40014800
 8004d6c:	fffffcff 	.word	0xfffffcff

08004d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	4393      	bics	r3, r2
 8004d82:	001a      	movs	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4a2e      	ldr	r2, [pc, #184]	; (8004e58 <TIM_OC1_SetConfig+0xe8>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2203      	movs	r2, #3
 8004da6:	4393      	bics	r3, r2
 8004da8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2202      	movs	r2, #2
 8004db8:	4393      	bics	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a24      	ldr	r2, [pc, #144]	; (8004e5c <TIM_OC1_SetConfig+0xec>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <TIM_OC1_SetConfig+0x6e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <TIM_OC1_SetConfig+0xf0>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d003      	beq.n	8004dde <TIM_OC1_SetConfig+0x6e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <TIM_OC1_SetConfig+0xf4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d10c      	bne.n	8004df8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2208      	movs	r2, #8
 8004de2:	4393      	bics	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2204      	movs	r2, #4
 8004df4:	4393      	bics	r3, r2
 8004df6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a18      	ldr	r2, [pc, #96]	; (8004e5c <TIM_OC1_SetConfig+0xec>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d007      	beq.n	8004e10 <TIM_OC1_SetConfig+0xa0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a17      	ldr	r2, [pc, #92]	; (8004e60 <TIM_OC1_SetConfig+0xf0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d003      	beq.n	8004e10 <TIM_OC1_SetConfig+0xa0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	; (8004e64 <TIM_OC1_SetConfig+0xf4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d111      	bne.n	8004e34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	4a15      	ldr	r2, [pc, #84]	; (8004e68 <TIM_OC1_SetConfig+0xf8>)
 8004e14:	4013      	ands	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <TIM_OC1_SetConfig+0xfc>)
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	621a      	str	r2, [r3, #32]
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b006      	add	sp, #24
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	fffeff8f 	.word	0xfffeff8f
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40014400 	.word	0x40014400
 8004e64:	40014800 	.word	0x40014800
 8004e68:	fffffeff 	.word	0xfffffeff
 8004e6c:	fffffdff 	.word	0xfffffdff

08004e70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	4393      	bics	r3, r2
 8004e82:	001a      	movs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a2c      	ldr	r2, [pc, #176]	; (8004f50 <TIM_OC2_SetConfig+0xe0>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	4a2b      	ldr	r2, [pc, #172]	; (8004f54 <TIM_OC2_SetConfig+0xe4>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	4393      	bics	r3, r2
 8004ebc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <TIM_OC2_SetConfig+0xe8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d10d      	bne.n	8004eee <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2280      	movs	r2, #128	; 0x80
 8004ed6:	4393      	bics	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	011b      	lsls	r3, r3, #4
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2240      	movs	r2, #64	; 0x40
 8004eea:	4393      	bics	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a19      	ldr	r2, [pc, #100]	; (8004f58 <TIM_OC2_SetConfig+0xe8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d007      	beq.n	8004f06 <TIM_OC2_SetConfig+0x96>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	; (8004f5c <TIM_OC2_SetConfig+0xec>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d003      	beq.n	8004f06 <TIM_OC2_SetConfig+0x96>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a17      	ldr	r2, [pc, #92]	; (8004f60 <TIM_OC2_SetConfig+0xf0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d113      	bne.n	8004f2e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	4a16      	ldr	r2, [pc, #88]	; (8004f64 <TIM_OC2_SetConfig+0xf4>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	4a15      	ldr	r2, [pc, #84]	; (8004f68 <TIM_OC2_SetConfig+0xf8>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	46c0      	nop			; (mov r8, r8)
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b006      	add	sp, #24
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	feff8fff 	.word	0xfeff8fff
 8004f54:	fffffcff 	.word	0xfffffcff
 8004f58:	40012c00 	.word	0x40012c00
 8004f5c:	40014400 	.word	0x40014400
 8004f60:	40014800 	.word	0x40014800
 8004f64:	fffffbff 	.word	0xfffffbff
 8004f68:	fffff7ff 	.word	0xfffff7ff

08004f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	4a33      	ldr	r2, [pc, #204]	; (8005048 <TIM_OC3_SetConfig+0xdc>)
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	4a2d      	ldr	r2, [pc, #180]	; (800504c <TIM_OC3_SetConfig+0xe0>)
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_OC3_SetConfig+0xe4>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <TIM_OC3_SetConfig+0xe8>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10d      	bne.n	8004fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4a22      	ldr	r2, [pc, #136]	; (8005058 <TIM_OC3_SetConfig+0xec>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	021b      	lsls	r3, r3, #8
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <TIM_OC3_SetConfig+0xf0>)
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <TIM_OC3_SetConfig+0xe8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d007      	beq.n	8004ffe <TIM_OC3_SetConfig+0x92>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <TIM_OC3_SetConfig+0xf4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x92>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	; (8005064 <TIM_OC3_SetConfig+0xf8>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d113      	bne.n	8005026 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4a19      	ldr	r2, [pc, #100]	; (8005068 <TIM_OC3_SetConfig+0xfc>)
 8005002:	4013      	ands	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	4a18      	ldr	r2, [pc, #96]	; (800506c <TIM_OC3_SetConfig+0x100>)
 800500a:	4013      	ands	r3, r2
 800500c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	4313      	orrs	r3, r2
 8005018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	4313      	orrs	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	621a      	str	r2, [r3, #32]
}
 8005040:	46c0      	nop			; (mov r8, r8)
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bd80      	pop	{r7, pc}
 8005048:	fffffeff 	.word	0xfffffeff
 800504c:	fffeff8f 	.word	0xfffeff8f
 8005050:	fffffdff 	.word	0xfffffdff
 8005054:	40012c00 	.word	0x40012c00
 8005058:	fffff7ff 	.word	0xfffff7ff
 800505c:	fffffbff 	.word	0xfffffbff
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800
 8005068:	ffffefff 	.word	0xffffefff
 800506c:	ffffdfff 	.word	0xffffdfff

08005070 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4a26      	ldr	r2, [pc, #152]	; (8005118 <TIM_OC4_SetConfig+0xa8>)
 8005080:	401a      	ands	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4a20      	ldr	r2, [pc, #128]	; (800511c <TIM_OC4_SetConfig+0xac>)
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a1f      	ldr	r2, [pc, #124]	; (8005120 <TIM_OC4_SetConfig+0xb0>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	021b      	lsls	r3, r3, #8
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <TIM_OC4_SetConfig+0xb4>)
 80050b8:	4013      	ands	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a17      	ldr	r2, [pc, #92]	; (8005128 <TIM_OC4_SetConfig+0xb8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC4_SetConfig+0x70>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <TIM_OC4_SetConfig+0xbc>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC4_SetConfig+0x70>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a15      	ldr	r2, [pc, #84]	; (8005130 <TIM_OC4_SetConfig+0xc0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d109      	bne.n	80050f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	4a14      	ldr	r2, [pc, #80]	; (8005134 <TIM_OC4_SetConfig+0xc4>)
 80050e4:	4013      	ands	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	019b      	lsls	r3, r3, #6
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	46bd      	mov	sp, r7
 8005112:	b006      	add	sp, #24
 8005114:	bd80      	pop	{r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	ffffefff 	.word	0xffffefff
 800511c:	feff8fff 	.word	0xfeff8fff
 8005120:	fffffcff 	.word	0xfffffcff
 8005124:	ffffdfff 	.word	0xffffdfff
 8005128:	40012c00 	.word	0x40012c00
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800
 8005134:	ffffbfff 	.word	0xffffbfff

08005138 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b086      	sub	sp, #24
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a1b      	ldr	r3, [r3, #32]
 8005146:	4a23      	ldr	r2, [pc, #140]	; (80051d4 <TIM_OC5_SetConfig+0x9c>)
 8005148:	401a      	ands	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800515e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <TIM_OC5_SetConfig+0xa0>)
 8005164:	4013      	ands	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4a19      	ldr	r2, [pc, #100]	; (80051dc <TIM_OC5_SetConfig+0xa4>)
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <TIM_OC5_SetConfig+0xa8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d007      	beq.n	800519e <TIM_OC5_SetConfig+0x66>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <TIM_OC5_SetConfig+0xac>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d003      	beq.n	800519e <TIM_OC5_SetConfig+0x66>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <TIM_OC5_SetConfig+0xb0>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d109      	bne.n	80051b2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <TIM_OC5_SetConfig+0x9c>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	021b      	lsls	r3, r3, #8
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	46c0      	nop			; (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	b006      	add	sp, #24
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	fffeffff 	.word	0xfffeffff
 80051d8:	fffeff8f 	.word	0xfffeff8f
 80051dc:	fffdffff 	.word	0xfffdffff
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40014400 	.word	0x40014400
 80051e8:	40014800 	.word	0x40014800

080051ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	4a24      	ldr	r2, [pc, #144]	; (800528c <TIM_OC6_SetConfig+0xa0>)
 80051fc:	401a      	ands	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <TIM_OC6_SetConfig+0xa4>)
 8005218:	4013      	ands	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4313      	orrs	r3, r2
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <TIM_OC6_SetConfig+0xa8>)
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	051b      	lsls	r3, r3, #20
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <TIM_OC6_SetConfig+0xac>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d007      	beq.n	8005254 <TIM_OC6_SetConfig+0x68>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	; (800529c <TIM_OC6_SetConfig+0xb0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d003      	beq.n	8005254 <TIM_OC6_SetConfig+0x68>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a14      	ldr	r2, [pc, #80]	; (80052a0 <TIM_OC6_SetConfig+0xb4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d109      	bne.n	8005268 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	4a13      	ldr	r2, [pc, #76]	; (80052a4 <TIM_OC6_SetConfig+0xb8>)
 8005258:	4013      	ands	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	029b      	lsls	r3, r3, #10
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	4313      	orrs	r3, r2
 8005266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	621a      	str	r2, [r3, #32]
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	46bd      	mov	sp, r7
 8005286:	b006      	add	sp, #24
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	ffefffff 	.word	0xffefffff
 8005290:	feff8fff 	.word	0xfeff8fff
 8005294:	ffdfffff 	.word	0xffdfffff
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800
 80052a4:	fffbffff 	.word	0xfffbffff

080052a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b086      	sub	sp, #24
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	2201      	movs	r2, #1
 80052c0:	4393      	bics	r3, r2
 80052c2:	001a      	movs	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	22f0      	movs	r2, #240	; 0xf0
 80052d2:	4393      	bics	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	220a      	movs	r2, #10
 80052e4:	4393      	bics	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	621a      	str	r2, [r3, #32]
}
 80052fc:	46c0      	nop			; (mov r8, r8)
 80052fe:	46bd      	mov	sp, r7
 8005300:	b006      	add	sp, #24
 8005302:	bd80      	pop	{r7, pc}

08005304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	2210      	movs	r2, #16
 8005316:	4393      	bics	r3, r2
 8005318:	001a      	movs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <TIM_TI2_ConfigInputStage+0x60>)
 800532e:	4013      	ands	r3, r2
 8005330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	031b      	lsls	r3, r3, #12
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4313      	orrs	r3, r2
 800533a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	22a0      	movs	r2, #160	; 0xa0
 8005340:	4393      	bics	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	621a      	str	r2, [r3, #32]
}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	46bd      	mov	sp, r7
 800535e:	b006      	add	sp, #24
 8005360:	bd80      	pop	{r7, pc}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	ffff0fff 	.word	0xffff0fff

08005368 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a08      	ldr	r2, [pc, #32]	; (800539c <TIM_ITRx_SetConfig+0x34>)
 800537c:	4013      	ands	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	2207      	movs	r2, #7
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	609a      	str	r2, [r3, #8]
}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	46bd      	mov	sp, r7
 8005396:	b004      	add	sp, #16
 8005398:	bd80      	pop	{r7, pc}
 800539a:	46c0      	nop			; (mov r8, r8)
 800539c:	ffcfff8f 	.word	0xffcfff8f

080053a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4a09      	ldr	r2, [pc, #36]	; (80053dc <TIM_ETR_SetConfig+0x3c>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	021a      	lsls	r2, r3, #8
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	431a      	orrs	r2, r3
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	46c0      	nop			; (mov r8, r8)
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b006      	add	sp, #24
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	ffff00ff 	.word	0xffff00ff

080053e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	221f      	movs	r2, #31
 80053f0:	4013      	ands	r3, r2
 80053f2:	2201      	movs	r2, #1
 80053f4:	409a      	lsls	r2, r3
 80053f6:	0013      	movs	r3, r2
 80053f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	43d2      	mvns	r2, r2
 8005402:	401a      	ands	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6a1a      	ldr	r2, [r3, #32]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	211f      	movs	r1, #31
 8005410:	400b      	ands	r3, r1
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	4099      	lsls	r1, r3
 8005416:	000b      	movs	r3, r1
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	621a      	str	r2, [r3, #32]
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b006      	add	sp, #24
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	223c      	movs	r2, #60	; 0x3c
 8005436:	5c9b      	ldrb	r3, [r3, r2]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800543c:	2302      	movs	r3, #2
 800543e:	e050      	b.n	80054e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	223c      	movs	r2, #60	; 0x3c
 8005444:	2101      	movs	r1, #1
 8005446:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	223d      	movs	r2, #61	; 0x3d
 800544c:	2102      	movs	r1, #2
 800544e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a21      	ldr	r2, [pc, #132]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	4a20      	ldr	r2, [pc, #128]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800546e:	4013      	ands	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2270      	movs	r2, #112	; 0x70
 8005480:	4393      	bics	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00a      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	2380      	movs	r3, #128	; 0x80
 80054a6:	05db      	lsls	r3, r3, #23
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d004      	beq.n	80054b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a10      	ldr	r2, [pc, #64]	; (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d10c      	bne.n	80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2280      	movs	r2, #128	; 0x80
 80054ba:	4393      	bics	r3, r2
 80054bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	223d      	movs	r2, #61	; 0x3d
 80054d4:	2101      	movs	r1, #1
 80054d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	223c      	movs	r2, #60	; 0x3c
 80054dc:	2100      	movs	r1, #0
 80054de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b004      	add	sp, #16
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	ff0fffff 	.word	0xff0fffff
 80054f4:	40000400 	.word	0x40000400

080054f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005500:	46c0      	nop			; (mov r8, r8)
 8005502:	46bd      	mov	sp, r7
 8005504:	b002      	add	sp, #8
 8005506:	bd80      	pop	{r7, pc}

08005508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005510:	46c0      	nop			; (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	b002      	add	sp, #8
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e046      	b.n	80055c8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2284      	movs	r2, #132	; 0x84
 800553e:	589b      	ldr	r3, [r3, r2]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d107      	bne.n	8005554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2280      	movs	r2, #128	; 0x80
 8005548:	2100      	movs	r1, #0
 800554a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	0018      	movs	r0, r3
 8005550:	f7fc f908 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2284      	movs	r2, #132	; 0x84
 8005558:	2124      	movs	r1, #36	; 0x24
 800555a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	438a      	bics	r2, r1
 800556a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	0018      	movs	r0, r3
 8005570:	f000 fb70 	bl	8005c54 <UART_SetConfig>
 8005574:	0003      	movs	r3, r0
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e024      	b.n	80055c8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	0018      	movs	r0, r3
 800558a:	f000 fdf9 	bl	8006180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	490d      	ldr	r1, [pc, #52]	; (80055d0 <HAL_UART_Init+0xa8>)
 800559a:	400a      	ands	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	212a      	movs	r1, #42	; 0x2a
 80055aa:	438a      	bics	r2, r1
 80055ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	0018      	movs	r0, r3
 80055c2:	f000 fe91 	bl	80062e8 <UART_CheckIdleState>
 80055c6:	0003      	movs	r3, r0
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b002      	add	sp, #8
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	ffffb7ff 	.word	0xffffb7ff

080055d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08a      	sub	sp, #40	; 0x28
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	603b      	str	r3, [r7, #0]
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2284      	movs	r2, #132	; 0x84
 80055e8:	589b      	ldr	r3, [r3, r2]
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d000      	beq.n	80055f0 <HAL_UART_Transmit+0x1c>
 80055ee:	e097      	b.n	8005720 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_UART_Transmit+0x2a>
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e08f      	b.n	8005722 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	2380      	movs	r3, #128	; 0x80
 8005608:	015b      	lsls	r3, r3, #5
 800560a:	429a      	cmp	r2, r3
 800560c:	d109      	bne.n	8005622 <HAL_UART_Transmit+0x4e>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d105      	bne.n	8005622 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2201      	movs	r2, #1
 800561a:	4013      	ands	r3, r2
 800561c:	d001      	beq.n	8005622 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e07f      	b.n	8005722 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	5c9b      	ldrb	r3, [r3, r2]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d101      	bne.n	8005630 <HAL_UART_Transmit+0x5c>
 800562c:	2302      	movs	r3, #2
 800562e:	e078      	b.n	8005722 <HAL_UART_Transmit+0x14e>
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	2101      	movs	r1, #1
 8005636:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	228c      	movs	r2, #140	; 0x8c
 800563c:	2100      	movs	r1, #0
 800563e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2284      	movs	r2, #132	; 0x84
 8005644:	2121      	movs	r1, #33	; 0x21
 8005646:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005648:	f7fc f986 	bl	8001958 <HAL_GetTick>
 800564c:	0003      	movs	r3, r0
 800564e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	1dba      	adds	r2, r7, #6
 8005654:	2154      	movs	r1, #84	; 0x54
 8005656:	8812      	ldrh	r2, [r2, #0]
 8005658:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	1dba      	adds	r2, r7, #6
 800565e:	2156      	movs	r1, #86	; 0x56
 8005660:	8812      	ldrh	r2, [r2, #0]
 8005662:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	015b      	lsls	r3, r3, #5
 800566c:	429a      	cmp	r2, r3
 800566e:	d108      	bne.n	8005682 <HAL_UART_Transmit+0xae>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e003      	b.n	800568a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005686:	2300      	movs	r3, #0
 8005688:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2280      	movs	r2, #128	; 0x80
 800568e:	2100      	movs	r1, #0
 8005690:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005692:	e02c      	b.n	80056ee <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	0013      	movs	r3, r2
 800569e:	2200      	movs	r2, #0
 80056a0:	2180      	movs	r1, #128	; 0x80
 80056a2:	f000 fe6b 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 80056a6:	1e03      	subs	r3, r0, #0
 80056a8:	d001      	beq.n	80056ae <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e039      	b.n	8005722 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	001a      	movs	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	05d2      	lsls	r2, r2, #23
 80056c0:	0dd2      	lsrs	r2, r2, #23
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	3302      	adds	r3, #2
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	e007      	b.n	80056dc <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	781a      	ldrb	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	3301      	adds	r3, #1
 80056da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2256      	movs	r2, #86	; 0x56
 80056e0:	5a9b      	ldrh	r3, [r3, r2]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b299      	uxth	r1, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2256      	movs	r2, #86	; 0x56
 80056ec:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2256      	movs	r2, #86	; 0x56
 80056f2:	5a9b      	ldrh	r3, [r3, r2]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1cc      	bne.n	8005694 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	0013      	movs	r3, r2
 8005704:	2200      	movs	r2, #0
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	f000 fe38 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 800570c:	1e03      	subs	r3, r0, #0
 800570e:	d001      	beq.n	8005714 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e006      	b.n	8005722 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2284      	movs	r2, #132	; 0x84
 8005718:	2120      	movs	r1, #32
 800571a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800571c:	2300      	movs	r3, #0
 800571e:	e000      	b.n	8005722 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8005720:	2302      	movs	r3, #2
  }
}
 8005722:	0018      	movs	r0, r3
 8005724:	46bd      	mov	sp, r7
 8005726:	b008      	add	sp, #32
 8005728:	bd80      	pop	{r7, pc}

0800572a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b084      	sub	sp, #16
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	1dbb      	adds	r3, r7, #6
 8005736:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2288      	movs	r2, #136	; 0x88
 800573c:	589b      	ldr	r3, [r3, r2]
 800573e:	2b20      	cmp	r3, #32
 8005740:	d12f      	bne.n	80057a2 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_UART_Receive_IT+0x26>
 8005748:	1dbb      	adds	r3, r7, #6
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e027      	b.n	80057a4 <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	015b      	lsls	r3, r3, #5
 800575c:	429a      	cmp	r2, r3
 800575e:	d109      	bne.n	8005774 <HAL_UART_Receive_IT+0x4a>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	d001      	beq.n	8005774 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e017      	b.n	80057a4 <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2280      	movs	r2, #128	; 0x80
 8005778:	5c9b      	ldrb	r3, [r3, r2]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_UART_Receive_IT+0x58>
 800577e:	2302      	movs	r3, #2
 8005780:	e010      	b.n	80057a4 <HAL_UART_Receive_IT+0x7a>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2280      	movs	r2, #128	; 0x80
 8005786:	2101      	movs	r1, #1
 8005788:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005790:	1dbb      	adds	r3, r7, #6
 8005792:	881a      	ldrh	r2, [r3, #0]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	0018      	movs	r0, r3
 800579a:	f000 fe71 	bl	8006480 <UART_Start_Receive_IT>
 800579e:	0003      	movs	r3, r0
 80057a0:	e000      	b.n	80057a4 <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 80057a2:	2302      	movs	r3, #2
  }
}
 80057a4:	0018      	movs	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	b004      	add	sp, #16
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	4abb      	ldr	r2, [pc, #748]	; (8005abc <HAL_UART_IRQHandler+0x310>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d117      	bne.n	800580a <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	2220      	movs	r2, #32
 80057de:	4013      	ands	r3, r2
 80057e0:	d013      	beq.n	800580a <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	2220      	movs	r2, #32
 80057e6:	4013      	ands	r3, r2
 80057e8:	d104      	bne.n	80057f4 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	2380      	movs	r3, #128	; 0x80
 80057ee:	055b      	lsls	r3, r3, #21
 80057f0:	4013      	ands	r3, r2
 80057f2:	d00a      	beq.n	800580a <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d100      	bne.n	80057fe <HAL_UART_IRQHandler+0x52>
 80057fc:	e1fd      	b.n	8005bfa <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	0010      	movs	r0, r2
 8005806:	4798      	blx	r3
      }
      return;
 8005808:	e1f7      	b.n	8005bfa <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d100      	bne.n	8005812 <HAL_UART_IRQHandler+0x66>
 8005810:	e0de      	b.n	80059d0 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4aaa      	ldr	r2, [pc, #680]	; (8005ac0 <HAL_UART_IRQHandler+0x314>)
 8005816:	4013      	ands	r3, r2
 8005818:	d104      	bne.n	8005824 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4aa9      	ldr	r2, [pc, #676]	; (8005ac4 <HAL_UART_IRQHandler+0x318>)
 800581e:	4013      	ands	r3, r2
 8005820:	d100      	bne.n	8005824 <HAL_UART_IRQHandler+0x78>
 8005822:	e0d5      	b.n	80059d0 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2201      	movs	r2, #1
 8005828:	4013      	ands	r3, r2
 800582a:	d010      	beq.n	800584e <HAL_UART_IRQHandler+0xa2>
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	2380      	movs	r3, #128	; 0x80
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	4013      	ands	r3, r2
 8005834:	d00b      	beq.n	800584e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2201      	movs	r2, #1
 800583c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	228c      	movs	r2, #140	; 0x8c
 8005842:	589b      	ldr	r3, [r3, r2]
 8005844:	2201      	movs	r2, #1
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	218c      	movs	r1, #140	; 0x8c
 800584c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	2202      	movs	r2, #2
 8005852:	4013      	ands	r3, r2
 8005854:	d00f      	beq.n	8005876 <HAL_UART_IRQHandler+0xca>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2201      	movs	r2, #1
 800585a:	4013      	ands	r3, r2
 800585c:	d00b      	beq.n	8005876 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2202      	movs	r2, #2
 8005864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	228c      	movs	r2, #140	; 0x8c
 800586a:	589b      	ldr	r3, [r3, r2]
 800586c:	2204      	movs	r2, #4
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	218c      	movs	r1, #140	; 0x8c
 8005874:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2204      	movs	r2, #4
 800587a:	4013      	ands	r3, r2
 800587c:	d00f      	beq.n	800589e <HAL_UART_IRQHandler+0xf2>
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2201      	movs	r2, #1
 8005882:	4013      	ands	r3, r2
 8005884:	d00b      	beq.n	800589e <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2204      	movs	r2, #4
 800588c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	228c      	movs	r2, #140	; 0x8c
 8005892:	589b      	ldr	r3, [r3, r2]
 8005894:	2202      	movs	r2, #2
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	218c      	movs	r1, #140	; 0x8c
 800589c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	2208      	movs	r2, #8
 80058a2:	4013      	ands	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	2220      	movs	r2, #32
 80058aa:	4013      	ands	r3, r2
 80058ac:	d103      	bne.n	80058b6 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	4a83      	ldr	r2, [pc, #524]	; (8005ac0 <HAL_UART_IRQHandler+0x314>)
 80058b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058b4:	d00b      	beq.n	80058ce <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2208      	movs	r2, #8
 80058bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	228c      	movs	r2, #140	; 0x8c
 80058c2:	589b      	ldr	r3, [r3, r2]
 80058c4:	2208      	movs	r2, #8
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	218c      	movs	r1, #140	; 0x8c
 80058cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	4013      	ands	r3, r2
 80058d6:	d011      	beq.n	80058fc <HAL_UART_IRQHandler+0x150>
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	2380      	movs	r3, #128	; 0x80
 80058dc:	04db      	lsls	r3, r3, #19
 80058de:	4013      	ands	r3, r2
 80058e0:	d00c      	beq.n	80058fc <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2280      	movs	r2, #128	; 0x80
 80058e8:	0112      	lsls	r2, r2, #4
 80058ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	228c      	movs	r2, #140	; 0x8c
 80058f0:	589b      	ldr	r3, [r3, r2]
 80058f2:	2220      	movs	r2, #32
 80058f4:	431a      	orrs	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	218c      	movs	r1, #140	; 0x8c
 80058fa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	228c      	movs	r2, #140	; 0x8c
 8005900:	589b      	ldr	r3, [r3, r2]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d100      	bne.n	8005908 <HAL_UART_IRQHandler+0x15c>
 8005906:	e17a      	b.n	8005bfe <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	2220      	movs	r2, #32
 800590c:	4013      	ands	r3, r2
 800590e:	d011      	beq.n	8005934 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2220      	movs	r2, #32
 8005914:	4013      	ands	r3, r2
 8005916:	d104      	bne.n	8005922 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	2380      	movs	r3, #128	; 0x80
 800591c:	055b      	lsls	r3, r3, #21
 800591e:	4013      	ands	r3, r2
 8005920:	d008      	beq.n	8005934 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	2b00      	cmp	r3, #0
 8005928:	d004      	beq.n	8005934 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	0010      	movs	r0, r2
 8005932:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	228c      	movs	r2, #140	; 0x8c
 8005938:	589b      	ldr	r3, [r3, r2]
 800593a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	2240      	movs	r2, #64	; 0x40
 8005944:	4013      	ands	r3, r2
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d003      	beq.n	8005952 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2228      	movs	r2, #40	; 0x28
 800594e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005950:	d033      	beq.n	80059ba <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	0018      	movs	r0, r3
 8005956:	f000 fe5b 	bl	8006610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2240      	movs	r2, #64	; 0x40
 8005962:	4013      	ands	r3, r2
 8005964:	2b40      	cmp	r3, #64	; 0x40
 8005966:	d123      	bne.n	80059b0 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2140      	movs	r1, #64	; 0x40
 8005974:	438a      	bics	r2, r1
 8005976:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005984:	4a50      	ldr	r2, [pc, #320]	; (8005ac8 <HAL_UART_IRQHandler+0x31c>)
 8005986:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800598c:	0018      	movs	r0, r3
 800598e:	f7fc fff9 	bl	8002984 <HAL_DMA_Abort_IT>
 8005992:	1e03      	subs	r3, r0, #0
 8005994:	d01a      	beq.n	80059cc <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800599a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a0:	0018      	movs	r0, r3
 80059a2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	e012      	b.n	80059cc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	0018      	movs	r0, r3
 80059aa:	f000 f93f 	bl	8005c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059ae:	e00d      	b.n	80059cc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	0018      	movs	r0, r3
 80059b4:	f000 f93a 	bl	8005c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b8:	e008      	b.n	80059cc <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	0018      	movs	r0, r3
 80059be:	f000 f935 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	228c      	movs	r2, #140	; 0x8c
 80059c6:	2100      	movs	r1, #0
 80059c8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80059ca:	e118      	b.n	8005bfe <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059cc:	46c0      	nop			; (mov r8, r8)
    return;
 80059ce:	e116      	b.n	8005bfe <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d000      	beq.n	80059da <HAL_UART_IRQHandler+0x22e>
 80059d8:	e0bb      	b.n	8005b52 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	2210      	movs	r2, #16
 80059de:	4013      	ands	r3, r2
 80059e0:	d100      	bne.n	80059e4 <HAL_UART_IRQHandler+0x238>
 80059e2:	e0b6      	b.n	8005b52 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2210      	movs	r2, #16
 80059e8:	4013      	ands	r3, r2
 80059ea:	d100      	bne.n	80059ee <HAL_UART_IRQHandler+0x242>
 80059ec:	e0b1      	b.n	8005b52 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2210      	movs	r2, #16
 80059f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2240      	movs	r2, #64	; 0x40
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d165      	bne.n	8005ad0 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	2108      	movs	r1, #8
 8005a0e:	187b      	adds	r3, r7, r1
 8005a10:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d100      	bne.n	8005a1c <HAL_UART_IRQHandler+0x270>
 8005a1a:	e0f2      	b.n	8005c02 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	225c      	movs	r2, #92	; 0x5c
 8005a20:	5a9b      	ldrh	r3, [r3, r2]
 8005a22:	187a      	adds	r2, r7, r1
 8005a24:	8812      	ldrh	r2, [r2, #0]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d300      	bcc.n	8005a2c <HAL_UART_IRQHandler+0x280>
 8005a2a:	e0ea      	b.n	8005c02 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	187a      	adds	r2, r7, r1
 8005a30:	215e      	movs	r1, #94	; 0x5e
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	4013      	ands	r3, r2
 8005a42:	d12b      	bne.n	8005a9c <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	491f      	ldr	r1, [pc, #124]	; (8005acc <HAL_UART_IRQHandler+0x320>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2101      	movs	r1, #1
 8005a60:	438a      	bics	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2140      	movs	r1, #64	; 0x40
 8005a70:	438a      	bics	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2288      	movs	r2, #136	; 0x88
 8005a78:	2120      	movs	r1, #32
 8005a7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2110      	movs	r1, #16
 8005a8e:	438a      	bics	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7fc ff12 	bl	80028c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	225c      	movs	r2, #92	; 0x5c
 8005aa0:	5a9a      	ldrh	r2, [r3, r2]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	215e      	movs	r1, #94	; 0x5e
 8005aa6:	5a5b      	ldrh	r3, [r3, r1]
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f8c2 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005ab8:	e0a3      	b.n	8005c02 <HAL_UART_IRQHandler+0x456>
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	0000080f 	.word	0x0000080f
 8005ac0:	10000001 	.word	0x10000001
 8005ac4:	04000120 	.word	0x04000120
 8005ac8:	08006675 	.word	0x08006675
 8005acc:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	225c      	movs	r2, #92	; 0x5c
 8005ad4:	5a99      	ldrh	r1, [r3, r2]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	225e      	movs	r2, #94	; 0x5e
 8005ada:	5a9b      	ldrh	r3, [r3, r2]
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	200a      	movs	r0, #10
 8005ae0:	183b      	adds	r3, r7, r0
 8005ae2:	1a8a      	subs	r2, r1, r2
 8005ae4:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	225e      	movs	r2, #94	; 0x5e
 8005aea:	5a9b      	ldrh	r3, [r3, r2]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d100      	bne.n	8005af4 <HAL_UART_IRQHandler+0x348>
 8005af2:	e088      	b.n	8005c06 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8005af4:	183b      	adds	r3, r7, r0
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d100      	bne.n	8005afe <HAL_UART_IRQHandler+0x352>
 8005afc:	e083      	b.n	8005c06 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4942      	ldr	r1, [pc, #264]	; (8005c14 <HAL_UART_IRQHandler+0x468>)
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	493f      	ldr	r1, [pc, #252]	; (8005c18 <HAL_UART_IRQHandler+0x46c>)
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2288      	movs	r2, #136	; 0x88
 8005b22:	2120      	movs	r1, #32
 8005b24:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2110      	movs	r1, #16
 8005b3e:	438a      	bics	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b42:	183b      	adds	r3, r7, r0
 8005b44:	881a      	ldrh	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0011      	movs	r1, r2
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	f000 f876 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005b50:	e059      	b.n	8005c06 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b52:	69fa      	ldr	r2, [r7, #28]
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	035b      	lsls	r3, r3, #13
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_IRQHandler+0x3ce>
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	2380      	movs	r3, #128	; 0x80
 8005b60:	03db      	lsls	r3, r3, #15
 8005b62:	4013      	ands	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2280      	movs	r2, #128	; 0x80
 8005b6c:	0352      	lsls	r2, r2, #13
 8005b6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	0018      	movs	r0, r3
 8005b74:	f001 f8c0 	bl	8006cf8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b78:	e048      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2280      	movs	r2, #128	; 0x80
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d012      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2280      	movs	r2, #128	; 0x80
 8005b86:	4013      	ands	r3, r2
 8005b88:	d104      	bne.n	8005b94 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	2380      	movs	r3, #128	; 0x80
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	4013      	ands	r3, r2
 8005b92:	d009      	beq.n	8005ba8 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d036      	beq.n	8005c0a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	0010      	movs	r0, r2
 8005ba4:	4798      	blx	r3
    }
    return;
 8005ba6:	e030      	b.n	8005c0a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	2240      	movs	r2, #64	; 0x40
 8005bac:	4013      	ands	r3, r2
 8005bae:	d008      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x416>
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2240      	movs	r2, #64	; 0x40
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d004      	beq.n	8005bc2 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 fd71 	bl	80066a2 <UART_EndTransmit_IT>
    return;
 8005bc0:	e024      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	041b      	lsls	r3, r3, #16
 8005bc8:	4013      	ands	r3, r2
 8005bca:	d009      	beq.n	8005be0 <HAL_UART_IRQHandler+0x434>
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	2380      	movs	r3, #128	; 0x80
 8005bd0:	05db      	lsls	r3, r3, #23
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	d004      	beq.n	8005be0 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f001 f89d 	bl	8006d18 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bde:	e015      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	045b      	lsls	r3, r3, #17
 8005be6:	4013      	ands	r3, r2
 8005be8:	d010      	beq.n	8005c0c <HAL_UART_IRQHandler+0x460>
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	da0d      	bge.n	8005c0c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0018      	movs	r0, r3
 8005bf4:	f001 f888 	bl	8006d08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf8:	e008      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
      return;
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	e006      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
    return;
 8005bfe:	46c0      	nop			; (mov r8, r8)
 8005c00:	e004      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
      return;
 8005c02:	46c0      	nop			; (mov r8, r8)
 8005c04:	e002      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
      return;
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	e000      	b.n	8005c0c <HAL_UART_IRQHandler+0x460>
    return;
 8005c0a:	46c0      	nop			; (mov r8, r8)
  }
}
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b008      	add	sp, #32
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	fffffedf 	.word	0xfffffedf
 8005c18:	effffffe 	.word	0xeffffffe

08005c1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c24:	46c0      	nop			; (mov r8, r8)
 8005c26:	46bd      	mov	sp, r7
 8005c28:	b002      	add	sp, #8
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b002      	add	sp, #8
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	000a      	movs	r2, r1
 8005c46:	1cbb      	adds	r3, r7, #2
 8005c48:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b5b0      	push	{r4, r5, r7, lr}
 8005c56:	b090      	sub	sp, #64	; 0x40
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c5c:	231a      	movs	r3, #26
 8005c5e:	2220      	movs	r2, #32
 8005c60:	4694      	mov	ip, r2
 8005c62:	44bc      	add	ip, r7
 8005c64:	4463      	add	r3, ip
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	431a      	orrs	r2, r3
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4ac8      	ldr	r2, [pc, #800]	; (8005fb4 <UART_SetConfig+0x360>)
 8005c94:	4013      	ands	r3, r2
 8005c96:	0019      	movs	r1, r3
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	4ac3      	ldr	r2, [pc, #780]	; (8005fb8 <UART_SetConfig+0x364>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	0018      	movs	r0, r3
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	68d9      	ldr	r1, [r3, #12]
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4abd      	ldr	r2, [pc, #756]	; (8005fbc <UART_SetConfig+0x368>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d004      	beq.n	8005cd6 <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4ab8      	ldr	r2, [pc, #736]	; (8005fc0 <UART_SetConfig+0x36c>)
 8005cde:	4013      	ands	r3, r2
 8005ce0:	0019      	movs	r1, r3
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce8:	430b      	orrs	r3, r1
 8005cea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf2:	220f      	movs	r2, #15
 8005cf4:	4393      	bics	r3, r2
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	0003      	movs	r3, r0
 8005d02:	430b      	orrs	r3, r1
 8005d04:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4aae      	ldr	r2, [pc, #696]	; (8005fc4 <UART_SetConfig+0x370>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d136      	bne.n	8005d7e <UART_SetConfig+0x12a>
 8005d10:	4bad      	ldr	r3, [pc, #692]	; (8005fc8 <UART_SetConfig+0x374>)
 8005d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d14:	2203      	movs	r2, #3
 8005d16:	4013      	ands	r3, r2
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d020      	beq.n	8005d5e <UART_SetConfig+0x10a>
 8005d1c:	d827      	bhi.n	8005d6e <UART_SetConfig+0x11a>
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d00d      	beq.n	8005d3e <UART_SetConfig+0xea>
 8005d22:	d824      	bhi.n	8005d6e <UART_SetConfig+0x11a>
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <UART_SetConfig+0xda>
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d010      	beq.n	8005d4e <UART_SetConfig+0xfa>
 8005d2c:	e01f      	b.n	8005d6e <UART_SetConfig+0x11a>
 8005d2e:	231b      	movs	r3, #27
 8005d30:	2220      	movs	r2, #32
 8005d32:	4694      	mov	ip, r2
 8005d34:	44bc      	add	ip, r7
 8005d36:	4463      	add	r3, ip
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	e07c      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d3e:	231b      	movs	r3, #27
 8005d40:	2220      	movs	r2, #32
 8005d42:	4694      	mov	ip, r2
 8005d44:	44bc      	add	ip, r7
 8005d46:	4463      	add	r3, ip
 8005d48:	2202      	movs	r2, #2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	e074      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d4e:	231b      	movs	r3, #27
 8005d50:	2220      	movs	r2, #32
 8005d52:	4694      	mov	ip, r2
 8005d54:	44bc      	add	ip, r7
 8005d56:	4463      	add	r3, ip
 8005d58:	2204      	movs	r2, #4
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	e06c      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d5e:	231b      	movs	r3, #27
 8005d60:	2220      	movs	r2, #32
 8005d62:	4694      	mov	ip, r2
 8005d64:	44bc      	add	ip, r7
 8005d66:	4463      	add	r3, ip
 8005d68:	2208      	movs	r2, #8
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	e064      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d6e:	231b      	movs	r3, #27
 8005d70:	2220      	movs	r2, #32
 8005d72:	4694      	mov	ip, r2
 8005d74:	44bc      	add	ip, r7
 8005d76:	4463      	add	r3, ip
 8005d78:	2210      	movs	r2, #16
 8005d7a:	701a      	strb	r2, [r3, #0]
 8005d7c:	e05c      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a92      	ldr	r2, [pc, #584]	; (8005fcc <UART_SetConfig+0x378>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d107      	bne.n	8005d98 <UART_SetConfig+0x144>
 8005d88:	231b      	movs	r3, #27
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	4694      	mov	ip, r2
 8005d8e:	44bc      	add	ip, r7
 8005d90:	4463      	add	r3, ip
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e04f      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a87      	ldr	r2, [pc, #540]	; (8005fbc <UART_SetConfig+0x368>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d143      	bne.n	8005e2a <UART_SetConfig+0x1d6>
 8005da2:	4b89      	ldr	r3, [pc, #548]	; (8005fc8 <UART_SetConfig+0x374>)
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	23c0      	movs	r3, #192	; 0xc0
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	4013      	ands	r3, r2
 8005dac:	22c0      	movs	r2, #192	; 0xc0
 8005dae:	0112      	lsls	r2, r2, #4
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d02a      	beq.n	8005e0a <UART_SetConfig+0x1b6>
 8005db4:	22c0      	movs	r2, #192	; 0xc0
 8005db6:	0112      	lsls	r2, r2, #4
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d82e      	bhi.n	8005e1a <UART_SetConfig+0x1c6>
 8005dbc:	2280      	movs	r2, #128	; 0x80
 8005dbe:	0112      	lsls	r2, r2, #4
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d012      	beq.n	8005dea <UART_SetConfig+0x196>
 8005dc4:	2280      	movs	r2, #128	; 0x80
 8005dc6:	0112      	lsls	r2, r2, #4
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d826      	bhi.n	8005e1a <UART_SetConfig+0x1c6>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d004      	beq.n	8005dda <UART_SetConfig+0x186>
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	00d2      	lsls	r2, r2, #3
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d010      	beq.n	8005dfa <UART_SetConfig+0x1a6>
 8005dd8:	e01f      	b.n	8005e1a <UART_SetConfig+0x1c6>
 8005dda:	231b      	movs	r3, #27
 8005ddc:	2220      	movs	r2, #32
 8005dde:	4694      	mov	ip, r2
 8005de0:	44bc      	add	ip, r7
 8005de2:	4463      	add	r3, ip
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e026      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005dea:	231b      	movs	r3, #27
 8005dec:	2220      	movs	r2, #32
 8005dee:	4694      	mov	ip, r2
 8005df0:	44bc      	add	ip, r7
 8005df2:	4463      	add	r3, ip
 8005df4:	2202      	movs	r2, #2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e01e      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005dfa:	231b      	movs	r3, #27
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	4694      	mov	ip, r2
 8005e00:	44bc      	add	ip, r7
 8005e02:	4463      	add	r3, ip
 8005e04:	2204      	movs	r2, #4
 8005e06:	701a      	strb	r2, [r3, #0]
 8005e08:	e016      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005e0a:	231b      	movs	r3, #27
 8005e0c:	2220      	movs	r2, #32
 8005e0e:	4694      	mov	ip, r2
 8005e10:	44bc      	add	ip, r7
 8005e12:	4463      	add	r3, ip
 8005e14:	2208      	movs	r2, #8
 8005e16:	701a      	strb	r2, [r3, #0]
 8005e18:	e00e      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005e1a:	231b      	movs	r3, #27
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	4694      	mov	ip, r2
 8005e20:	44bc      	add	ip, r7
 8005e22:	4463      	add	r3, ip
 8005e24:	2210      	movs	r2, #16
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e006      	b.n	8005e38 <UART_SetConfig+0x1e4>
 8005e2a:	231b      	movs	r3, #27
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	4694      	mov	ip, r2
 8005e30:	44bc      	add	ip, r7
 8005e32:	4463      	add	r3, ip
 8005e34:	2210      	movs	r2, #16
 8005e36:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5f      	ldr	r2, [pc, #380]	; (8005fbc <UART_SetConfig+0x368>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d000      	beq.n	8005e44 <UART_SetConfig+0x1f0>
 8005e42:	e096      	b.n	8005f72 <UART_SetConfig+0x31e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e44:	231b      	movs	r3, #27
 8005e46:	2220      	movs	r2, #32
 8005e48:	4694      	mov	ip, r2
 8005e4a:	44bc      	add	ip, r7
 8005e4c:	4463      	add	r3, ip
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d015      	beq.n	8005e80 <UART_SetConfig+0x22c>
 8005e54:	dc18      	bgt.n	8005e88 <UART_SetConfig+0x234>
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00d      	beq.n	8005e76 <UART_SetConfig+0x222>
 8005e5a:	dc15      	bgt.n	8005e88 <UART_SetConfig+0x234>
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <UART_SetConfig+0x212>
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d005      	beq.n	8005e70 <UART_SetConfig+0x21c>
 8005e64:	e010      	b.n	8005e88 <UART_SetConfig+0x234>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e66:	f7fd fdbb 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8005e6a:	0003      	movs	r3, r0
 8005e6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e6e:	e015      	b.n	8005e9c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e70:	4b57      	ldr	r3, [pc, #348]	; (8005fd0 <UART_SetConfig+0x37c>)
 8005e72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e74:	e012      	b.n	8005e9c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e76:	f7fd fd27 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8005e7a:	0003      	movs	r3, r0
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e7e:	e00d      	b.n	8005e9c <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e80:	2380      	movs	r3, #128	; 0x80
 8005e82:	021b      	lsls	r3, r3, #8
 8005e84:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e86:	e009      	b.n	8005e9c <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e8c:	231a      	movs	r3, #26
 8005e8e:	2220      	movs	r2, #32
 8005e90:	4694      	mov	ip, r2
 8005e92:	44bc      	add	ip, r7
 8005e94:	4463      	add	r3, ip
 8005e96:	2201      	movs	r2, #1
 8005e98:	701a      	strb	r2, [r3, #0]
        break;
 8005e9a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d100      	bne.n	8005ea4 <UART_SetConfig+0x250>
 8005ea2:	e150      	b.n	8006146 <UART_SetConfig+0x4f2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea8:	4b4a      	ldr	r3, [pc, #296]	; (8005fd4 <UART_SetConfig+0x380>)
 8005eaa:	0052      	lsls	r2, r2, #1
 8005eac:	5ad3      	ldrh	r3, [r2, r3]
 8005eae:	0019      	movs	r1, r3
 8005eb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005eb2:	f7fa f927 	bl	8000104 <__udivsi3>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	0013      	movs	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	189b      	adds	r3, r3, r2
 8005ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d305      	bcc.n	8005ed6 <UART_SetConfig+0x282>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d907      	bls.n	8005ee6 <UART_SetConfig+0x292>
      {
        ret = HAL_ERROR;
 8005ed6:	231a      	movs	r3, #26
 8005ed8:	2220      	movs	r2, #32
 8005eda:	4694      	mov	ip, r2
 8005edc:	44bc      	add	ip, r7
 8005ede:	4463      	add	r3, ip
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	701a      	strb	r2, [r3, #0]
 8005ee4:	e12f      	b.n	8006146 <UART_SetConfig+0x4f2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ef2:	4b38      	ldr	r3, [pc, #224]	; (8005fd4 <UART_SetConfig+0x380>)
 8005ef4:	0052      	lsls	r2, r2, #1
 8005ef6:	5ad3      	ldrh	r3, [r2, r3]
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	69b8      	ldr	r0, [r7, #24]
 8005f04:	69f9      	ldr	r1, [r7, #28]
 8005f06:	f7fa faad 	bl	8000464 <__aeabi_uldivmod>
 8005f0a:	0002      	movs	r2, r0
 8005f0c:	000b      	movs	r3, r1
 8005f0e:	0e11      	lsrs	r1, r2, #24
 8005f10:	021d      	lsls	r5, r3, #8
 8005f12:	430d      	orrs	r5, r1
 8005f14:	0214      	lsls	r4, r2, #8
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	085b      	lsrs	r3, r3, #1
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	68b8      	ldr	r0, [r7, #8]
 8005f24:	68f9      	ldr	r1, [r7, #12]
 8005f26:	1900      	adds	r0, r0, r4
 8005f28:	4169      	adcs	r1, r5
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	2300      	movs	r3, #0
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	683a      	ldr	r2, [r7, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f7fa fa94 	bl	8000464 <__aeabi_uldivmod>
 8005f3c:	0002      	movs	r2, r0
 8005f3e:	000b      	movs	r3, r1
 8005f40:	0013      	movs	r3, r2
 8005f42:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f46:	23c0      	movs	r3, #192	; 0xc0
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d309      	bcc.n	8005f62 <UART_SetConfig+0x30e>
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f50:	2380      	movs	r3, #128	; 0x80
 8005f52:	035b      	lsls	r3, r3, #13
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d204      	bcs.n	8005f62 <UART_SetConfig+0x30e>
        {
          huart->Instance->BRR = usartdiv;
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f5e:	60da      	str	r2, [r3, #12]
 8005f60:	e0f1      	b.n	8006146 <UART_SetConfig+0x4f2>
        }
        else
        {
          ret = HAL_ERROR;
 8005f62:	231a      	movs	r3, #26
 8005f64:	2220      	movs	r2, #32
 8005f66:	4694      	mov	ip, r2
 8005f68:	44bc      	add	ip, r7
 8005f6a:	4463      	add	r3, ip
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e0e9      	b.n	8006146 <UART_SetConfig+0x4f2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f74:	69da      	ldr	r2, [r3, #28]
 8005f76:	2380      	movs	r3, #128	; 0x80
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d000      	beq.n	8005f80 <UART_SetConfig+0x32c>
 8005f7e:	e087      	b.n	8006090 <UART_SetConfig+0x43c>
  {
    switch (clocksource)
 8005f80:	231b      	movs	r3, #27
 8005f82:	2220      	movs	r2, #32
 8005f84:	4694      	mov	ip, r2
 8005f86:	44bc      	add	ip, r7
 8005f88:	4463      	add	r3, ip
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d028      	beq.n	8005fe2 <UART_SetConfig+0x38e>
 8005f90:	dc2b      	bgt.n	8005fea <UART_SetConfig+0x396>
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d020      	beq.n	8005fd8 <UART_SetConfig+0x384>
 8005f96:	dc28      	bgt.n	8005fea <UART_SetConfig+0x396>
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <UART_SetConfig+0x34e>
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d005      	beq.n	8005fac <UART_SetConfig+0x358>
 8005fa0:	e023      	b.n	8005fea <UART_SetConfig+0x396>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fa2:	f7fd fd1d 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005faa:	e028      	b.n	8005ffe <UART_SetConfig+0x3aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <UART_SetConfig+0x37c>)
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fb0:	e025      	b.n	8005ffe <UART_SetConfig+0x3aa>
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	cfff69f3 	.word	0xcfff69f3
 8005fb8:	ffffcfff 	.word	0xffffcfff
 8005fbc:	40008000 	.word	0x40008000
 8005fc0:	11fff4ff 	.word	0x11fff4ff
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	40021000 	.word	0x40021000
 8005fcc:	40004400 	.word	0x40004400
 8005fd0:	00f42400 	.word	0x00f42400
 8005fd4:	08008288 	.word	0x08008288
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fd8:	f7fd fc76 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x3aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fe2:	2380      	movs	r3, #128	; 0x80
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x3aa>
      default:
        pclk = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005fee:	231a      	movs	r3, #26
 8005ff0:	2220      	movs	r2, #32
 8005ff2:	4694      	mov	ip, r2
 8005ff4:	44bc      	add	ip, r7
 8005ff6:	4463      	add	r3, ip
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
        break;
 8005ffc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006000:	2b00      	cmp	r3, #0
 8006002:	d100      	bne.n	8006006 <UART_SetConfig+0x3b2>
 8006004:	e09f      	b.n	8006146 <UART_SetConfig+0x4f2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600a:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <UART_SetConfig+0x524>)
 800600c:	0052      	lsls	r2, r2, #1
 800600e:	5ad3      	ldrh	r3, [r2, r3]
 8006010:	0019      	movs	r1, r3
 8006012:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006014:	f7fa f876 	bl	8000104 <__udivsi3>
 8006018:	0003      	movs	r3, r0
 800601a:	005a      	lsls	r2, r3, #1
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	085b      	lsrs	r3, r3, #1
 8006022:	18d2      	adds	r2, r2, r3
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	0019      	movs	r1, r3
 800602a:	0010      	movs	r0, r2
 800602c:	f7fa f86a 	bl	8000104 <__udivsi3>
 8006030:	0003      	movs	r3, r0
 8006032:	b29b      	uxth	r3, r3
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2b0f      	cmp	r3, #15
 800603a:	d921      	bls.n	8006080 <UART_SetConfig+0x42c>
 800603c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603e:	2380      	movs	r3, #128	; 0x80
 8006040:	025b      	lsls	r3, r3, #9
 8006042:	429a      	cmp	r2, r3
 8006044:	d21c      	bcs.n	8006080 <UART_SetConfig+0x42c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	b29a      	uxth	r2, r3
 800604a:	200e      	movs	r0, #14
 800604c:	2420      	movs	r4, #32
 800604e:	193b      	adds	r3, r7, r4
 8006050:	181b      	adds	r3, r3, r0
 8006052:	210f      	movs	r1, #15
 8006054:	438a      	bics	r2, r1
 8006056:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	085b      	lsrs	r3, r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	2207      	movs	r2, #7
 8006060:	4013      	ands	r3, r2
 8006062:	b299      	uxth	r1, r3
 8006064:	193b      	adds	r3, r7, r4
 8006066:	181b      	adds	r3, r3, r0
 8006068:	193a      	adds	r2, r7, r4
 800606a:	1812      	adds	r2, r2, r0
 800606c:	8812      	ldrh	r2, [r2, #0]
 800606e:	430a      	orrs	r2, r1
 8006070:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	193a      	adds	r2, r7, r4
 8006078:	1812      	adds	r2, r2, r0
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	e062      	b.n	8006146 <UART_SetConfig+0x4f2>
      }
      else
      {
        ret = HAL_ERROR;
 8006080:	231a      	movs	r3, #26
 8006082:	2220      	movs	r2, #32
 8006084:	4694      	mov	ip, r2
 8006086:	44bc      	add	ip, r7
 8006088:	4463      	add	r3, ip
 800608a:	2201      	movs	r2, #1
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e05a      	b.n	8006146 <UART_SetConfig+0x4f2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006090:	231b      	movs	r3, #27
 8006092:	2220      	movs	r2, #32
 8006094:	4694      	mov	ip, r2
 8006096:	44bc      	add	ip, r7
 8006098:	4463      	add	r3, ip
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d015      	beq.n	80060cc <UART_SetConfig+0x478>
 80060a0:	dc18      	bgt.n	80060d4 <UART_SetConfig+0x480>
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d00d      	beq.n	80060c2 <UART_SetConfig+0x46e>
 80060a6:	dc15      	bgt.n	80060d4 <UART_SetConfig+0x480>
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <UART_SetConfig+0x45e>
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d005      	beq.n	80060bc <UART_SetConfig+0x468>
 80060b0:	e010      	b.n	80060d4 <UART_SetConfig+0x480>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b2:	f7fd fc95 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 80060b6:	0003      	movs	r3, r0
 80060b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ba:	e015      	b.n	80060e8 <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060bc:	4b2f      	ldr	r3, [pc, #188]	; (800617c <UART_SetConfig+0x528>)
 80060be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060c0:	e012      	b.n	80060e8 <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060c2:	f7fd fc01 	bl	80038c8 <HAL_RCC_GetSysClockFreq>
 80060c6:	0003      	movs	r3, r0
 80060c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060ca:	e00d      	b.n	80060e8 <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80060d2:	e009      	b.n	80060e8 <UART_SetConfig+0x494>
      default:
        pclk = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80060d8:	231a      	movs	r3, #26
 80060da:	2220      	movs	r2, #32
 80060dc:	4694      	mov	ip, r2
 80060de:	44bc      	add	ip, r7
 80060e0:	4463      	add	r3, ip
 80060e2:	2201      	movs	r2, #1
 80060e4:	701a      	strb	r2, [r3, #0]
        break;
 80060e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d02b      	beq.n	8006146 <UART_SetConfig+0x4f2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060f2:	4b21      	ldr	r3, [pc, #132]	; (8006178 <UART_SetConfig+0x524>)
 80060f4:	0052      	lsls	r2, r2, #1
 80060f6:	5ad3      	ldrh	r3, [r2, r3]
 80060f8:	0019      	movs	r1, r3
 80060fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80060fc:	f7fa f802 	bl	8000104 <__udivsi3>
 8006100:	0003      	movs	r3, r0
 8006102:	001a      	movs	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	085b      	lsrs	r3, r3, #1
 800610a:	18d2      	adds	r2, r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	0019      	movs	r1, r3
 8006112:	0010      	movs	r0, r2
 8006114:	f7f9 fff6 	bl	8000104 <__udivsi3>
 8006118:	0003      	movs	r3, r0
 800611a:	b29b      	uxth	r3, r3
 800611c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	2b0f      	cmp	r3, #15
 8006122:	d909      	bls.n	8006138 <UART_SetConfig+0x4e4>
 8006124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	025b      	lsls	r3, r3, #9
 800612a:	429a      	cmp	r2, r3
 800612c:	d204      	bcs.n	8006138 <UART_SetConfig+0x4e4>
      {
        huart->Instance->BRR = usartdiv;
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	60da      	str	r2, [r3, #12]
 8006136:	e006      	b.n	8006146 <UART_SetConfig+0x4f2>
      }
      else
      {
        ret = HAL_ERROR;
 8006138:	231a      	movs	r3, #26
 800613a:	2220      	movs	r2, #32
 800613c:	4694      	mov	ip, r2
 800613e:	44bc      	add	ip, r7
 8006140:	4463      	add	r3, ip
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	226a      	movs	r2, #106	; 0x6a
 800614a:	2101      	movs	r1, #1
 800614c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2268      	movs	r2, #104	; 0x68
 8006152:	2101      	movs	r1, #1
 8006154:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	2200      	movs	r2, #0
 800615a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	2200      	movs	r2, #0
 8006160:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006162:	231a      	movs	r3, #26
 8006164:	2220      	movs	r2, #32
 8006166:	4694      	mov	ip, r2
 8006168:	44bc      	add	ip, r7
 800616a:	4463      	add	r3, ip
 800616c:	781b      	ldrb	r3, [r3, #0]
}
 800616e:	0018      	movs	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	b010      	add	sp, #64	; 0x40
 8006174:	bdb0      	pop	{r4, r5, r7, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	08008288 	.word	0x08008288
 800617c:	00f42400 	.word	0x00f42400

08006180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	2201      	movs	r2, #1
 800618e:	4013      	ands	r3, r2
 8006190:	d00b      	beq.n	80061aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a4a      	ldr	r2, [pc, #296]	; (80062c4 <UART_AdvFeatureConfig+0x144>)
 800619a:	4013      	ands	r3, r2
 800619c:	0019      	movs	r1, r3
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ae:	2202      	movs	r2, #2
 80061b0:	4013      	ands	r3, r2
 80061b2:	d00b      	beq.n	80061cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4a43      	ldr	r2, [pc, #268]	; (80062c8 <UART_AdvFeatureConfig+0x148>)
 80061bc:	4013      	ands	r3, r2
 80061be:	0019      	movs	r1, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d0:	2204      	movs	r2, #4
 80061d2:	4013      	ands	r3, r2
 80061d4:	d00b      	beq.n	80061ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4a3b      	ldr	r2, [pc, #236]	; (80062cc <UART_AdvFeatureConfig+0x14c>)
 80061de:	4013      	ands	r3, r2
 80061e0:	0019      	movs	r1, r3
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f2:	2208      	movs	r2, #8
 80061f4:	4013      	ands	r3, r2
 80061f6:	d00b      	beq.n	8006210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	4a34      	ldr	r2, [pc, #208]	; (80062d0 <UART_AdvFeatureConfig+0x150>)
 8006200:	4013      	ands	r3, r2
 8006202:	0019      	movs	r1, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	2210      	movs	r2, #16
 8006216:	4013      	ands	r3, r2
 8006218:	d00b      	beq.n	8006232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <UART_AdvFeatureConfig+0x154>)
 8006222:	4013      	ands	r3, r2
 8006224:	0019      	movs	r1, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	2220      	movs	r2, #32
 8006238:	4013      	ands	r3, r2
 800623a:	d00b      	beq.n	8006254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <UART_AdvFeatureConfig+0x158>)
 8006244:	4013      	ands	r3, r2
 8006246:	0019      	movs	r1, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	2240      	movs	r2, #64	; 0x40
 800625a:	4013      	ands	r3, r2
 800625c:	d01d      	beq.n	800629a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a1d      	ldr	r2, [pc, #116]	; (80062dc <UART_AdvFeatureConfig+0x15c>)
 8006266:	4013      	ands	r3, r2
 8006268:	0019      	movs	r1, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	035b      	lsls	r3, r3, #13
 800627e:	429a      	cmp	r2, r3
 8006280:	d10b      	bne.n	800629a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4a15      	ldr	r2, [pc, #84]	; (80062e0 <UART_AdvFeatureConfig+0x160>)
 800628a:	4013      	ands	r3, r2
 800628c:	0019      	movs	r1, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	2280      	movs	r2, #128	; 0x80
 80062a0:	4013      	ands	r3, r2
 80062a2:	d00b      	beq.n	80062bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	4a0e      	ldr	r2, [pc, #56]	; (80062e4 <UART_AdvFeatureConfig+0x164>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	0019      	movs	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
  }
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	b002      	add	sp, #8
 80062c2:	bd80      	pop	{r7, pc}
 80062c4:	fffdffff 	.word	0xfffdffff
 80062c8:	fffeffff 	.word	0xfffeffff
 80062cc:	fffbffff 	.word	0xfffbffff
 80062d0:	ffff7fff 	.word	0xffff7fff
 80062d4:	ffffefff 	.word	0xffffefff
 80062d8:	ffffdfff 	.word	0xffffdfff
 80062dc:	ffefffff 	.word	0xffefffff
 80062e0:	ff9fffff 	.word	0xff9fffff
 80062e4:	fff7ffff 	.word	0xfff7ffff

080062e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	228c      	movs	r2, #140	; 0x8c
 80062f4:	2100      	movs	r1, #0
 80062f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f8:	f7fb fb2e 	bl	8001958 <HAL_GetTick>
 80062fc:	0003      	movs	r3, r0
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2208      	movs	r2, #8
 8006308:	4013      	ands	r3, r2
 800630a:	2b08      	cmp	r3, #8
 800630c:	d10c      	bne.n	8006328 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2280      	movs	r2, #128	; 0x80
 8006312:	0391      	lsls	r1, r2, #14
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	4a18      	ldr	r2, [pc, #96]	; (8006378 <UART_CheckIdleState+0x90>)
 8006318:	9200      	str	r2, [sp, #0]
 800631a:	2200      	movs	r2, #0
 800631c:	f000 f82e 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8006320:	1e03      	subs	r3, r0, #0
 8006322:	d001      	beq.n	8006328 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e023      	b.n	8006370 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2204      	movs	r2, #4
 8006330:	4013      	ands	r3, r2
 8006332:	2b04      	cmp	r3, #4
 8006334:	d10c      	bne.n	8006350 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2280      	movs	r2, #128	; 0x80
 800633a:	03d1      	lsls	r1, r2, #15
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4a0e      	ldr	r2, [pc, #56]	; (8006378 <UART_CheckIdleState+0x90>)
 8006340:	9200      	str	r2, [sp, #0]
 8006342:	2200      	movs	r2, #0
 8006344:	f000 f81a 	bl	800637c <UART_WaitOnFlagUntilTimeout>
 8006348:	1e03      	subs	r3, r0, #0
 800634a:	d001      	beq.n	8006350 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e00f      	b.n	8006370 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2284      	movs	r2, #132	; 0x84
 8006354:	2120      	movs	r1, #32
 8006356:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2288      	movs	r2, #136	; 0x88
 800635c:	2120      	movs	r1, #32
 800635e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2280      	movs	r2, #128	; 0x80
 800636a:	2100      	movs	r1, #0
 800636c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	0018      	movs	r0, r3
 8006372:	46bd      	mov	sp, r7
 8006374:	b004      	add	sp, #16
 8006376:	bd80      	pop	{r7, pc}
 8006378:	01ffffff 	.word	0x01ffffff

0800637c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	1dfb      	adds	r3, r7, #7
 800638a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800638c:	e062      	b.n	8006454 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	3301      	adds	r3, #1
 8006392:	d05f      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006394:	f7fb fae0 	bl	8001958 <HAL_GetTick>
 8006398:	0002      	movs	r2, r0
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d302      	bcc.n	80063aa <UART_WaitOnFlagUntilTimeout+0x2e>
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d11d      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4931      	ldr	r1, [pc, #196]	; (800647c <UART_WaitOnFlagUntilTimeout+0x100>)
 80063b6:	400a      	ands	r2, r1
 80063b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	689a      	ldr	r2, [r3, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2101      	movs	r1, #1
 80063c6:	438a      	bics	r2, r1
 80063c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2284      	movs	r2, #132	; 0x84
 80063ce:	2120      	movs	r1, #32
 80063d0:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2288      	movs	r2, #136	; 0x88
 80063d6:	2120      	movs	r1, #32
 80063d8:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2280      	movs	r2, #128	; 0x80
 80063de:	2100      	movs	r1, #0
 80063e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80063e2:	2303      	movs	r3, #3
 80063e4:	e046      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2204      	movs	r2, #4
 80063ee:	4013      	ands	r3, r2
 80063f0:	d030      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	401a      	ands	r2, r3
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	011b      	lsls	r3, r3, #4
 8006402:	429a      	cmp	r2, r3
 8006404:	d126      	bne.n	8006454 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2280      	movs	r2, #128	; 0x80
 800640c:	0112      	lsls	r2, r2, #4
 800640e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4918      	ldr	r1, [pc, #96]	; (800647c <UART_WaitOnFlagUntilTimeout+0x100>)
 800641c:	400a      	ands	r2, r1
 800641e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2101      	movs	r1, #1
 800642c:	438a      	bics	r2, r1
 800642e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2284      	movs	r2, #132	; 0x84
 8006434:	2120      	movs	r1, #32
 8006436:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2288      	movs	r2, #136	; 0x88
 800643c:	2120      	movs	r1, #32
 800643e:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	228c      	movs	r2, #140	; 0x8c
 8006444:	2120      	movs	r1, #32
 8006446:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2280      	movs	r2, #128	; 0x80
 800644c:	2100      	movs	r1, #0
 800644e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e00f      	b.n	8006474 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	425a      	negs	r2, r3
 8006464:	4153      	adcs	r3, r2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	001a      	movs	r2, r3
 800646a:	1dfb      	adds	r3, r7, #7
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d08d      	beq.n	800638e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	0018      	movs	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	b004      	add	sp, #16
 800647a:	bd80      	pop	{r7, pc}
 800647c:	fffffe5f 	.word	0xfffffe5f

08006480 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	1dbb      	adds	r3, r7, #6
 800648c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1dba      	adds	r2, r7, #6
 8006498:	215c      	movs	r1, #92	; 0x5c
 800649a:	8812      	ldrh	r2, [r2, #0]
 800649c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1dba      	adds	r2, r7, #6
 80064a2:	215e      	movs	r1, #94	; 0x5e
 80064a4:	8812      	ldrh	r2, [r2, #0]
 80064a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	2380      	movs	r3, #128	; 0x80
 80064b4:	015b      	lsls	r3, r3, #5
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d10d      	bne.n	80064d6 <UART_Start_Receive_IT+0x56>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d104      	bne.n	80064cc <UART_Start_Receive_IT+0x4c>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2260      	movs	r2, #96	; 0x60
 80064c6:	494d      	ldr	r1, [pc, #308]	; (80065fc <UART_Start_Receive_IT+0x17c>)
 80064c8:	5299      	strh	r1, [r3, r2]
 80064ca:	e02e      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2260      	movs	r2, #96	; 0x60
 80064d0:	21ff      	movs	r1, #255	; 0xff
 80064d2:	5299      	strh	r1, [r3, r2]
 80064d4:	e029      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10d      	bne.n	80064fa <UART_Start_Receive_IT+0x7a>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <UART_Start_Receive_IT+0x70>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2260      	movs	r2, #96	; 0x60
 80064ea:	21ff      	movs	r1, #255	; 0xff
 80064ec:	5299      	strh	r1, [r3, r2]
 80064ee:	e01c      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2260      	movs	r2, #96	; 0x60
 80064f4:	217f      	movs	r1, #127	; 0x7f
 80064f6:	5299      	strh	r1, [r3, r2]
 80064f8:	e017      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	2380      	movs	r3, #128	; 0x80
 8006500:	055b      	lsls	r3, r3, #21
 8006502:	429a      	cmp	r2, r3
 8006504:	d10d      	bne.n	8006522 <UART_Start_Receive_IT+0xa2>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d104      	bne.n	8006518 <UART_Start_Receive_IT+0x98>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2260      	movs	r2, #96	; 0x60
 8006512:	217f      	movs	r1, #127	; 0x7f
 8006514:	5299      	strh	r1, [r3, r2]
 8006516:	e008      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2260      	movs	r2, #96	; 0x60
 800651c:	213f      	movs	r1, #63	; 0x3f
 800651e:	5299      	strh	r1, [r3, r2]
 8006520:	e003      	b.n	800652a <UART_Start_Receive_IT+0xaa>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2260      	movs	r2, #96	; 0x60
 8006526:	2100      	movs	r1, #0
 8006528:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	228c      	movs	r2, #140	; 0x8c
 800652e:	2100      	movs	r1, #0
 8006530:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2288      	movs	r2, #136	; 0x88
 8006536:	2122      	movs	r1, #34	; 0x22
 8006538:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2101      	movs	r1, #1
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	429a      	cmp	r2, r3
 8006554:	d12e      	bne.n	80065b4 <UART_Start_Receive_IT+0x134>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2268      	movs	r2, #104	; 0x68
 800655a:	5a9b      	ldrh	r3, [r3, r2]
 800655c:	1dba      	adds	r2, r7, #6
 800655e:	8812      	ldrh	r2, [r2, #0]
 8006560:	429a      	cmp	r2, r3
 8006562:	d327      	bcc.n	80065b4 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	2380      	movs	r3, #128	; 0x80
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	429a      	cmp	r2, r3
 800656e:	d107      	bne.n	8006580 <UART_Start_Receive_IT+0x100>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d103      	bne.n	8006580 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4a21      	ldr	r2, [pc, #132]	; (8006600 <UART_Start_Receive_IT+0x180>)
 800657c:	671a      	str	r2, [r3, #112]	; 0x70
 800657e:	e002      	b.n	8006586 <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4a20      	ldr	r2, [pc, #128]	; (8006604 <UART_Start_Receive_IT+0x184>)
 8006584:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2280      	movs	r2, #128	; 0x80
 800658a:	2100      	movs	r1, #0
 800658c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2180      	movs	r1, #128	; 0x80
 800659a:	0049      	lsls	r1, r1, #1
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2180      	movs	r1, #128	; 0x80
 80065ac:	0549      	lsls	r1, r1, #21
 80065ae:	430a      	orrs	r2, r1
 80065b0:	609a      	str	r2, [r3, #8]
 80065b2:	e01d      	b.n	80065f0 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	2380      	movs	r3, #128	; 0x80
 80065ba:	015b      	lsls	r3, r3, #5
 80065bc:	429a      	cmp	r2, r3
 80065be:	d107      	bne.n	80065d0 <UART_Start_Receive_IT+0x150>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <UART_Start_Receive_IT+0x188>)
 80065cc:	671a      	str	r2, [r3, #112]	; 0x70
 80065ce:	e002      	b.n	80065d6 <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <UART_Start_Receive_IT+0x18c>)
 80065d4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2280      	movs	r2, #128	; 0x80
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2190      	movs	r1, #144	; 0x90
 80065ea:	0049      	lsls	r1, r1, #1
 80065ec:	430a      	orrs	r2, r1
 80065ee:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	0018      	movs	r0, r3
 80065f4:	46bd      	mov	sp, r7
 80065f6:	b004      	add	sp, #16
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	46c0      	nop			; (mov r8, r8)
 80065fc:	000001ff 	.word	0x000001ff
 8006600:	08006ad5 	.word	0x08006ad5
 8006604:	080068b1 	.word	0x080068b1
 8006608:	080067c5 	.word	0x080067c5
 800660c:	080066d9 	.word	0x080066d9

08006610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4912      	ldr	r1, [pc, #72]	; (800666c <UART_EndRxTransfer+0x5c>)
 8006624:	400a      	ands	r2, r1
 8006626:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	490f      	ldr	r1, [pc, #60]	; (8006670 <UART_EndRxTransfer+0x60>)
 8006634:	400a      	ands	r2, r1
 8006636:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d107      	bne.n	8006650 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2110      	movs	r1, #16
 800664c:	438a      	bics	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2288      	movs	r2, #136	; 0x88
 8006654:	2120      	movs	r1, #32
 8006656:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2200      	movs	r2, #0
 800665c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006664:	46c0      	nop			; (mov r8, r8)
 8006666:	46bd      	mov	sp, r7
 8006668:	b002      	add	sp, #8
 800666a:	bd80      	pop	{r7, pc}
 800666c:	fffffedf 	.word	0xfffffedf
 8006670:	effffffe 	.word	0xeffffffe

08006674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	225e      	movs	r2, #94	; 0x5e
 8006686:	2100      	movs	r1, #0
 8006688:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2256      	movs	r2, #86	; 0x56
 800668e:	2100      	movs	r1, #0
 8006690:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	0018      	movs	r0, r3
 8006696:	f7ff fac9 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b004      	add	sp, #16
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	438a      	bics	r2, r1
 80066b8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2284      	movs	r2, #132	; 0x84
 80066be:	2120      	movs	r1, #32
 80066c0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7ff faa6 	bl	8005c1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066d0:	46c0      	nop			; (mov r8, r8)
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b002      	add	sp, #8
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066e0:	200e      	movs	r0, #14
 80066e2:	183b      	adds	r3, r7, r0
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	2160      	movs	r1, #96	; 0x60
 80066e8:	5a52      	ldrh	r2, [r2, r1]
 80066ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2288      	movs	r2, #136	; 0x88
 80066f0:	589b      	ldr	r3, [r3, r2]
 80066f2:	2b22      	cmp	r3, #34	; 0x22
 80066f4:	d158      	bne.n	80067a8 <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066fc:	210c      	movs	r1, #12
 80066fe:	187b      	adds	r3, r7, r1
 8006700:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006702:	187b      	adds	r3, r7, r1
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	b2da      	uxtb	r2, r3
 8006708:	183b      	adds	r3, r7, r0
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b2d9      	uxtb	r1, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006712:	400a      	ands	r2, r1
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800671c:	1c5a      	adds	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	225e      	movs	r2, #94	; 0x5e
 8006726:	5a9b      	ldrh	r3, [r3, r2]
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b299      	uxth	r1, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	225e      	movs	r2, #94	; 0x5e
 8006732:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	225e      	movs	r2, #94	; 0x5e
 8006738:	5a9b      	ldrh	r3, [r3, r2]
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d13b      	bne.n	80067b8 <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	491d      	ldr	r1, [pc, #116]	; (80067c0 <UART_RxISR_8BIT+0xe8>)
 800674c:	400a      	ands	r2, r1
 800674e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689a      	ldr	r2, [r3, #8]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2101      	movs	r1, #1
 800675c:	438a      	bics	r2, r1
 800675e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2288      	movs	r2, #136	; 0x88
 8006764:	2120      	movs	r1, #32
 8006766:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d110      	bne.n	8006798 <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2110      	movs	r1, #16
 8006782:	438a      	bics	r2, r1
 8006784:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	225c      	movs	r2, #92	; 0x5c
 800678a:	5a9a      	ldrh	r2, [r3, r2]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0011      	movs	r1, r2
 8006790:	0018      	movs	r0, r3
 8006792:	f7ff fa53 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8006796:	e003      	b.n	80067a0 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	0018      	movs	r0, r3
 800679c:	f000 fda8 	bl	80072f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067a6:	e007      	b.n	80067b8 <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	699a      	ldr	r2, [r3, #24]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2108      	movs	r1, #8
 80067b4:	430a      	orrs	r2, r1
 80067b6:	619a      	str	r2, [r3, #24]
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b004      	add	sp, #16
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	fffffedf 	.word	0xfffffedf

080067c4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067cc:	200e      	movs	r0, #14
 80067ce:	183b      	adds	r3, r7, r0
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	2160      	movs	r1, #96	; 0x60
 80067d4:	5a52      	ldrh	r2, [r2, r1]
 80067d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2288      	movs	r2, #136	; 0x88
 80067dc:	589b      	ldr	r3, [r3, r2]
 80067de:	2b22      	cmp	r3, #34	; 0x22
 80067e0:	d158      	bne.n	8006894 <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067e8:	210c      	movs	r1, #12
 80067ea:	187b      	adds	r3, r7, r1
 80067ec:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	183a      	adds	r2, r7, r0
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	8812      	ldrh	r2, [r2, #0]
 80067fc:	4013      	ands	r3, r2
 80067fe:	b29a      	uxth	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006808:	1c9a      	adds	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	225e      	movs	r2, #94	; 0x5e
 8006812:	5a9b      	ldrh	r3, [r3, r2]
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b299      	uxth	r1, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	225e      	movs	r2, #94	; 0x5e
 800681e:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	225e      	movs	r2, #94	; 0x5e
 8006824:	5a9b      	ldrh	r3, [r3, r2]
 8006826:	b29b      	uxth	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d13b      	bne.n	80068a4 <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	491d      	ldr	r1, [pc, #116]	; (80068ac <UART_RxISR_16BIT+0xe8>)
 8006838:	400a      	ands	r2, r1
 800683a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2101      	movs	r1, #1
 8006848:	438a      	bics	r2, r1
 800684a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2288      	movs	r2, #136	; 0x88
 8006850:	2120      	movs	r1, #32
 8006852:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d110      	bne.n	8006884 <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2110      	movs	r1, #16
 800686e:	438a      	bics	r2, r1
 8006870:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	225c      	movs	r2, #92	; 0x5c
 8006876:	5a9a      	ldrh	r2, [r3, r2]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	0011      	movs	r1, r2
 800687c:	0018      	movs	r0, r3
 800687e:	f7ff f9dd 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8006882:	e003      	b.n	800688c <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fd32 	bl	80072f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006892:	e007      	b.n	80068a4 <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2108      	movs	r1, #8
 80068a0:	430a      	orrs	r2, r1
 80068a2:	619a      	str	r2, [r3, #24]
}
 80068a4:	46c0      	nop			; (mov r8, r8)
 80068a6:	46bd      	mov	sp, r7
 80068a8:	b004      	add	sp, #16
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	fffffedf 	.word	0xfffffedf

080068b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80068b8:	231a      	movs	r3, #26
 80068ba:	18fb      	adds	r3, r7, r3
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	2160      	movs	r1, #96	; 0x60
 80068c0:	5a52      	ldrh	r2, [r2, r1]
 80068c2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2288      	movs	r2, #136	; 0x88
 80068e0:	589b      	ldr	r3, [r3, r2]
 80068e2:	2b22      	cmp	r3, #34	; 0x22
 80068e4:	d000      	beq.n	80068e8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80068e6:	e0e1      	b.n	8006aac <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068e8:	230e      	movs	r3, #14
 80068ea:	18fb      	adds	r3, r7, r3
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	2168      	movs	r1, #104	; 0x68
 80068f0:	5a52      	ldrh	r2, [r2, r1]
 80068f2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068f4:	e0aa      	b.n	8006a4c <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068fc:	210c      	movs	r1, #12
 80068fe:	187b      	adds	r3, r7, r1
 8006900:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006902:	187b      	adds	r3, r7, r1
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	231a      	movs	r3, #26
 800690a:	18fb      	adds	r3, r7, r3
 800690c:	881b      	ldrh	r3, [r3, #0]
 800690e:	b2d9      	uxtb	r1, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	400a      	ands	r2, r1
 8006916:	b2d2      	uxtb	r2, r2
 8006918:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	225e      	movs	r2, #94	; 0x5e
 8006928:	5a9b      	ldrh	r3, [r3, r2]
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b299      	uxth	r1, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	225e      	movs	r2, #94	; 0x5e
 8006934:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	2207      	movs	r2, #7
 8006942:	4013      	ands	r3, r2
 8006944:	d049      	beq.n	80069da <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	2201      	movs	r2, #1
 800694a:	4013      	ands	r3, r2
 800694c:	d010      	beq.n	8006970 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	4013      	ands	r3, r2
 8006956:	d00b      	beq.n	8006970 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2201      	movs	r2, #1
 800695e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	228c      	movs	r2, #140	; 0x8c
 8006964:	589b      	ldr	r3, [r3, r2]
 8006966:	2201      	movs	r2, #1
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	218c      	movs	r1, #140	; 0x8c
 800696e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006970:	69fb      	ldr	r3, [r7, #28]
 8006972:	2202      	movs	r2, #2
 8006974:	4013      	ands	r3, r2
 8006976:	d00f      	beq.n	8006998 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	2201      	movs	r2, #1
 800697c:	4013      	ands	r3, r2
 800697e:	d00b      	beq.n	8006998 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	2202      	movs	r2, #2
 8006986:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	228c      	movs	r2, #140	; 0x8c
 800698c:	589b      	ldr	r3, [r3, r2]
 800698e:	2204      	movs	r2, #4
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	218c      	movs	r1, #140	; 0x8c
 8006996:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2204      	movs	r2, #4
 800699c:	4013      	ands	r3, r2
 800699e:	d00f      	beq.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2201      	movs	r2, #1
 80069a4:	4013      	ands	r3, r2
 80069a6:	d00b      	beq.n	80069c0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2204      	movs	r2, #4
 80069ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	228c      	movs	r2, #140	; 0x8c
 80069b4:	589b      	ldr	r3, [r3, r2]
 80069b6:	2202      	movs	r2, #2
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	218c      	movs	r1, #140	; 0x8c
 80069be:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	228c      	movs	r2, #140	; 0x8c
 80069c4:	589b      	ldr	r3, [r3, r2]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d007      	beq.n	80069da <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7ff f92d 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	228c      	movs	r2, #140	; 0x8c
 80069d6:	2100      	movs	r1, #0
 80069d8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	225e      	movs	r2, #94	; 0x5e
 80069de:	5a9b      	ldrh	r3, [r3, r2]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d132      	bne.n	8006a4c <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4934      	ldr	r1, [pc, #208]	; (8006ac4 <UART_RxISR_8BIT_FIFOEN+0x214>)
 80069f2:	400a      	ands	r2, r1
 80069f4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4931      	ldr	r1, [pc, #196]	; (8006ac8 <UART_RxISR_8BIT_FIFOEN+0x218>)
 8006a02:	400a      	ands	r2, r1
 8006a04:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2288      	movs	r2, #136	; 0x88
 8006a0a:	2120      	movs	r1, #32
 8006a0c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d110      	bne.n	8006a3e <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2110      	movs	r1, #16
 8006a28:	438a      	bics	r2, r1
 8006a2a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	225c      	movs	r2, #92	; 0x5c
 8006a30:	5a9a      	ldrh	r2, [r3, r2]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0011      	movs	r1, r2
 8006a36:	0018      	movs	r0, r3
 8006a38:	f7ff f900 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8006a3c:	e003      	b.n	8006a46 <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f000 fc55 	bl	80072f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a4c:	230e      	movs	r3, #14
 8006a4e:	18fb      	adds	r3, r7, r3
 8006a50:	881b      	ldrh	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	d000      	beq.n	8006a60 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 8006a5e:	e74a      	b.n	80068f6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a60:	200a      	movs	r0, #10
 8006a62:	183b      	adds	r3, r7, r0
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	215e      	movs	r1, #94	; 0x5e
 8006a68:	5a52      	ldrh	r2, [r2, r1]
 8006a6a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a6c:	0001      	movs	r1, r0
 8006a6e:	187b      	adds	r3, r7, r1
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d022      	beq.n	8006abc <UART_RxISR_8BIT_FIFOEN+0x20c>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2268      	movs	r2, #104	; 0x68
 8006a7a:	5a9b      	ldrh	r3, [r3, r2]
 8006a7c:	187a      	adds	r2, r7, r1
 8006a7e:	8812      	ldrh	r2, [r2, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d21b      	bcs.n	8006abc <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689a      	ldr	r2, [r3, #8]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	490f      	ldr	r1, [pc, #60]	; (8006acc <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8006a90:	400a      	ands	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a0e      	ldr	r2, [pc, #56]	; (8006ad0 <UART_RxISR_8BIT_FIFOEN+0x220>)
 8006a98:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2120      	movs	r1, #32
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006aaa:	e007      	b.n	8006abc <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699a      	ldr	r2, [r3, #24]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2108      	movs	r1, #8
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	619a      	str	r2, [r3, #24]
}
 8006abc:	46c0      	nop			; (mov r8, r8)
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b008      	add	sp, #32
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	fffffeff 	.word	0xfffffeff
 8006ac8:	effffffe 	.word	0xeffffffe
 8006acc:	efffffff 	.word	0xefffffff
 8006ad0:	080066d9 	.word	0x080066d9

08006ad4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b08a      	sub	sp, #40	; 0x28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006adc:	2322      	movs	r3, #34	; 0x22
 8006ade:	18fb      	adds	r3, r7, r3
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	2160      	movs	r1, #96	; 0x60
 8006ae4:	5a52      	ldrh	r2, [r2, r1]
 8006ae6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	69db      	ldr	r3, [r3, #28]
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2288      	movs	r2, #136	; 0x88
 8006b04:	589b      	ldr	r3, [r3, r2]
 8006b06:	2b22      	cmp	r3, #34	; 0x22
 8006b08:	d000      	beq.n	8006b0c <UART_RxISR_16BIT_FIFOEN+0x38>
 8006b0a:	e0e1      	b.n	8006cd0 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b0c:	2316      	movs	r3, #22
 8006b0e:	18fb      	adds	r3, r7, r3
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	2168      	movs	r1, #104	; 0x68
 8006b14:	5a52      	ldrh	r2, [r2, r1]
 8006b16:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b18:	e0aa      	b.n	8006c70 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b20:	2114      	movs	r1, #20
 8006b22:	187b      	adds	r3, r7, r1
 8006b24:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006b2c:	187b      	adds	r3, r7, r1
 8006b2e:	2222      	movs	r2, #34	; 0x22
 8006b30:	18ba      	adds	r2, r7, r2
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	8812      	ldrh	r2, [r2, #0]
 8006b36:	4013      	ands	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	225e      	movs	r2, #94	; 0x5e
 8006b4c:	5a9b      	ldrh	r3, [r3, r2]
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	3b01      	subs	r3, #1
 8006b52:	b299      	uxth	r1, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	225e      	movs	r2, #94	; 0x5e
 8006b58:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b64:	2207      	movs	r2, #7
 8006b66:	4013      	ands	r3, r2
 8006b68:	d049      	beq.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d010      	beq.n	8006b94 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8006b72:	69fa      	ldr	r2, [r7, #28]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	005b      	lsls	r3, r3, #1
 8006b78:	4013      	ands	r3, r2
 8006b7a:	d00b      	beq.n	8006b94 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2201      	movs	r2, #1
 8006b82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	228c      	movs	r2, #140	; 0x8c
 8006b88:	589b      	ldr	r3, [r3, r2]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	218c      	movs	r1, #140	; 0x8c
 8006b92:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	2202      	movs	r2, #2
 8006b98:	4013      	ands	r3, r2
 8006b9a:	d00f      	beq.n	8006bbc <UART_RxISR_16BIT_FIFOEN+0xe8>
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	228c      	movs	r2, #140	; 0x8c
 8006bb0:	589b      	ldr	r3, [r3, r2]
 8006bb2:	2204      	movs	r2, #4
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	218c      	movs	r1, #140	; 0x8c
 8006bba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	228c      	movs	r2, #140	; 0x8c
 8006bd8:	589b      	ldr	r3, [r3, r2]
 8006bda:	2202      	movs	r2, #2
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	218c      	movs	r1, #140	; 0x8c
 8006be2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	228c      	movs	r2, #140	; 0x8c
 8006be8:	589b      	ldr	r3, [r3, r2]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff f81b 	bl	8005c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	228c      	movs	r2, #140	; 0x8c
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	225e      	movs	r2, #94	; 0x5e
 8006c02:	5a9b      	ldrh	r3, [r3, r2]
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d132      	bne.n	8006c70 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4934      	ldr	r1, [pc, #208]	; (8006ce8 <UART_RxISR_16BIT_FIFOEN+0x214>)
 8006c16:	400a      	ands	r2, r1
 8006c18:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4931      	ldr	r1, [pc, #196]	; (8006cec <UART_RxISR_16BIT_FIFOEN+0x218>)
 8006c26:	400a      	ands	r2, r1
 8006c28:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2288      	movs	r2, #136	; 0x88
 8006c2e:	2120      	movs	r1, #32
 8006c30:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2110      	movs	r1, #16
 8006c4c:	438a      	bics	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	225c      	movs	r2, #92	; 0x5c
 8006c54:	5a9a      	ldrh	r2, [r3, r2]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	0011      	movs	r1, r2
 8006c5a:	0018      	movs	r0, r3
 8006c5c:	f7fe ffee 	bl	8005c3c <HAL_UARTEx_RxEventCallback>
 8006c60:	e003      	b.n	8006c6a <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 fb43 	bl	80072f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c70:	2316      	movs	r3, #22
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	2220      	movs	r2, #32
 8006c7e:	4013      	ands	r3, r2
 8006c80:	d000      	beq.n	8006c84 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8006c82:	e74a      	b.n	8006b1a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c84:	200e      	movs	r0, #14
 8006c86:	183b      	adds	r3, r7, r0
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	215e      	movs	r1, #94	; 0x5e
 8006c8c:	5a52      	ldrh	r2, [r2, r1]
 8006c8e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c90:	0001      	movs	r1, r0
 8006c92:	187b      	adds	r3, r7, r1
 8006c94:	881b      	ldrh	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d022      	beq.n	8006ce0 <UART_RxISR_16BIT_FIFOEN+0x20c>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2268      	movs	r2, #104	; 0x68
 8006c9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ca0:	187a      	adds	r2, r7, r1
 8006ca2:	8812      	ldrh	r2, [r2, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d21b      	bcs.n	8006ce0 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	490f      	ldr	r1, [pc, #60]	; (8006cf0 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8006cb4:	400a      	ands	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a0e      	ldr	r2, [pc, #56]	; (8006cf4 <UART_RxISR_16BIT_FIFOEN+0x220>)
 8006cbc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2120      	movs	r1, #32
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006cce:	e007      	b.n	8006ce0 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2108      	movs	r1, #8
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	619a      	str	r2, [r3, #24]
}
 8006ce0:	46c0      	nop			; (mov r8, r8)
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	b00a      	add	sp, #40	; 0x28
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	fffffeff 	.word	0xfffffeff
 8006cec:	effffffe 	.word	0xeffffffe
 8006cf0:	efffffff 	.word	0xefffffff
 8006cf4:	080067c5 	.word	0x080067c5

08006cf8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b002      	add	sp, #8
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d10:	46c0      	nop			; (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d20:	46c0      	nop			; (mov r8, r8)
 8006d22:	46bd      	mov	sp, r7
 8006d24:	b002      	add	sp, #8
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2280      	movs	r2, #128	; 0x80
 8006d34:	5c9b      	ldrb	r3, [r3, r2]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_UARTEx_DisableFifoMode+0x16>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e027      	b.n	8006d8e <HAL_UARTEx_DisableFifoMode+0x66>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2280      	movs	r2, #128	; 0x80
 8006d42:	2101      	movs	r1, #1
 8006d44:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2284      	movs	r2, #132	; 0x84
 8006d4a:	2124      	movs	r1, #36	; 0x24
 8006d4c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2101      	movs	r1, #1
 8006d62:	438a      	bics	r2, r1
 8006d64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2284      	movs	r2, #132	; 0x84
 8006d80:	2120      	movs	r1, #32
 8006d82:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2280      	movs	r2, #128	; 0x80
 8006d88:	2100      	movs	r1, #0
 8006d8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b004      	add	sp, #16
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	dfffffff 	.word	0xdfffffff

08006d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2280      	movs	r2, #128	; 0x80
 8006daa:	5c9b      	ldrb	r3, [r3, r2]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e02e      	b.n	8006e12 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2280      	movs	r2, #128	; 0x80
 8006db8:	2101      	movs	r1, #1
 8006dba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2284      	movs	r2, #132	; 0x84
 8006dc0:	2124      	movs	r1, #36	; 0x24
 8006dc2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	438a      	bics	r2, r1
 8006dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	00db      	lsls	r3, r3, #3
 8006de4:	08d9      	lsrs	r1, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f000 f854 	bl	8006ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2284      	movs	r2, #132	; 0x84
 8006e04:	2120      	movs	r1, #32
 8006e06:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2280      	movs	r2, #128	; 0x80
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	0018      	movs	r0, r3
 8006e14:	46bd      	mov	sp, r7
 8006e16:	b004      	add	sp, #16
 8006e18:	bd80      	pop	{r7, pc}
	...

08006e1c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2280      	movs	r2, #128	; 0x80
 8006e2a:	5c9b      	ldrb	r3, [r3, r2]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d101      	bne.n	8006e34 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e30:	2302      	movs	r3, #2
 8006e32:	e02f      	b.n	8006e94 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2280      	movs	r2, #128	; 0x80
 8006e38:	2101      	movs	r1, #1
 8006e3a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2284      	movs	r2, #132	; 0x84
 8006e40:	2124      	movs	r1, #36	; 0x24
 8006e42:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2101      	movs	r1, #1
 8006e58:	438a      	bics	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	0019      	movs	r1, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	683a      	ldr	r2, [r7, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 f813 	bl	8006ea0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2284      	movs	r2, #132	; 0x84
 8006e86:	2120      	movs	r1, #32
 8006e88:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	2100      	movs	r1, #0
 8006e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	0018      	movs	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	b004      	add	sp, #16
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	f1ffffff 	.word	0xf1ffffff

08006ea0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ea2:	b089      	sub	sp, #36	; 0x24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006ea8:	2314      	movs	r3, #20
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	4a2f      	ldr	r2, [pc, #188]	; (8006f6c <UARTEx_SetNbDataToProcess+0xcc>)
 8006eae:	ca03      	ldmia	r2!, {r0, r1}
 8006eb0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	18fb      	adds	r3, r7, r3
 8006eb6:	4a2e      	ldr	r2, [pc, #184]	; (8006f70 <UARTEx_SetNbDataToProcess+0xd0>)
 8006eb8:	ca03      	ldmia	r2!, {r0, r1}
 8006eba:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	226a      	movs	r2, #106	; 0x6a
 8006ec8:	2101      	movs	r1, #1
 8006eca:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2268      	movs	r2, #104	; 0x68
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ed4:	e046      	b.n	8006f64 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ed6:	261f      	movs	r6, #31
 8006ed8:	19bb      	adds	r3, r7, r6
 8006eda:	2208      	movs	r2, #8
 8006edc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ede:	201e      	movs	r0, #30
 8006ee0:	183b      	adds	r3, r7, r0
 8006ee2:	2208      	movs	r2, #8
 8006ee4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	0e5b      	lsrs	r3, r3, #25
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	241d      	movs	r4, #29
 8006ef2:	193b      	adds	r3, r7, r4
 8006ef4:	2107      	movs	r1, #7
 8006ef6:	400a      	ands	r2, r1
 8006ef8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	0f5b      	lsrs	r3, r3, #29
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	251c      	movs	r5, #28
 8006f06:	197b      	adds	r3, r7, r5
 8006f08:	2107      	movs	r1, #7
 8006f0a:	400a      	ands	r2, r1
 8006f0c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f0e:	183b      	adds	r3, r7, r0
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	197a      	adds	r2, r7, r5
 8006f14:	7812      	ldrb	r2, [r2, #0]
 8006f16:	2114      	movs	r1, #20
 8006f18:	1879      	adds	r1, r7, r1
 8006f1a:	5c8a      	ldrb	r2, [r1, r2]
 8006f1c:	435a      	muls	r2, r3
 8006f1e:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f20:	197b      	adds	r3, r7, r5
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	250c      	movs	r5, #12
 8006f26:	197a      	adds	r2, r7, r5
 8006f28:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	f7f9 f974 	bl	8000218 <__divsi3>
 8006f30:	0003      	movs	r3, r0
 8006f32:	b299      	uxth	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	226a      	movs	r2, #106	; 0x6a
 8006f38:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f3a:	19bb      	adds	r3, r7, r6
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	193a      	adds	r2, r7, r4
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	2114      	movs	r1, #20
 8006f44:	1879      	adds	r1, r7, r1
 8006f46:	5c8a      	ldrb	r2, [r1, r2]
 8006f48:	435a      	muls	r2, r3
 8006f4a:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f4c:	193b      	adds	r3, r7, r4
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	197a      	adds	r2, r7, r5
 8006f52:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f54:	0019      	movs	r1, r3
 8006f56:	f7f9 f95f 	bl	8000218 <__divsi3>
 8006f5a:	0003      	movs	r3, r0
 8006f5c:	b299      	uxth	r1, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2268      	movs	r2, #104	; 0x68
 8006f62:	5299      	strh	r1, [r3, r2]
}
 8006f64:	46c0      	nop			; (mov r8, r8)
 8006f66:	46bd      	mov	sp, r7
 8006f68:	b009      	add	sp, #36	; 0x24
 8006f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f6c:	08008140 	.word	0x08008140
 8006f70:	08008148 	.word	0x08008148

08006f74 <HAL_TIM_PeriodElapsedCallback>:
#include "uart.h"
#include "stdio.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	if(htim == &htim14 ){
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d101      	bne.n	8006f88 <HAL_TIM_PeriodElapsedCallback+0x14>
		set_current_adc_raw();             // 获取温度传感器数据;
 8006f84:	f000 f8ae 	bl	80070e4 <set_current_adc_raw>
	}
}
 8006f88:	46c0      	nop			; (mov r8, r8)
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b002      	add	sp, #8
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000850 	.word	0x20000850

08006f94 <idle>:

/**
 * @brief  标准闲置程序使机器保持活动状态
 */
void idle(){
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
 	bat_manage();
 8006f98:	f000 f97e 	bl	8007298 <bat_manage>
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <setup>:
 * @brief  定时器初始化
 *         PWM初始化
  *                      开机检测
 */
void setup(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
	uart_init();
 8006fa8:	f000 f992 	bl	80072d0 <uart_init>
	HAL_TIM_Base_Start_IT(&htim14);  /* 定时器必须等待系统稳定后才能使能，涉及到 ADC 采集 */
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <setup+0x2c>)
 8006fae:	0018      	movs	r0, r3
 8006fb0:	f7fc fefe 	bl	8003db0 <HAL_TIM_Base_Start_IT>
	ws281x_init();
 8006fb4:	f000 fa0c 	bl	80073d0 <ws281x_init>

	ws2812_low_power_style();
 8006fb8:	f000 fb4e 	bl	8007658 <ws2812_low_power_style>

	HAL_Delay(1000);
 8006fbc:	23fa      	movs	r3, #250	; 0xfa
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f7fa fcd3 	bl	800196c <HAL_Delay>
	ws2812_blu_style();
 8006fc6:	f000 fb2d 	bl	8007624 <ws2812_blu_style>
}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	20000850 	.word	0x20000850

08006fd4 <loop>:

void loop(void)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	af00      	add	r7, sp, #0
	idle();
 8006fd8:	f7ff ffdc 	bl	8006f94 <idle>

	if(!battery_is_lowpower()){
 8006fdc:	f000 f96e 	bl	80072bc <battery_is_lowpower>
 8006fe0:	0003      	movs	r3, r0
 8006fe2:	001a      	movs	r2, r3
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4053      	eors	r3, r2
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d03c      	beq.n	8007068 <loop+0x94>
		if(USART_RX_STA&0x8000){
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <loop+0xa8>)
 8006ff0:	881b      	ldrh	r3, [r3, #0]
 8006ff2:	b21b      	sxth	r3, r3
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da3e      	bge.n	8007076 <loop+0xa2>
			switch(USART_RX_BUF[0]){
 8006ff8:	4b21      	ldr	r3, [pc, #132]	; (8007080 <loop+0xac>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	3b30      	subs	r3, #48	; 0x30
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d82e      	bhi.n	8007060 <loop+0x8c>
 8007002:	009a      	lsls	r2, r3, #2
 8007004:	4b1f      	ldr	r3, [pc, #124]	; (8007084 <loop+0xb0>)
 8007006:	18d3      	adds	r3, r2, r3
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	469f      	mov	pc, r3
				case '0':
					ws2812_blu_style();
 800700c:	f000 fb0a 	bl	8007624 <ws2812_blu_style>
					break;
 8007010:	e026      	b.n	8007060 <loop+0x8c>
				case '1':
					ws2812_org_style(); // 橙色
 8007012:	f000 fb14 	bl	800763e <ws2812_org_style>
					break;
 8007016:	e023      	b.n	8007060 <loop+0x8c>
				case '2':
					ws2812_blu_style();
 8007018:	f000 fb04 	bl	8007624 <ws2812_blu_style>
					break;
 800701c:	e020      	b.n	8007060 <loop+0x8c>
				case '3':
					ws2812_org_style(); // 橙色
 800701e:	f000 fb0e 	bl	800763e <ws2812_org_style>
					break;
 8007022:	e01d      	b.n	8007060 <loop+0x8c>
				case '8':  // nopower test
					ws2812_low_power_style();
 8007024:	f000 fb18 	bl	8007658 <ws2812_low_power_style>
					HAL_Delay(1000);  // 模式保持5s
 8007028:	23fa      	movs	r3, #250	; 0xfa
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	0018      	movs	r0, r3
 800702e:	f7fa fc9d 	bl	800196c <HAL_Delay>
					HAL_Delay(1000);
 8007032:	23fa      	movs	r3, #250	; 0xfa
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	0018      	movs	r0, r3
 8007038:	f7fa fc98 	bl	800196c <HAL_Delay>
					HAL_Delay(1000);
 800703c:	23fa      	movs	r3, #250	; 0xfa
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	0018      	movs	r0, r3
 8007042:	f7fa fc93 	bl	800196c <HAL_Delay>
					HAL_Delay(1000);
 8007046:	23fa      	movs	r3, #250	; 0xfa
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	0018      	movs	r0, r3
 800704c:	f7fa fc8e 	bl	800196c <HAL_Delay>
					HAL_Delay(1000);
 8007050:	23fa      	movs	r3, #250	; 0xfa
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	0018      	movs	r0, r3
 8007056:	f7fa fc89 	bl	800196c <HAL_Delay>
					ws2812_blu_style();
 800705a:	f000 fae3 	bl	8007624 <ws2812_blu_style>
					break;
 800705e:	46c0      	nop			; (mov r8, r8)
			};
			USART_RX_STA=0;
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <loop+0xa8>)
 8007062:	2200      	movs	r2, #0
 8007064:	801a      	strh	r2, [r3, #0]
		printf("9\r\n");
		ws2812_low_power_style();
		while(1);
	}

}
 8007066:	e006      	b.n	8007076 <loop+0xa2>
		printf("9\r\n");
 8007068:	4b07      	ldr	r3, [pc, #28]	; (8007088 <loop+0xb4>)
 800706a:	0018      	movs	r0, r3
 800706c:	f000 fbbe 	bl	80077ec <puts>
		ws2812_low_power_style();
 8007070:	f000 faf2 	bl	8007658 <ws2812_low_power_style>
		while(1);
 8007074:	e7fe      	b.n	8007074 <loop+0xa0>
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200000aa 	.word	0x200000aa
 8007080:	20000934 	.word	0x20000934
 8007084:	080082a0 	.word	0x080082a0
 8007088:	08008150 	.word	0x08008150

0800708c <adc_start_conversion>:
static int current_adc_raw = 0 ; //当前温度16次原始数据采集和
static bool adc_meas_ready = false;  //温度测量完成标志


void adc_start_conversion(uint32_t ch)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig ;

	sConfig.Channel = ch;
 8007094:	210c      	movs	r1, #12
 8007096:	187b      	adds	r3, r7, r1
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;                // 1个序列，序列1
 800709c:	187b      	adds	r3, r7, r1
 800709e:	2200      	movs	r2, #0
 80070a0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80070a2:	187b      	adds	r3, r7, r1
 80070a4:	2200      	movs	r2, #0
 80070a6:	609a      	str	r2, [r3, #8]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);          //通道配置
 80070a8:	187a      	adds	r2, r7, r1
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <adc_start_conversion+0x38>)
 80070ac:	0011      	movs	r1, r2
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7fa ffc0 	bl	8002034 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);                            // 启动ADC转换
 80070b4:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <adc_start_conversion+0x38>)
 80070b6:	0018      	movs	r0, r3
 80070b8:	f7fa ff62 	bl	8001f80 <HAL_ADC_Start>
}
 80070bc:	46c0      	nop			; (mov r8, r8)
 80070be:	46bd      	mov	sp, r7
 80070c0:	b006      	add	sp, #24
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000744 	.word	0x20000744

080070c8 <adc_get_conversion_value>:


uint16_t adc_get_conversion_value()
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
	// 原12位adc，右移2位
    //HAL_ADC_PollForConversion(&hadc1,10);           //轮询转换 10ms超时
	return (uint16_t)(HAL_ADC_GetValue(&hadc1)>>2);	        	// 返回一次ADC1规则组的转换结果;
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <adc_get_conversion_value+0x18>)
 80070ce:	0018      	movs	r0, r3
 80070d0:	f7fa ffa4 	bl	800201c <HAL_ADC_GetValue>
 80070d4:	0003      	movs	r3, r0
 80070d6:	089b      	lsrs	r3, r3, #2
 80070d8:	b29b      	uxth	r3, r3
}
 80070da:	0018      	movs	r0, r3
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	20000744 	.word	0x20000744

080070e4 <set_current_adc_raw>:


void set_current_adc_raw(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
	static uint8_t temp_count = 0;      // adc采样次数
	static unsigned long raw_adc_value = 0;  // 临时adc累计值
	static enum ADC_SENSOR_STATE adc_sensor_state = SensorsReady;  // adc传感器状态

	//*
	switch (adc_sensor_state){
 80070e8:	4b26      	ldr	r3, [pc, #152]	; (8007184 <set_current_adc_raw+0xa0>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	2b02      	cmp	r3, #2
 80070ee:	d033      	beq.n	8007158 <set_current_adc_raw+0x74>
 80070f0:	dc34      	bgt.n	800715c <set_current_adc_raw+0x78>
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <set_current_adc_raw+0x18>
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d005      	beq.n	8007106 <set_current_adc_raw+0x22>
				raw_adc_value = 0;
			}
			break;
		case SensorsReady: break;
		default:
			break;
 80070fa:	e02f      	b.n	800715c <set_current_adc_raw+0x78>
			adc_start_conversion(ADC_CHANNEL_1); //启动adc转换  BAT_ADC
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <set_current_adc_raw+0xa4>)
 80070fe:	0018      	movs	r0, r3
 8007100:	f7ff ffc4 	bl	800708c <adc_start_conversion>
		  break;
 8007104:	e02d      	b.n	8007162 <set_current_adc_raw+0x7e>
			raw_adc_value += adc_get_conversion_value();//获取adc值
 8007106:	f7ff ffdf 	bl	80070c8 <adc_get_conversion_value>
 800710a:	0003      	movs	r3, r0
 800710c:	001a      	movs	r2, r3
 800710e:	4b1f      	ldr	r3, [pc, #124]	; (800718c <set_current_adc_raw+0xa8>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	18d2      	adds	r2, r2, r3
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <set_current_adc_raw+0xa8>)
 8007116:	601a      	str	r2, [r3, #0]
			if (++temp_count >= OVERSAMPLENR) {
 8007118:	4b1d      	ldr	r3, [pc, #116]	; (8007190 <set_current_adc_raw+0xac>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	3301      	adds	r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	4b1b      	ldr	r3, [pc, #108]	; (8007190 <set_current_adc_raw+0xac>)
 8007122:	701a      	strb	r2, [r3, #0]
 8007124:	4b1a      	ldr	r3, [pc, #104]	; (8007190 <set_current_adc_raw+0xac>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b0f      	cmp	r3, #15
 800712a:	d919      	bls.n	8007160 <set_current_adc_raw+0x7c>
				temp_count = 0;
 800712c:	4b18      	ldr	r3, [pc, #96]	; (8007190 <set_current_adc_raw+0xac>)
 800712e:	2200      	movs	r2, #0
 8007130:	701a      	strb	r2, [r3, #0]
				if (!adc_meas_ready) {
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <set_current_adc_raw+0xb0>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2201      	movs	r2, #1
 8007138:	4053      	eors	r3, r2
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <set_current_adc_raw+0x6c>
					current_adc_raw = raw_adc_value;
 8007140:	4b12      	ldr	r3, [pc, #72]	; (800718c <set_current_adc_raw+0xa8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	001a      	movs	r2, r3
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <set_current_adc_raw+0xb4>)
 8007148:	601a      	str	r2, [r3, #0]
					adc_meas_ready = true;  // 读取时会设为false
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <set_current_adc_raw+0xb0>)
 800714c:	2201      	movs	r2, #1
 800714e:	701a      	strb	r2, [r3, #0]
				raw_adc_value = 0;
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <set_current_adc_raw+0xa8>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]
			break;
 8007156:	e003      	b.n	8007160 <set_current_adc_raw+0x7c>
		case SensorsReady: break;
 8007158:	46c0      	nop			; (mov r8, r8)
 800715a:	e002      	b.n	8007162 <set_current_adc_raw+0x7e>
			break;
 800715c:	46c0      	nop			; (mov r8, r8)
 800715e:	e000      	b.n	8007162 <set_current_adc_raw+0x7e>
			break;
 8007160:	46c0      	nop			; (mov r8, r8)
	}

    // Go to the next state, up to SensorsReady
	adc_sensor_state = (enum ADC_SENSOR_STATE)((adc_sensor_state) + 1);
 8007162:	4b08      	ldr	r3, [pc, #32]	; (8007184 <set_current_adc_raw+0xa0>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	3301      	adds	r3, #1
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <set_current_adc_raw+0xa0>)
 800716c:	701a      	strb	r2, [r3, #0]
	if (adc_sensor_state >= SensorsReady) adc_sensor_state = (enum ADC_SENSOR_STATE)0;
 800716e:	4b05      	ldr	r3, [pc, #20]	; (8007184 <set_current_adc_raw+0xa0>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d902      	bls.n	800717c <set_current_adc_raw+0x98>
 8007176:	4b03      	ldr	r3, [pc, #12]	; (8007184 <set_current_adc_raw+0xa0>)
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]
	//*/

}
 800717c:	46c0      	nop			; (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	46c0      	nop			; (mov r8, r8)
 8007184:	20000009 	.word	0x20000009
 8007188:	04000002 	.word	0x04000002
 800718c:	2000009c 	.word	0x2000009c
 8007190:	200000a0 	.word	0x200000a0
 8007194:	20000098 	.word	0x20000098
 8007198:	20000094 	.word	0x20000094

0800719c <get_current_adc_raw>:


int get_current_adc_raw()
{
 800719c:	b580      	push	{r7, lr}
 800719e:	af00      	add	r7, sp, #0
	return current_adc_raw;
 80071a0:	4b02      	ldr	r3, [pc, #8]	; (80071ac <get_current_adc_raw+0x10>)
 80071a2:	681b      	ldr	r3, [r3, #0]
}
 80071a4:	0018      	movs	r0, r3
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	46c0      	nop			; (mov r8, r8)
 80071ac:	20000094 	.word	0x20000094

080071b0 <get_adc_meas_ready>:


bool get_adc_meas_ready()
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	af00      	add	r7, sp, #0
	return adc_meas_ready;
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <get_adc_meas_ready+0x10>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
}
 80071b8:	0018      	movs	r0, r3
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	46c0      	nop			; (mov r8, r8)
 80071c0:	20000098 	.word	0x20000098

080071c4 <set_adc_meas_noready>:


void set_adc_meas_noready()
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
	adc_meas_ready = false;
 80071c8:	4b02      	ldr	r3, [pc, #8]	; (80071d4 <set_adc_meas_noready+0x10>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	701a      	strb	r2, [r3, #0]
}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000098 	.word	0x20000098

080071d8 <bat_update_power_from_raw>:
 * @note 电池在充、放电时电压与容量的对应关系是不同的
  *             电池容量比例  100    [80-100)     [ 40-80)        [5-40)     [5-0]（%）
 */
static uint16_t no_power_time = 0;
void bat_update_power_from_raw(void)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	af00      	add	r7, sp, #0
	static uint8_t update_count =  0;
	static float raw_temp = 0;
	static float raw =1024;

	raw_temp  += (float) get_current_adc_raw()/16;
 80071dc:	f7ff ffde 	bl	800719c <get_current_adc_raw>
 80071e0:	0003      	movs	r3, r0
 80071e2:	0018      	movs	r0, r3
 80071e4:	f7f9 fd90 	bl	8000d08 <__aeabi_i2f>
 80071e8:	1c03      	adds	r3, r0, #0
 80071ea:	2183      	movs	r1, #131	; 0x83
 80071ec:	05c9      	lsls	r1, r1, #23
 80071ee:	1c18      	adds	r0, r3, #0
 80071f0:	f7f9 fbc0 	bl	8000974 <__aeabi_fdiv>
 80071f4:	1c03      	adds	r3, r0, #0
 80071f6:	1c1a      	adds	r2, r3, #0
 80071f8:	4b20      	ldr	r3, [pc, #128]	; (800727c <bat_update_power_from_raw+0xa4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	1c19      	adds	r1, r3, #0
 80071fe:	1c10      	adds	r0, r2, #0
 8007200:	f7f9 fa1c 	bl	800063c <__aeabi_fadd>
 8007204:	1c03      	adds	r3, r0, #0
 8007206:	1c1a      	adds	r2, r3, #0
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <bat_update_power_from_raw+0xa4>)
 800720a:	601a      	str	r2, [r3, #0]

	if((++update_count) >= BAT_UPDATE_POWER_TIME){
 800720c:	4b1c      	ldr	r3, [pc, #112]	; (8007280 <bat_update_power_from_raw+0xa8>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	b2da      	uxtb	r2, r3
 8007214:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <bat_update_power_from_raw+0xa8>)
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	4b19      	ldr	r3, [pc, #100]	; (8007280 <bat_update_power_from_raw+0xa8>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b13      	cmp	r3, #19
 800721e:	d928      	bls.n	8007272 <bat_update_power_from_raw+0x9a>
		raw = raw_temp/BAT_UPDATE_POWER_TIME;
 8007220:	4b16      	ldr	r3, [pc, #88]	; (800727c <bat_update_power_from_raw+0xa4>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4917      	ldr	r1, [pc, #92]	; (8007284 <bat_update_power_from_raw+0xac>)
 8007226:	1c18      	adds	r0, r3, #0
 8007228:	f7f9 fba4 	bl	8000974 <__aeabi_fdiv>
 800722c:	1c03      	adds	r3, r0, #0
 800722e:	1c1a      	adds	r2, r3, #0
 8007230:	4b15      	ldr	r3, [pc, #84]	; (8007288 <bat_update_power_from_raw+0xb0>)
 8007232:	601a      	str	r2, [r3, #0]
		raw_temp = 0;
 8007234:	4b11      	ldr	r3, [pc, #68]	; (800727c <bat_update_power_from_raw+0xa4>)
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
		update_count = 0;
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <bat_update_power_from_raw+0xa8>)
 800723c:	2200      	movs	r2, #0
 800723e:	701a      	strb	r2, [r3, #0]
	    if(raw < (float)BAT_LOW_POWER_RAW){
 8007240:	4b11      	ldr	r3, [pc, #68]	; (8007288 <bat_update_power_from_raw+0xb0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4911      	ldr	r1, [pc, #68]	; (800728c <bat_update_power_from_raw+0xb4>)
 8007246:	1c18      	adds	r0, r3, #0
 8007248:	f7f9 f8e4 	bl	8000414 <__aeabi_fcmplt>
 800724c:	1e03      	subs	r3, r0, #0
 800724e:	d00d      	beq.n	800726c <bat_update_power_from_raw+0x94>
	    	no_power_time++;
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <bat_update_power_from_raw+0xb8>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <bat_update_power_from_raw+0xb8>)
 800725a:	801a      	strh	r2, [r3, #0]
	    	if(no_power_time >= 200)
 800725c:	4b0c      	ldr	r3, [pc, #48]	; (8007290 <bat_update_power_from_raw+0xb8>)
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	2bc7      	cmp	r3, #199	; 0xc7
 8007262:	d906      	bls.n	8007272 <bat_update_power_from_raw+0x9a>
	    		islowpower = true;
 8007264:	4b0b      	ldr	r3, [pc, #44]	; (8007294 <bat_update_power_from_raw+0xbc>)
 8007266:	2201      	movs	r2, #1
 8007268:	701a      	strb	r2, [r3, #0]
 800726a:	e002      	b.n	8007272 <bat_update_power_from_raw+0x9a>
	    }
	    else
	    	no_power_time=0;
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <bat_update_power_from_raw+0xb8>)
 800726e:	2200      	movs	r2, #0
 8007270:	801a      	strh	r2, [r3, #0]
	}

	set_adc_meas_noready();
 8007272:	f7ff ffa7 	bl	80071c4 <set_adc_meas_noready>
}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200000a4 	.word	0x200000a4
 8007280:	200000a8 	.word	0x200000a8
 8007284:	41a00000 	.word	0x41a00000
 8007288:	2000000c 	.word	0x2000000c
 800728c:	442d0000 	.word	0x442d0000
 8007290:	200000a2 	.word	0x200000a2
 8007294:	200000a1 	.word	0x200000a1

08007298 <bat_manage>:

void bat_manage()
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
    if(get_adc_meas_ready() != true)   // better readability
 800729c:	f7ff ff88 	bl	80071b0 <get_adc_meas_ready>
 80072a0:	0003      	movs	r3, r0
 80072a2:	001a      	movs	r2, r3
 80072a4:	2301      	movs	r3, #1
 80072a6:	4053      	eors	r3, r2
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <bat_manage+0x1c>
        return;
    bat_update_power_from_raw();    // 更新当前电量
 80072ae:	f7ff ff93 	bl	80071d8 <bat_update_power_from_raw>
 80072b2:	e000      	b.n	80072b6 <bat_manage+0x1e>
        return;
 80072b4:	46c0      	nop			; (mov r8, r8)
}
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
	...

080072bc <battery_is_lowpower>:

bool battery_is_lowpower()
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
	return islowpower;
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <battery_is_lowpower+0x10>)
 80072c2:	781b      	ldrb	r3, [r3, #0]

}
 80072c4:	0018      	movs	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	200000a1 	.word	0x200000a1

080072d0 <uart_init>:

/**
  * @brief 串口初始化，启动接收中断
  */
void uart_init()
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1,(uint8_t *)aRxBuffer,1);  //开启中断
 80072d4:	4904      	ldr	r1, [pc, #16]	; (80072e8 <uart_init+0x18>)
 80072d6:	4b05      	ldr	r3, [pc, #20]	; (80072ec <uart_init+0x1c>)
 80072d8:	2201      	movs	r2, #1
 80072da:	0018      	movs	r0, r3
 80072dc:	f7fe fa25 	bl	800572a <HAL_UART_Receive_IT>
}
 80072e0:	46c0      	nop			; (mov r8, r8)
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	20000930 	.word	0x20000930
 80072ec:	2000089c 	.word	0x2000089c

080072f0 <HAL_UART_RxCpltCallback>:

/**
  * @brief 串口接收中断，每接收一个字节中断一次
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	if(UartHandle->Instance == USART1){   //判断时那种中断
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a25      	ldr	r2, [pc, #148]	; (8007394 <HAL_UART_RxCpltCallback+0xa4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d13d      	bne.n	800737e <HAL_UART_RxCpltCallback+0x8e>

		if((USART_RX_STA&0x8000)==0)//接收未完成
 8007302:	4b25      	ldr	r3, [pc, #148]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	b21b      	sxth	r3, r3
 8007308:	2b00      	cmp	r3, #0
 800730a:	db38      	blt.n	800737e <HAL_UART_RxCpltCallback+0x8e>
		{
			if(USART_RX_STA&0x4000)//接收到了0x0d
 800730c:	4b22      	ldr	r3, [pc, #136]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	001a      	movs	r2, r3
 8007312:	2380      	movs	r3, #128	; 0x80
 8007314:	01db      	lsls	r3, r3, #7
 8007316:	4013      	ands	r3, r2
 8007318:	d00f      	beq.n	800733a <HAL_UART_RxCpltCallback+0x4a>
			{
				if(aRxBuffer[0]!=0x0a)USART_RX_STA=0;//接收错误,重新开始
 800731a:	4b20      	ldr	r3, [pc, #128]	; (800739c <HAL_UART_RxCpltCallback+0xac>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b0a      	cmp	r3, #10
 8007320:	d003      	beq.n	800732a <HAL_UART_RxCpltCallback+0x3a>
 8007322:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007324:	2200      	movs	r2, #0
 8007326:	801a      	strh	r2, [r3, #0]
 8007328:	e029      	b.n	800737e <HAL_UART_RxCpltCallback+0x8e>
				else USART_RX_STA|=0x8000;	//接收完成了
 800732a:	4b1b      	ldr	r3, [pc, #108]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 800732c:	881b      	ldrh	r3, [r3, #0]
 800732e:	4a1c      	ldr	r2, [pc, #112]	; (80073a0 <HAL_UART_RxCpltCallback+0xb0>)
 8007330:	4313      	orrs	r3, r2
 8007332:	b29a      	uxth	r2, r3
 8007334:	4b18      	ldr	r3, [pc, #96]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	e021      	b.n	800737e <HAL_UART_RxCpltCallback+0x8e>
			}
			else //还没收到0X0D
			{
				if(aRxBuffer[0]==0x0d)USART_RX_STA|=0x4000;
 800733a:	4b18      	ldr	r3, [pc, #96]	; (800739c <HAL_UART_RxCpltCallback+0xac>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b0d      	cmp	r3, #13
 8007340:	d108      	bne.n	8007354 <HAL_UART_RxCpltCallback+0x64>
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	2280      	movs	r2, #128	; 0x80
 8007348:	01d2      	lsls	r2, r2, #7
 800734a:	4313      	orrs	r3, r2
 800734c:	b29a      	uxth	r2, r3
 800734e:	4b12      	ldr	r3, [pc, #72]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007350:	801a      	strh	r2, [r3, #0]
 8007352:	e014      	b.n	800737e <HAL_UART_RxCpltCallback+0x8e>
				else
				{
					USART_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8007354:	4b10      	ldr	r3, [pc, #64]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	049b      	lsls	r3, r3, #18
 800735a:	0c9b      	lsrs	r3, r3, #18
 800735c:	4a0f      	ldr	r2, [pc, #60]	; (800739c <HAL_UART_RxCpltCallback+0xac>)
 800735e:	7811      	ldrb	r1, [r2, #0]
 8007360:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <HAL_UART_RxCpltCallback+0xb4>)
 8007362:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8007364:	4b0c      	ldr	r3, [pc, #48]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007366:	881b      	ldrh	r3, [r3, #0]
 8007368:	3301      	adds	r3, #1
 800736a:	b29a      	uxth	r2, r3
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 800736e:	801a      	strh	r2, [r3, #0]
					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收
 8007370:	4b09      	ldr	r3, [pc, #36]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 8007372:	881b      	ldrh	r3, [r3, #0]
 8007374:	2bc7      	cmp	r3, #199	; 0xc7
 8007376:	d902      	bls.n	800737e <HAL_UART_RxCpltCallback+0x8e>
 8007378:	4b07      	ldr	r3, [pc, #28]	; (8007398 <HAL_UART_RxCpltCallback+0xa8>)
 800737a:	2200      	movs	r2, #0
 800737c:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
	HAL_UART_Receive_IT(&huart1,(uint8_t *)aRxBuffer,1); // 再次开启中断
 800737e:	4907      	ldr	r1, [pc, #28]	; (800739c <HAL_UART_RxCpltCallback+0xac>)
 8007380:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <HAL_UART_RxCpltCallback+0xb8>)
 8007382:	2201      	movs	r2, #1
 8007384:	0018      	movs	r0, r3
 8007386:	f7fe f9d0 	bl	800572a <HAL_UART_Receive_IT>
}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	46bd      	mov	sp, r7
 800738e:	b002      	add	sp, #8
 8007390:	bd80      	pop	{r7, pc}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	40013800 	.word	0x40013800
 8007398:	200000aa 	.word	0x200000aa
 800739c:	20000930 	.word	0x20000930
 80073a0:	ffff8000 	.word	0xffff8000
 80073a4:	20000934 	.word	0x20000934
 80073a8:	2000089c 	.word	0x2000089c

080073ac <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)  /* 防止重定义，具体为什么会用到GNUC我以为不知道*/
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,1000);
 80073b4:	23fa      	movs	r3, #250	; 0xfa
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	1d39      	adds	r1, r7, #4
 80073ba:	4804      	ldr	r0, [pc, #16]	; (80073cc <__io_putchar+0x20>)
 80073bc:	2201      	movs	r2, #1
 80073be:	f7fe f909 	bl	80055d4 <HAL_UART_Transmit>
     return ch;
 80073c2:	687b      	ldr	r3, [r7, #4]
}
 80073c4:	0018      	movs	r0, r3
 80073c6:	46bd      	mov	sp, r7
 80073c8:	b002      	add	sp, #8
 80073ca:	bd80      	pop	{r7, pc}
 80073cc:	2000089c 	.word	0x2000089c

080073d0 <ws281x_init>:
/**
 * @brief: 初始化函数，所有灯熄灭
 * @note: 上电瞬间、灯带会显示紊乱，需要先主动熄灭
 */
void ws281x_init(void)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	af00      	add	r7, sp, #0
	ws281x_close_all();
 80073d4:	f000 f804 	bl	80073e0 <ws281x_close_all>
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <ws281x_close_all>:
/**
 * @brief: 所有灯熄灭
 * @note: 
 */
void ws281x_close_all()
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0

	for(int j=DELAY_LEN;j<ARRAY_LEN;j++)
 80073e6:	23f0      	movs	r3, #240	; 0xf0
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	e007      	b.n	80073fc <ws281x_close_all+0x1c>
		BUF_DMA[j] = LED_0_PULSE;
 80073ec:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <ws281x_close_all+0x44>)
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	0052      	lsls	r2, r2, #1
 80073f2:	2119      	movs	r1, #25
 80073f4:	52d1      	strh	r1, [r2, r3]
	for(int j=DELAY_LEN;j<ARRAY_LEN;j++)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3301      	adds	r3, #1
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	23d2      	movs	r3, #210	; 0xd2
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	429a      	cmp	r2, r3
 8007404:	dbf2      	blt.n	80073ec <ws281x_close_all+0xc>

	HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t *)BUF_DMA,ARRAY_LEN);
 8007406:	23d2      	movs	r3, #210	; 0xd2
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4a06      	ldr	r2, [pc, #24]	; (8007424 <ws281x_close_all+0x44>)
 800740c:	4806      	ldr	r0, [pc, #24]	; (8007428 <ws281x_close_all+0x48>)
 800740e:	2104      	movs	r1, #4
 8007410:	f7fc fd82 	bl	8003f18 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(10);
 8007414:	200a      	movs	r0, #10
 8007416:	f7fa faa9 	bl	800196c <HAL_Delay>
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}
 8007422:	46c0      	nop			; (mov r8, r8)
 8007424:	200000ac 	.word	0x200000ac
 8007428:	200007a8 	.word	0x200007a8

0800742c <ws281x_set_Pixe_rgb_buf>:
 * @note: 仅设置到buf缓存中，并不立即生效
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @param {uint16_t} posX 灯编号
 */
void ws281x_set_Pixe_rgb_buf(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 800742c:	b5b0      	push	{r4, r5, r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	0005      	movs	r5, r0
 8007434:	000c      	movs	r4, r1
 8007436:	0010      	movs	r0, r2
 8007438:	0019      	movs	r1, r3
 800743a:	1dfb      	adds	r3, r7, #7
 800743c:	1c2a      	adds	r2, r5, #0
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	1dbb      	adds	r3, r7, #6
 8007442:	1c22      	adds	r2, r4, #0
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	1d7b      	adds	r3, r7, #5
 8007448:	1c02      	adds	r2, r0, #0
 800744a:	701a      	strb	r2, [r3, #0]
 800744c:	1cbb      	adds	r3, r7, #2
 800744e:	1c0a      	adds	r2, r1, #0
 8007450:	801a      	strh	r2, [r3, #0]
	uint32_t GRBcolor = Gpixel << 16 | Rpixel << 8 | Bpixel;
 8007452:	1dbb      	adds	r3, r7, #6
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	041a      	lsls	r2, r3, #16
 8007458:	1dfb      	adds	r3, r7, #7
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	431a      	orrs	r2, r3
 8007460:	1d7b      	adds	r3, r7, #5
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	4313      	orrs	r3, r2
 8007466:	60bb      	str	r3, [r7, #8]
	for(u8 i=0;i<24;i++)
 8007468:	230f      	movs	r3, #15
 800746a:	18fb      	adds	r3, r7, r3
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e01f      	b.n	80074b2 <ws281x_set_Pixe_rgb_buf+0x86>
	{
		BUF_DMA[DELAY_LEN+24 * posX + i] = (((GRBcolor << i) & 0X800000) ? LED_1_PULSE : LED_0_PULSE);
 8007472:	230f      	movs	r3, #15
 8007474:	18fb      	adds	r3, r7, r3
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	409a      	lsls	r2, r3
 800747c:	2380      	movs	r3, #128	; 0x80
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	4013      	ands	r3, r2
 8007482:	d001      	beq.n	8007488 <ws281x_set_Pixe_rgb_buf+0x5c>
 8007484:	2136      	movs	r1, #54	; 0x36
 8007486:	e000      	b.n	800748a <ws281x_set_Pixe_rgb_buf+0x5e>
 8007488:	2119      	movs	r1, #25
 800748a:	1cbb      	adds	r3, r7, #2
 800748c:	881a      	ldrh	r2, [r3, #0]
 800748e:	0013      	movs	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	189b      	adds	r3, r3, r2
 8007494:	00db      	lsls	r3, r3, #3
 8007496:	33f0      	adds	r3, #240	; 0xf0
 8007498:	001a      	movs	r2, r3
 800749a:	200f      	movs	r0, #15
 800749c:	183b      	adds	r3, r7, r0
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	18d2      	adds	r2, r2, r3
 80074a2:	4b09      	ldr	r3, [pc, #36]	; (80074c8 <ws281x_set_Pixe_rgb_buf+0x9c>)
 80074a4:	0052      	lsls	r2, r2, #1
 80074a6:	52d1      	strh	r1, [r2, r3]
	for(u8 i=0;i<24;i++)
 80074a8:	183b      	adds	r3, r7, r0
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	183b      	adds	r3, r7, r0
 80074ae:	3201      	adds	r2, #1
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	230f      	movs	r3, #15
 80074b4:	18fb      	adds	r3, r7, r3
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	2b17      	cmp	r3, #23
 80074ba:	d9da      	bls.n	8007472 <ws281x_set_Pixe_rgb_buf+0x46>
	}
}
 80074bc:	46c0      	nop			; (mov r8, r8)
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	46bd      	mov	sp, r7
 80074c2:	b004      	add	sp, #16
 80074c4:	bdb0      	pop	{r4, r5, r7, pc}
 80074c6:	46c0      	nop			; (mov r8, r8)
 80074c8:	200000ac 	.word	0x200000ac

080074cc <ws281x_set_group_all_rgb_buf>:
 * @note: 仅设置到buf缓存中，并不立即生效
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @detail:
 */
void ws281x_set_group_all_rgb_buf(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel)
{
 80074cc:	b590      	push	{r4, r7, lr}
 80074ce:	b09d      	sub	sp, #116	; 0x74
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	0004      	movs	r4, r0
 80074d4:	0008      	movs	r0, r1
 80074d6:	0011      	movs	r1, r2
 80074d8:	1dfb      	adds	r3, r7, #7
 80074da:	1c22      	adds	r2, r4, #0
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	1c02      	adds	r2, r0, #0
 80074e2:	701a      	strb	r2, [r3, #0]
 80074e4:	1d7b      	adds	r3, r7, #5
 80074e6:	1c0a      	adds	r2, r1, #0
 80074e8:	701a      	strb	r2, [r3, #0]
	uint32_t BUF_DMA_TEMP[24];
	uint32_t GRBcolor = Gpixel << 16 | Rpixel << 8 | Bpixel;
 80074ea:	1dbb      	adds	r3, r7, #6
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	041a      	lsls	r2, r3, #16
 80074f0:	1dfb      	adds	r3, r7, #7
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	021b      	lsls	r3, r3, #8
 80074f6:	431a      	orrs	r2, r3
 80074f8:	1d7b      	adds	r3, r7, #5
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	66bb      	str	r3, [r7, #104]	; 0x68
	for(u8 i=0;i<24;i++)
 8007500:	236f      	movs	r3, #111	; 0x6f
 8007502:	18fb      	adds	r3, r7, r3
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
 8007508:	e017      	b.n	800753a <ws281x_set_group_all_rgb_buf+0x6e>
	{
		BUF_DMA_TEMP[i] = (((GRBcolor << i) & 0X800000) ? LED_1_PULSE : LED_0_PULSE);
 800750a:	236f      	movs	r3, #111	; 0x6f
 800750c:	18fb      	adds	r3, r7, r3
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007512:	409a      	lsls	r2, r3
 8007514:	2380      	movs	r3, #128	; 0x80
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4013      	ands	r3, r2
 800751a:	d001      	beq.n	8007520 <ws281x_set_group_all_rgb_buf+0x54>
 800751c:	2336      	movs	r3, #54	; 0x36
 800751e:	e000      	b.n	8007522 <ws281x_set_group_all_rgb_buf+0x56>
 8007520:	2319      	movs	r3, #25
 8007522:	206f      	movs	r0, #111	; 0x6f
 8007524:	183a      	adds	r2, r7, r0
 8007526:	7811      	ldrb	r1, [r2, #0]
 8007528:	2208      	movs	r2, #8
 800752a:	18ba      	adds	r2, r7, r2
 800752c:	0089      	lsls	r1, r1, #2
 800752e:	508b      	str	r3, [r1, r2]
	for(u8 i=0;i<24;i++)
 8007530:	183b      	adds	r3, r7, r0
 8007532:	781a      	ldrb	r2, [r3, #0]
 8007534:	183b      	adds	r3, r7, r0
 8007536:	3201      	adds	r2, #1
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	236f      	movs	r3, #111	; 0x6f
 800753c:	18fb      	adds	r3, r7, r3
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	2b17      	cmp	r3, #23
 8007542:	d9e2      	bls.n	800750a <ws281x_set_group_all_rgb_buf+0x3e>
	}

	for(u8 i=0;i<LED_NUM;i++){
 8007544:	236e      	movs	r3, #110	; 0x6e
 8007546:	18fb      	adds	r3, r7, r3
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
 800754c:	e02b      	b.n	80075a6 <ws281x_set_group_all_rgb_buf+0xda>
		for (u8 j = 0; j < 24; j++){
 800754e:	236d      	movs	r3, #109	; 0x6d
 8007550:	18fb      	adds	r3, r7, r3
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	e01b      	b.n	8007590 <ws281x_set_group_all_rgb_buf+0xc4>
			BUF_DMA[DELAY_LEN+i * 24 + j] = BUF_DMA_TEMP[j];
 8007558:	206d      	movs	r0, #109	; 0x6d
 800755a:	183b      	adds	r3, r7, r0
 800755c:	781a      	ldrb	r2, [r3, #0]
 800755e:	2308      	movs	r3, #8
 8007560:	18fb      	adds	r3, r7, r3
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	58d1      	ldr	r1, [r2, r3]
 8007566:	236e      	movs	r3, #110	; 0x6e
 8007568:	18fb      	adds	r3, r7, r3
 800756a:	781a      	ldrb	r2, [r3, #0]
 800756c:	0013      	movs	r3, r2
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	189b      	adds	r3, r3, r2
 8007572:	00db      	lsls	r3, r3, #3
 8007574:	33f0      	adds	r3, #240	; 0xf0
 8007576:	001a      	movs	r2, r3
 8007578:	183b      	adds	r3, r7, r0
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	18d2      	adds	r2, r2, r3
 800757e:	b289      	uxth	r1, r1
 8007580:	4b0e      	ldr	r3, [pc, #56]	; (80075bc <ws281x_set_group_all_rgb_buf+0xf0>)
 8007582:	0052      	lsls	r2, r2, #1
 8007584:	52d1      	strh	r1, [r2, r3]
		for (u8 j = 0; j < 24; j++){
 8007586:	183b      	adds	r3, r7, r0
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	183b      	adds	r3, r7, r0
 800758c:	3201      	adds	r2, #1
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	236d      	movs	r3, #109	; 0x6d
 8007592:	18fb      	adds	r3, r7, r3
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	2b17      	cmp	r3, #23
 8007598:	d9de      	bls.n	8007558 <ws281x_set_group_all_rgb_buf+0x8c>
	for(u8 i=0;i<LED_NUM;i++){
 800759a:	216e      	movs	r1, #110	; 0x6e
 800759c:	187b      	adds	r3, r7, r1
 800759e:	781a      	ldrb	r2, [r3, #0]
 80075a0:	187b      	adds	r3, r7, r1
 80075a2:	3201      	adds	r2, #1
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	236e      	movs	r3, #110	; 0x6e
 80075a8:	18fb      	adds	r3, r7, r3
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b18      	cmp	r3, #24
 80075ae:	d9ce      	bls.n	800754e <ws281x_set_group_all_rgb_buf+0x82>
		}
	}
}
 80075b0:	46c0      	nop			; (mov r8, r8)
 80075b2:	46c0      	nop			; (mov r8, r8)
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b01d      	add	sp, #116	; 0x74
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	200000ac 	.word	0x200000ac

080075c0 <ws281x_light>:
 * @note:
 * @detail:
 */

void ws281x_light()
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3,TIM_CHANNEL_2,(uint32_t *)BUF_DMA,ARRAY_LEN);
 80075c4:	23d2      	movs	r3, #210	; 0xd2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4a05      	ldr	r2, [pc, #20]	; (80075e0 <ws281x_light+0x20>)
 80075ca:	4806      	ldr	r0, [pc, #24]	; (80075e4 <ws281x_light+0x24>)
 80075cc:	2104      	movs	r1, #4
 80075ce:	f7fc fca3 	bl	8003f18 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(10);
 80075d2:	200a      	movs	r0, #10
 80075d4:	f7fa f9ca 	bl	800196c <HAL_Delay>
}
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	200000ac 	.word	0x200000ac
 80075e4:	200007a8 	.word	0x200007a8

080075e8 <ws281x_set_all_rgb_buf_light>:
 * @note:
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @detail:
 */
void ws281x_set_all_rgb_buf_light(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel)
{
 80075e8:	b590      	push	{r4, r7, lr}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	0004      	movs	r4, r0
 80075f0:	0008      	movs	r0, r1
 80075f2:	0011      	movs	r1, r2
 80075f4:	1dfb      	adds	r3, r7, #7
 80075f6:	1c22      	adds	r2, r4, #0
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	1dbb      	adds	r3, r7, #6
 80075fc:	1c02      	adds	r2, r0, #0
 80075fe:	701a      	strb	r2, [r3, #0]
 8007600:	1d7b      	adds	r3, r7, #5
 8007602:	1c0a      	adds	r2, r1, #0
 8007604:	701a      	strb	r2, [r3, #0]
	ws281x_set_group_all_rgb_buf(Rpixel , Gpixel, Bpixel);
 8007606:	1d7b      	adds	r3, r7, #5
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	1dbb      	adds	r3, r7, #6
 800760c:	7819      	ldrb	r1, [r3, #0]
 800760e:	1dfb      	adds	r3, r7, #7
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	0018      	movs	r0, r3
 8007614:	f7ff ff5a 	bl	80074cc <ws281x_set_group_all_rgb_buf>
	ws281x_light();
 8007618:	f7ff ffd2 	bl	80075c0 <ws281x_light>
}
 800761c:	46c0      	nop			; (mov r8, r8)
 800761e:	46bd      	mov	sp, r7
 8007620:	b003      	add	sp, #12
 8007622:	bd90      	pop	{r4, r7, pc}

08007624 <ws2812_blu_style>:
 * @brief: 灯带全为蓝色，对应动作：远程模式
 * @note:
 * @detail:
 */
void ws2812_blu_style()
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
	ws281x_set_all_rgb_buf_light(BLU_COLOR_R, BLU_COLOR_G, BLU_COLOR_B);
 8007628:	227e      	movs	r2, #126	; 0x7e
 800762a:	2100      	movs	r1, #0
 800762c:	2000      	movs	r0, #0
 800762e:	f7ff ffdb 	bl	80075e8 <ws281x_set_all_rgb_buf_light>
	HAL_Delay(10);
 8007632:	200a      	movs	r0, #10
 8007634:	f7fa f99a 	bl	800196c <HAL_Delay>
}
 8007638:	46c0      	nop			; (mov r8, r8)
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <ws2812_org_style>:
 * @brief: 灯带全为橙色，对应动作：近程模式
 * @note:
 * @detail:
 */
void ws2812_org_style()
{
 800763e:	b580      	push	{r7, lr}
 8007640:	af00      	add	r7, sp, #0
	ws281x_set_all_rgb_buf_light(ORG_COLOR_R, ORG_COLOR_G, ORG_COLOR_B);
 8007642:	2200      	movs	r2, #0
 8007644:	2128      	movs	r1, #40	; 0x28
 8007646:	207e      	movs	r0, #126	; 0x7e
 8007648:	f7ff ffce 	bl	80075e8 <ws281x_set_all_rgb_buf_light>
	HAL_Delay(10);
 800764c:	200a      	movs	r0, #10
 800764e:	f7fa f98d 	bl	800196c <HAL_Delay>
}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <ws2812_low_power_style>:
 * @brief: 灯带从尾到首逐个变为红色，对应动作：电池没电
 * @note:
 * @detail:
 */
void ws2812_low_power_style()
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
	for(u8 i=0;i<LED_NUM;i++){
 800765e:	1dfb      	adds	r3, r7, #7
 8007660:	2200      	movs	r2, #0
 8007662:	701a      	strb	r2, [r3, #0]
 8007664:	e014      	b.n	8007690 <ws2812_low_power_style+0x38>
		ws281x_set_Pixe_rgb_buf(RED_COLOR_R,RED_COLOR_G,RED_COLOR_B,LED_NUM-i-1);
 8007666:	1dfb      	adds	r3, r7, #7
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	b29b      	uxth	r3, r3
 800766c:	2218      	movs	r2, #24
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	b29b      	uxth	r3, r3
 8007672:	2200      	movs	r2, #0
 8007674:	2100      	movs	r1, #0
 8007676:	207e      	movs	r0, #126	; 0x7e
 8007678:	f7ff fed8 	bl	800742c <ws281x_set_Pixe_rgb_buf>
		ws281x_light();
 800767c:	f7ff ffa0 	bl	80075c0 <ws281x_light>
		HAL_Delay(10);
 8007680:	200a      	movs	r0, #10
 8007682:	f7fa f973 	bl	800196c <HAL_Delay>
	for(u8 i=0;i<LED_NUM;i++){
 8007686:	1dfb      	adds	r3, r7, #7
 8007688:	781a      	ldrb	r2, [r3, #0]
 800768a:	1dfb      	adds	r3, r7, #7
 800768c:	3201      	adds	r2, #1
 800768e:	701a      	strb	r2, [r3, #0]
 8007690:	1dfb      	adds	r3, r7, #7
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b18      	cmp	r3, #24
 8007696:	d9e6      	bls.n	8007666 <ws2812_low_power_style+0xe>
	}
}
 8007698:	46c0      	nop			; (mov r8, r8)
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b002      	add	sp, #8
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <__errno>:
 80076a4:	4b01      	ldr	r3, [pc, #4]	; (80076ac <__errno+0x8>)
 80076a6:	6818      	ldr	r0, [r3, #0]
 80076a8:	4770      	bx	lr
 80076aa:	46c0      	nop			; (mov r8, r8)
 80076ac:	20000010 	.word	0x20000010

080076b0 <__libc_init_array>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	2600      	movs	r6, #0
 80076b4:	4d0c      	ldr	r5, [pc, #48]	; (80076e8 <__libc_init_array+0x38>)
 80076b6:	4c0d      	ldr	r4, [pc, #52]	; (80076ec <__libc_init_array+0x3c>)
 80076b8:	1b64      	subs	r4, r4, r5
 80076ba:	10a4      	asrs	r4, r4, #2
 80076bc:	42a6      	cmp	r6, r4
 80076be:	d109      	bne.n	80076d4 <__libc_init_array+0x24>
 80076c0:	2600      	movs	r6, #0
 80076c2:	f000 fd31 	bl	8008128 <_init>
 80076c6:	4d0a      	ldr	r5, [pc, #40]	; (80076f0 <__libc_init_array+0x40>)
 80076c8:	4c0a      	ldr	r4, [pc, #40]	; (80076f4 <__libc_init_array+0x44>)
 80076ca:	1b64      	subs	r4, r4, r5
 80076cc:	10a4      	asrs	r4, r4, #2
 80076ce:	42a6      	cmp	r6, r4
 80076d0:	d105      	bne.n	80076de <__libc_init_array+0x2e>
 80076d2:	bd70      	pop	{r4, r5, r6, pc}
 80076d4:	00b3      	lsls	r3, r6, #2
 80076d6:	58eb      	ldr	r3, [r5, r3]
 80076d8:	4798      	blx	r3
 80076da:	3601      	adds	r6, #1
 80076dc:	e7ee      	b.n	80076bc <__libc_init_array+0xc>
 80076de:	00b3      	lsls	r3, r6, #2
 80076e0:	58eb      	ldr	r3, [r5, r3]
 80076e2:	4798      	blx	r3
 80076e4:	3601      	adds	r6, #1
 80076e6:	e7f2      	b.n	80076ce <__libc_init_array+0x1e>
 80076e8:	08008330 	.word	0x08008330
 80076ec:	08008330 	.word	0x08008330
 80076f0:	08008330 	.word	0x08008330
 80076f4:	08008334 	.word	0x08008334

080076f8 <memset>:
 80076f8:	0003      	movs	r3, r0
 80076fa:	1882      	adds	r2, r0, r2
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d100      	bne.n	8007702 <memset+0xa>
 8007700:	4770      	bx	lr
 8007702:	7019      	strb	r1, [r3, #0]
 8007704:	3301      	adds	r3, #1
 8007706:	e7f9      	b.n	80076fc <memset+0x4>

08007708 <_puts_r>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	0005      	movs	r5, r0
 800770c:	000e      	movs	r6, r1
 800770e:	2800      	cmp	r0, #0
 8007710:	d004      	beq.n	800771c <_puts_r+0x14>
 8007712:	6983      	ldr	r3, [r0, #24]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <_puts_r+0x14>
 8007718:	f000 fa6e 	bl	8007bf8 <__sinit>
 800771c:	69ab      	ldr	r3, [r5, #24]
 800771e:	68ac      	ldr	r4, [r5, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <_puts_r+0x22>
 8007724:	0028      	movs	r0, r5
 8007726:	f000 fa67 	bl	8007bf8 <__sinit>
 800772a:	4b2d      	ldr	r3, [pc, #180]	; (80077e0 <_puts_r+0xd8>)
 800772c:	429c      	cmp	r4, r3
 800772e:	d122      	bne.n	8007776 <_puts_r+0x6e>
 8007730:	686c      	ldr	r4, [r5, #4]
 8007732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007734:	07db      	lsls	r3, r3, #31
 8007736:	d405      	bmi.n	8007744 <_puts_r+0x3c>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	059b      	lsls	r3, r3, #22
 800773c:	d402      	bmi.n	8007744 <_puts_r+0x3c>
 800773e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007740:	f000 fafb 	bl	8007d3a <__retarget_lock_acquire_recursive>
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	071b      	lsls	r3, r3, #28
 8007748:	d502      	bpl.n	8007750 <_puts_r+0x48>
 800774a:	6923      	ldr	r3, [r4, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d129      	bne.n	80077a4 <_puts_r+0x9c>
 8007750:	0021      	movs	r1, r4
 8007752:	0028      	movs	r0, r5
 8007754:	f000 f8aa 	bl	80078ac <__swsetup_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d023      	beq.n	80077a4 <_puts_r+0x9c>
 800775c:	2501      	movs	r5, #1
 800775e:	426d      	negs	r5, r5
 8007760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007762:	07db      	lsls	r3, r3, #31
 8007764:	d405      	bmi.n	8007772 <_puts_r+0x6a>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	059b      	lsls	r3, r3, #22
 800776a:	d402      	bmi.n	8007772 <_puts_r+0x6a>
 800776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776e:	f000 fae5 	bl	8007d3c <__retarget_lock_release_recursive>
 8007772:	0028      	movs	r0, r5
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	4b1b      	ldr	r3, [pc, #108]	; (80077e4 <_puts_r+0xdc>)
 8007778:	429c      	cmp	r4, r3
 800777a:	d101      	bne.n	8007780 <_puts_r+0x78>
 800777c:	68ac      	ldr	r4, [r5, #8]
 800777e:	e7d8      	b.n	8007732 <_puts_r+0x2a>
 8007780:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <_puts_r+0xe0>)
 8007782:	429c      	cmp	r4, r3
 8007784:	d1d5      	bne.n	8007732 <_puts_r+0x2a>
 8007786:	68ec      	ldr	r4, [r5, #12]
 8007788:	e7d3      	b.n	8007732 <_puts_r+0x2a>
 800778a:	3601      	adds	r6, #1
 800778c:	60a3      	str	r3, [r4, #8]
 800778e:	2b00      	cmp	r3, #0
 8007790:	da04      	bge.n	800779c <_puts_r+0x94>
 8007792:	69a2      	ldr	r2, [r4, #24]
 8007794:	429a      	cmp	r2, r3
 8007796:	dc16      	bgt.n	80077c6 <_puts_r+0xbe>
 8007798:	290a      	cmp	r1, #10
 800779a:	d014      	beq.n	80077c6 <_puts_r+0xbe>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	1c5a      	adds	r2, r3, #1
 80077a0:	6022      	str	r2, [r4, #0]
 80077a2:	7019      	strb	r1, [r3, #0]
 80077a4:	68a3      	ldr	r3, [r4, #8]
 80077a6:	7831      	ldrb	r1, [r6, #0]
 80077a8:	3b01      	subs	r3, #1
 80077aa:	2900      	cmp	r1, #0
 80077ac:	d1ed      	bne.n	800778a <_puts_r+0x82>
 80077ae:	60a3      	str	r3, [r4, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	da0f      	bge.n	80077d4 <_puts_r+0xcc>
 80077b4:	0028      	movs	r0, r5
 80077b6:	0022      	movs	r2, r4
 80077b8:	310a      	adds	r1, #10
 80077ba:	f000 f821 	bl	8007800 <__swbuf_r>
 80077be:	250a      	movs	r5, #10
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d1cd      	bne.n	8007760 <_puts_r+0x58>
 80077c4:	e7ca      	b.n	800775c <_puts_r+0x54>
 80077c6:	0022      	movs	r2, r4
 80077c8:	0028      	movs	r0, r5
 80077ca:	f000 f819 	bl	8007800 <__swbuf_r>
 80077ce:	1c43      	adds	r3, r0, #1
 80077d0:	d1e8      	bne.n	80077a4 <_puts_r+0x9c>
 80077d2:	e7c3      	b.n	800775c <_puts_r+0x54>
 80077d4:	250a      	movs	r5, #10
 80077d6:	6823      	ldr	r3, [r4, #0]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	6022      	str	r2, [r4, #0]
 80077dc:	701d      	strb	r5, [r3, #0]
 80077de:	e7bf      	b.n	8007760 <_puts_r+0x58>
 80077e0:	080082e8 	.word	0x080082e8
 80077e4:	08008308 	.word	0x08008308
 80077e8:	080082c8 	.word	0x080082c8

080077ec <puts>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4b03      	ldr	r3, [pc, #12]	; (80077fc <puts+0x10>)
 80077f0:	0001      	movs	r1, r0
 80077f2:	6818      	ldr	r0, [r3, #0]
 80077f4:	f7ff ff88 	bl	8007708 <_puts_r>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	46c0      	nop			; (mov r8, r8)
 80077fc:	20000010 	.word	0x20000010

08007800 <__swbuf_r>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	0005      	movs	r5, r0
 8007804:	000e      	movs	r6, r1
 8007806:	0014      	movs	r4, r2
 8007808:	2800      	cmp	r0, #0
 800780a:	d004      	beq.n	8007816 <__swbuf_r+0x16>
 800780c:	6983      	ldr	r3, [r0, #24]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <__swbuf_r+0x16>
 8007812:	f000 f9f1 	bl	8007bf8 <__sinit>
 8007816:	4b22      	ldr	r3, [pc, #136]	; (80078a0 <__swbuf_r+0xa0>)
 8007818:	429c      	cmp	r4, r3
 800781a:	d12e      	bne.n	800787a <__swbuf_r+0x7a>
 800781c:	686c      	ldr	r4, [r5, #4]
 800781e:	69a3      	ldr	r3, [r4, #24]
 8007820:	60a3      	str	r3, [r4, #8]
 8007822:	89a3      	ldrh	r3, [r4, #12]
 8007824:	071b      	lsls	r3, r3, #28
 8007826:	d532      	bpl.n	800788e <__swbuf_r+0x8e>
 8007828:	6923      	ldr	r3, [r4, #16]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d02f      	beq.n	800788e <__swbuf_r+0x8e>
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	6922      	ldr	r2, [r4, #16]
 8007832:	b2f7      	uxtb	r7, r6
 8007834:	1a98      	subs	r0, r3, r2
 8007836:	6963      	ldr	r3, [r4, #20]
 8007838:	b2f6      	uxtb	r6, r6
 800783a:	4283      	cmp	r3, r0
 800783c:	dc05      	bgt.n	800784a <__swbuf_r+0x4a>
 800783e:	0021      	movs	r1, r4
 8007840:	0028      	movs	r0, r5
 8007842:	f000 f937 	bl	8007ab4 <_fflush_r>
 8007846:	2800      	cmp	r0, #0
 8007848:	d127      	bne.n	800789a <__swbuf_r+0x9a>
 800784a:	68a3      	ldr	r3, [r4, #8]
 800784c:	3001      	adds	r0, #1
 800784e:	3b01      	subs	r3, #1
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	6022      	str	r2, [r4, #0]
 8007858:	701f      	strb	r7, [r3, #0]
 800785a:	6963      	ldr	r3, [r4, #20]
 800785c:	4283      	cmp	r3, r0
 800785e:	d004      	beq.n	800786a <__swbuf_r+0x6a>
 8007860:	89a3      	ldrh	r3, [r4, #12]
 8007862:	07db      	lsls	r3, r3, #31
 8007864:	d507      	bpl.n	8007876 <__swbuf_r+0x76>
 8007866:	2e0a      	cmp	r6, #10
 8007868:	d105      	bne.n	8007876 <__swbuf_r+0x76>
 800786a:	0021      	movs	r1, r4
 800786c:	0028      	movs	r0, r5
 800786e:	f000 f921 	bl	8007ab4 <_fflush_r>
 8007872:	2800      	cmp	r0, #0
 8007874:	d111      	bne.n	800789a <__swbuf_r+0x9a>
 8007876:	0030      	movs	r0, r6
 8007878:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800787a:	4b0a      	ldr	r3, [pc, #40]	; (80078a4 <__swbuf_r+0xa4>)
 800787c:	429c      	cmp	r4, r3
 800787e:	d101      	bne.n	8007884 <__swbuf_r+0x84>
 8007880:	68ac      	ldr	r4, [r5, #8]
 8007882:	e7cc      	b.n	800781e <__swbuf_r+0x1e>
 8007884:	4b08      	ldr	r3, [pc, #32]	; (80078a8 <__swbuf_r+0xa8>)
 8007886:	429c      	cmp	r4, r3
 8007888:	d1c9      	bne.n	800781e <__swbuf_r+0x1e>
 800788a:	68ec      	ldr	r4, [r5, #12]
 800788c:	e7c7      	b.n	800781e <__swbuf_r+0x1e>
 800788e:	0021      	movs	r1, r4
 8007890:	0028      	movs	r0, r5
 8007892:	f000 f80b 	bl	80078ac <__swsetup_r>
 8007896:	2800      	cmp	r0, #0
 8007898:	d0c9      	beq.n	800782e <__swbuf_r+0x2e>
 800789a:	2601      	movs	r6, #1
 800789c:	4276      	negs	r6, r6
 800789e:	e7ea      	b.n	8007876 <__swbuf_r+0x76>
 80078a0:	080082e8 	.word	0x080082e8
 80078a4:	08008308 	.word	0x08008308
 80078a8:	080082c8 	.word	0x080082c8

080078ac <__swsetup_r>:
 80078ac:	4b37      	ldr	r3, [pc, #220]	; (800798c <__swsetup_r+0xe0>)
 80078ae:	b570      	push	{r4, r5, r6, lr}
 80078b0:	681d      	ldr	r5, [r3, #0]
 80078b2:	0006      	movs	r6, r0
 80078b4:	000c      	movs	r4, r1
 80078b6:	2d00      	cmp	r5, #0
 80078b8:	d005      	beq.n	80078c6 <__swsetup_r+0x1a>
 80078ba:	69ab      	ldr	r3, [r5, #24]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d102      	bne.n	80078c6 <__swsetup_r+0x1a>
 80078c0:	0028      	movs	r0, r5
 80078c2:	f000 f999 	bl	8007bf8 <__sinit>
 80078c6:	4b32      	ldr	r3, [pc, #200]	; (8007990 <__swsetup_r+0xe4>)
 80078c8:	429c      	cmp	r4, r3
 80078ca:	d10f      	bne.n	80078ec <__swsetup_r+0x40>
 80078cc:	686c      	ldr	r4, [r5, #4]
 80078ce:	230c      	movs	r3, #12
 80078d0:	5ee2      	ldrsh	r2, [r4, r3]
 80078d2:	b293      	uxth	r3, r2
 80078d4:	0711      	lsls	r1, r2, #28
 80078d6:	d42d      	bmi.n	8007934 <__swsetup_r+0x88>
 80078d8:	06d9      	lsls	r1, r3, #27
 80078da:	d411      	bmi.n	8007900 <__swsetup_r+0x54>
 80078dc:	2309      	movs	r3, #9
 80078de:	2001      	movs	r0, #1
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	3337      	adds	r3, #55	; 0x37
 80078e4:	4313      	orrs	r3, r2
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	4240      	negs	r0, r0
 80078ea:	bd70      	pop	{r4, r5, r6, pc}
 80078ec:	4b29      	ldr	r3, [pc, #164]	; (8007994 <__swsetup_r+0xe8>)
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d101      	bne.n	80078f6 <__swsetup_r+0x4a>
 80078f2:	68ac      	ldr	r4, [r5, #8]
 80078f4:	e7eb      	b.n	80078ce <__swsetup_r+0x22>
 80078f6:	4b28      	ldr	r3, [pc, #160]	; (8007998 <__swsetup_r+0xec>)
 80078f8:	429c      	cmp	r4, r3
 80078fa:	d1e8      	bne.n	80078ce <__swsetup_r+0x22>
 80078fc:	68ec      	ldr	r4, [r5, #12]
 80078fe:	e7e6      	b.n	80078ce <__swsetup_r+0x22>
 8007900:	075b      	lsls	r3, r3, #29
 8007902:	d513      	bpl.n	800792c <__swsetup_r+0x80>
 8007904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007906:	2900      	cmp	r1, #0
 8007908:	d008      	beq.n	800791c <__swsetup_r+0x70>
 800790a:	0023      	movs	r3, r4
 800790c:	3344      	adds	r3, #68	; 0x44
 800790e:	4299      	cmp	r1, r3
 8007910:	d002      	beq.n	8007918 <__swsetup_r+0x6c>
 8007912:	0030      	movs	r0, r6
 8007914:	f000 fa80 	bl	8007e18 <_free_r>
 8007918:	2300      	movs	r3, #0
 800791a:	6363      	str	r3, [r4, #52]	; 0x34
 800791c:	2224      	movs	r2, #36	; 0x24
 800791e:	89a3      	ldrh	r3, [r4, #12]
 8007920:	4393      	bics	r3, r2
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	2300      	movs	r3, #0
 8007926:	6063      	str	r3, [r4, #4]
 8007928:	6923      	ldr	r3, [r4, #16]
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	2308      	movs	r3, #8
 800792e:	89a2      	ldrh	r2, [r4, #12]
 8007930:	4313      	orrs	r3, r2
 8007932:	81a3      	strh	r3, [r4, #12]
 8007934:	6923      	ldr	r3, [r4, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <__swsetup_r+0xa6>
 800793a:	21a0      	movs	r1, #160	; 0xa0
 800793c:	2280      	movs	r2, #128	; 0x80
 800793e:	89a3      	ldrh	r3, [r4, #12]
 8007940:	0089      	lsls	r1, r1, #2
 8007942:	0092      	lsls	r2, r2, #2
 8007944:	400b      	ands	r3, r1
 8007946:	4293      	cmp	r3, r2
 8007948:	d003      	beq.n	8007952 <__swsetup_r+0xa6>
 800794a:	0021      	movs	r1, r4
 800794c:	0030      	movs	r0, r6
 800794e:	f000 fa1f 	bl	8007d90 <__smakebuf_r>
 8007952:	220c      	movs	r2, #12
 8007954:	5ea3      	ldrsh	r3, [r4, r2]
 8007956:	2001      	movs	r0, #1
 8007958:	001a      	movs	r2, r3
 800795a:	b299      	uxth	r1, r3
 800795c:	4002      	ands	r2, r0
 800795e:	4203      	tst	r3, r0
 8007960:	d00f      	beq.n	8007982 <__swsetup_r+0xd6>
 8007962:	2200      	movs	r2, #0
 8007964:	60a2      	str	r2, [r4, #8]
 8007966:	6962      	ldr	r2, [r4, #20]
 8007968:	4252      	negs	r2, r2
 800796a:	61a2      	str	r2, [r4, #24]
 800796c:	2000      	movs	r0, #0
 800796e:	6922      	ldr	r2, [r4, #16]
 8007970:	4282      	cmp	r2, r0
 8007972:	d1ba      	bne.n	80078ea <__swsetup_r+0x3e>
 8007974:	060a      	lsls	r2, r1, #24
 8007976:	d5b8      	bpl.n	80078ea <__swsetup_r+0x3e>
 8007978:	2240      	movs	r2, #64	; 0x40
 800797a:	4313      	orrs	r3, r2
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	3801      	subs	r0, #1
 8007980:	e7b3      	b.n	80078ea <__swsetup_r+0x3e>
 8007982:	0788      	lsls	r0, r1, #30
 8007984:	d400      	bmi.n	8007988 <__swsetup_r+0xdc>
 8007986:	6962      	ldr	r2, [r4, #20]
 8007988:	60a2      	str	r2, [r4, #8]
 800798a:	e7ef      	b.n	800796c <__swsetup_r+0xc0>
 800798c:	20000010 	.word	0x20000010
 8007990:	080082e8 	.word	0x080082e8
 8007994:	08008308 	.word	0x08008308
 8007998:	080082c8 	.word	0x080082c8

0800799c <__sflush_r>:
 800799c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800799e:	898b      	ldrh	r3, [r1, #12]
 80079a0:	0005      	movs	r5, r0
 80079a2:	000c      	movs	r4, r1
 80079a4:	071a      	lsls	r2, r3, #28
 80079a6:	d45f      	bmi.n	8007a68 <__sflush_r+0xcc>
 80079a8:	684a      	ldr	r2, [r1, #4]
 80079aa:	2a00      	cmp	r2, #0
 80079ac:	dc04      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80079b0:	2a00      	cmp	r2, #0
 80079b2:	dc01      	bgt.n	80079b8 <__sflush_r+0x1c>
 80079b4:	2000      	movs	r0, #0
 80079b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80079ba:	2f00      	cmp	r7, #0
 80079bc:	d0fa      	beq.n	80079b4 <__sflush_r+0x18>
 80079be:	2200      	movs	r2, #0
 80079c0:	2180      	movs	r1, #128	; 0x80
 80079c2:	682e      	ldr	r6, [r5, #0]
 80079c4:	602a      	str	r2, [r5, #0]
 80079c6:	001a      	movs	r2, r3
 80079c8:	0149      	lsls	r1, r1, #5
 80079ca:	400a      	ands	r2, r1
 80079cc:	420b      	tst	r3, r1
 80079ce:	d034      	beq.n	8007a3a <__sflush_r+0x9e>
 80079d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	075b      	lsls	r3, r3, #29
 80079d6:	d506      	bpl.n	80079e6 <__sflush_r+0x4a>
 80079d8:	6863      	ldr	r3, [r4, #4]
 80079da:	1ac0      	subs	r0, r0, r3
 80079dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <__sflush_r+0x4a>
 80079e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079e4:	1ac0      	subs	r0, r0, r3
 80079e6:	0002      	movs	r2, r0
 80079e8:	6a21      	ldr	r1, [r4, #32]
 80079ea:	2300      	movs	r3, #0
 80079ec:	0028      	movs	r0, r5
 80079ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80079f0:	47b8      	blx	r7
 80079f2:	89a1      	ldrh	r1, [r4, #12]
 80079f4:	1c43      	adds	r3, r0, #1
 80079f6:	d106      	bne.n	8007a06 <__sflush_r+0x6a>
 80079f8:	682b      	ldr	r3, [r5, #0]
 80079fa:	2b1d      	cmp	r3, #29
 80079fc:	d831      	bhi.n	8007a62 <__sflush_r+0xc6>
 80079fe:	4a2c      	ldr	r2, [pc, #176]	; (8007ab0 <__sflush_r+0x114>)
 8007a00:	40da      	lsrs	r2, r3
 8007a02:	07d3      	lsls	r3, r2, #31
 8007a04:	d52d      	bpl.n	8007a62 <__sflush_r+0xc6>
 8007a06:	2300      	movs	r3, #0
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	6923      	ldr	r3, [r4, #16]
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	04cb      	lsls	r3, r1, #19
 8007a10:	d505      	bpl.n	8007a1e <__sflush_r+0x82>
 8007a12:	1c43      	adds	r3, r0, #1
 8007a14:	d102      	bne.n	8007a1c <__sflush_r+0x80>
 8007a16:	682b      	ldr	r3, [r5, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d100      	bne.n	8007a1e <__sflush_r+0x82>
 8007a1c:	6560      	str	r0, [r4, #84]	; 0x54
 8007a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a20:	602e      	str	r6, [r5, #0]
 8007a22:	2900      	cmp	r1, #0
 8007a24:	d0c6      	beq.n	80079b4 <__sflush_r+0x18>
 8007a26:	0023      	movs	r3, r4
 8007a28:	3344      	adds	r3, #68	; 0x44
 8007a2a:	4299      	cmp	r1, r3
 8007a2c:	d002      	beq.n	8007a34 <__sflush_r+0x98>
 8007a2e:	0028      	movs	r0, r5
 8007a30:	f000 f9f2 	bl	8007e18 <_free_r>
 8007a34:	2000      	movs	r0, #0
 8007a36:	6360      	str	r0, [r4, #52]	; 0x34
 8007a38:	e7bd      	b.n	80079b6 <__sflush_r+0x1a>
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	0028      	movs	r0, r5
 8007a3e:	6a21      	ldr	r1, [r4, #32]
 8007a40:	47b8      	blx	r7
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d1c5      	bne.n	80079d2 <__sflush_r+0x36>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0c2      	beq.n	80079d2 <__sflush_r+0x36>
 8007a4c:	2b1d      	cmp	r3, #29
 8007a4e:	d001      	beq.n	8007a54 <__sflush_r+0xb8>
 8007a50:	2b16      	cmp	r3, #22
 8007a52:	d101      	bne.n	8007a58 <__sflush_r+0xbc>
 8007a54:	602e      	str	r6, [r5, #0]
 8007a56:	e7ad      	b.n	80079b4 <__sflush_r+0x18>
 8007a58:	2340      	movs	r3, #64	; 0x40
 8007a5a:	89a2      	ldrh	r2, [r4, #12]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	81a3      	strh	r3, [r4, #12]
 8007a60:	e7a9      	b.n	80079b6 <__sflush_r+0x1a>
 8007a62:	2340      	movs	r3, #64	; 0x40
 8007a64:	430b      	orrs	r3, r1
 8007a66:	e7fa      	b.n	8007a5e <__sflush_r+0xc2>
 8007a68:	690f      	ldr	r7, [r1, #16]
 8007a6a:	2f00      	cmp	r7, #0
 8007a6c:	d0a2      	beq.n	80079b4 <__sflush_r+0x18>
 8007a6e:	680a      	ldr	r2, [r1, #0]
 8007a70:	600f      	str	r7, [r1, #0]
 8007a72:	1bd2      	subs	r2, r2, r7
 8007a74:	9201      	str	r2, [sp, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	079b      	lsls	r3, r3, #30
 8007a7a:	d100      	bne.n	8007a7e <__sflush_r+0xe2>
 8007a7c:	694a      	ldr	r2, [r1, #20]
 8007a7e:	60a2      	str	r2, [r4, #8]
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dc00      	bgt.n	8007a88 <__sflush_r+0xec>
 8007a86:	e795      	b.n	80079b4 <__sflush_r+0x18>
 8007a88:	003a      	movs	r2, r7
 8007a8a:	0028      	movs	r0, r5
 8007a8c:	9b01      	ldr	r3, [sp, #4]
 8007a8e:	6a21      	ldr	r1, [r4, #32]
 8007a90:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a92:	47b0      	blx	r6
 8007a94:	2800      	cmp	r0, #0
 8007a96:	dc06      	bgt.n	8007aa6 <__sflush_r+0x10a>
 8007a98:	2340      	movs	r3, #64	; 0x40
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	89a2      	ldrh	r2, [r4, #12]
 8007a9e:	4240      	negs	r0, r0
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	81a3      	strh	r3, [r4, #12]
 8007aa4:	e787      	b.n	80079b6 <__sflush_r+0x1a>
 8007aa6:	9b01      	ldr	r3, [sp, #4]
 8007aa8:	183f      	adds	r7, r7, r0
 8007aaa:	1a1b      	subs	r3, r3, r0
 8007aac:	9301      	str	r3, [sp, #4]
 8007aae:	e7e7      	b.n	8007a80 <__sflush_r+0xe4>
 8007ab0:	20400001 	.word	0x20400001

08007ab4 <_fflush_r>:
 8007ab4:	690b      	ldr	r3, [r1, #16]
 8007ab6:	b570      	push	{r4, r5, r6, lr}
 8007ab8:	0005      	movs	r5, r0
 8007aba:	000c      	movs	r4, r1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d102      	bne.n	8007ac6 <_fflush_r+0x12>
 8007ac0:	2500      	movs	r5, #0
 8007ac2:	0028      	movs	r0, r5
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d004      	beq.n	8007ad4 <_fflush_r+0x20>
 8007aca:	6983      	ldr	r3, [r0, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <_fflush_r+0x20>
 8007ad0:	f000 f892 	bl	8007bf8 <__sinit>
 8007ad4:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <_fflush_r+0x74>)
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d11b      	bne.n	8007b12 <_fflush_r+0x5e>
 8007ada:	686c      	ldr	r4, [r5, #4]
 8007adc:	220c      	movs	r2, #12
 8007ade:	5ea3      	ldrsh	r3, [r4, r2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0ed      	beq.n	8007ac0 <_fflush_r+0xc>
 8007ae4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007ae6:	07d2      	lsls	r2, r2, #31
 8007ae8:	d404      	bmi.n	8007af4 <_fflush_r+0x40>
 8007aea:	059b      	lsls	r3, r3, #22
 8007aec:	d402      	bmi.n	8007af4 <_fflush_r+0x40>
 8007aee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007af0:	f000 f923 	bl	8007d3a <__retarget_lock_acquire_recursive>
 8007af4:	0028      	movs	r0, r5
 8007af6:	0021      	movs	r1, r4
 8007af8:	f7ff ff50 	bl	800799c <__sflush_r>
 8007afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007afe:	0005      	movs	r5, r0
 8007b00:	07db      	lsls	r3, r3, #31
 8007b02:	d4de      	bmi.n	8007ac2 <_fflush_r+0xe>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	059b      	lsls	r3, r3, #22
 8007b08:	d4db      	bmi.n	8007ac2 <_fflush_r+0xe>
 8007b0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0c:	f000 f916 	bl	8007d3c <__retarget_lock_release_recursive>
 8007b10:	e7d7      	b.n	8007ac2 <_fflush_r+0xe>
 8007b12:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <_fflush_r+0x78>)
 8007b14:	429c      	cmp	r4, r3
 8007b16:	d101      	bne.n	8007b1c <_fflush_r+0x68>
 8007b18:	68ac      	ldr	r4, [r5, #8]
 8007b1a:	e7df      	b.n	8007adc <_fflush_r+0x28>
 8007b1c:	4b04      	ldr	r3, [pc, #16]	; (8007b30 <_fflush_r+0x7c>)
 8007b1e:	429c      	cmp	r4, r3
 8007b20:	d1dc      	bne.n	8007adc <_fflush_r+0x28>
 8007b22:	68ec      	ldr	r4, [r5, #12]
 8007b24:	e7da      	b.n	8007adc <_fflush_r+0x28>
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	080082e8 	.word	0x080082e8
 8007b2c:	08008308 	.word	0x08008308
 8007b30:	080082c8 	.word	0x080082c8

08007b34 <std>:
 8007b34:	2300      	movs	r3, #0
 8007b36:	b510      	push	{r4, lr}
 8007b38:	0004      	movs	r4, r0
 8007b3a:	6003      	str	r3, [r0, #0]
 8007b3c:	6043      	str	r3, [r0, #4]
 8007b3e:	6083      	str	r3, [r0, #8]
 8007b40:	8181      	strh	r1, [r0, #12]
 8007b42:	6643      	str	r3, [r0, #100]	; 0x64
 8007b44:	0019      	movs	r1, r3
 8007b46:	81c2      	strh	r2, [r0, #14]
 8007b48:	6103      	str	r3, [r0, #16]
 8007b4a:	6143      	str	r3, [r0, #20]
 8007b4c:	6183      	str	r3, [r0, #24]
 8007b4e:	2208      	movs	r2, #8
 8007b50:	305c      	adds	r0, #92	; 0x5c
 8007b52:	f7ff fdd1 	bl	80076f8 <memset>
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <std+0x38>)
 8007b58:	6263      	str	r3, [r4, #36]	; 0x24
 8007b5a:	4b05      	ldr	r3, [pc, #20]	; (8007b70 <std+0x3c>)
 8007b5c:	6224      	str	r4, [r4, #32]
 8007b5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <std+0x40>)
 8007b62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b64:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <std+0x44>)
 8007b66:	6323      	str	r3, [r4, #48]	; 0x30
 8007b68:	bd10      	pop	{r4, pc}
 8007b6a:	46c0      	nop			; (mov r8, r8)
 8007b6c:	08007f8d 	.word	0x08007f8d
 8007b70:	08007fb5 	.word	0x08007fb5
 8007b74:	08007fed 	.word	0x08007fed
 8007b78:	08008019 	.word	0x08008019

08007b7c <_cleanup_r>:
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	4902      	ldr	r1, [pc, #8]	; (8007b88 <_cleanup_r+0xc>)
 8007b80:	f000 f8ba 	bl	8007cf8 <_fwalk_reent>
 8007b84:	bd10      	pop	{r4, pc}
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	08007ab5 	.word	0x08007ab5

08007b8c <__sfmoreglue>:
 8007b8c:	b570      	push	{r4, r5, r6, lr}
 8007b8e:	2568      	movs	r5, #104	; 0x68
 8007b90:	1e4a      	subs	r2, r1, #1
 8007b92:	4355      	muls	r5, r2
 8007b94:	000e      	movs	r6, r1
 8007b96:	0029      	movs	r1, r5
 8007b98:	3174      	adds	r1, #116	; 0x74
 8007b9a:	f000 f987 	bl	8007eac <_malloc_r>
 8007b9e:	1e04      	subs	r4, r0, #0
 8007ba0:	d008      	beq.n	8007bb4 <__sfmoreglue+0x28>
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	002a      	movs	r2, r5
 8007ba6:	6001      	str	r1, [r0, #0]
 8007ba8:	6046      	str	r6, [r0, #4]
 8007baa:	300c      	adds	r0, #12
 8007bac:	60a0      	str	r0, [r4, #8]
 8007bae:	3268      	adds	r2, #104	; 0x68
 8007bb0:	f7ff fda2 	bl	80076f8 <memset>
 8007bb4:	0020      	movs	r0, r4
 8007bb6:	bd70      	pop	{r4, r5, r6, pc}

08007bb8 <__sfp_lock_acquire>:
 8007bb8:	b510      	push	{r4, lr}
 8007bba:	4802      	ldr	r0, [pc, #8]	; (8007bc4 <__sfp_lock_acquire+0xc>)
 8007bbc:	f000 f8bd 	bl	8007d3a <__retarget_lock_acquire_recursive>
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	20000a04 	.word	0x20000a04

08007bc8 <__sfp_lock_release>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	4802      	ldr	r0, [pc, #8]	; (8007bd4 <__sfp_lock_release+0xc>)
 8007bcc:	f000 f8b6 	bl	8007d3c <__retarget_lock_release_recursive>
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	46c0      	nop			; (mov r8, r8)
 8007bd4:	20000a04 	.word	0x20000a04

08007bd8 <__sinit_lock_acquire>:
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	4802      	ldr	r0, [pc, #8]	; (8007be4 <__sinit_lock_acquire+0xc>)
 8007bdc:	f000 f8ad 	bl	8007d3a <__retarget_lock_acquire_recursive>
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	200009ff 	.word	0x200009ff

08007be8 <__sinit_lock_release>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4802      	ldr	r0, [pc, #8]	; (8007bf4 <__sinit_lock_release+0xc>)
 8007bec:	f000 f8a6 	bl	8007d3c <__retarget_lock_release_recursive>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	46c0      	nop			; (mov r8, r8)
 8007bf4:	200009ff 	.word	0x200009ff

08007bf8 <__sinit>:
 8007bf8:	b513      	push	{r0, r1, r4, lr}
 8007bfa:	0004      	movs	r4, r0
 8007bfc:	f7ff ffec 	bl	8007bd8 <__sinit_lock_acquire>
 8007c00:	69a3      	ldr	r3, [r4, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d002      	beq.n	8007c0c <__sinit+0x14>
 8007c06:	f7ff ffef 	bl	8007be8 <__sinit_lock_release>
 8007c0a:	bd13      	pop	{r0, r1, r4, pc}
 8007c0c:	64a3      	str	r3, [r4, #72]	; 0x48
 8007c0e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007c10:	6523      	str	r3, [r4, #80]	; 0x50
 8007c12:	4b13      	ldr	r3, [pc, #76]	; (8007c60 <__sinit+0x68>)
 8007c14:	4a13      	ldr	r2, [pc, #76]	; (8007c64 <__sinit+0x6c>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c1a:	9301      	str	r3, [sp, #4]
 8007c1c:	42a3      	cmp	r3, r4
 8007c1e:	d101      	bne.n	8007c24 <__sinit+0x2c>
 8007c20:	2301      	movs	r3, #1
 8007c22:	61a3      	str	r3, [r4, #24]
 8007c24:	0020      	movs	r0, r4
 8007c26:	f000 f81f 	bl	8007c68 <__sfp>
 8007c2a:	6060      	str	r0, [r4, #4]
 8007c2c:	0020      	movs	r0, r4
 8007c2e:	f000 f81b 	bl	8007c68 <__sfp>
 8007c32:	60a0      	str	r0, [r4, #8]
 8007c34:	0020      	movs	r0, r4
 8007c36:	f000 f817 	bl	8007c68 <__sfp>
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	60e0      	str	r0, [r4, #12]
 8007c40:	6860      	ldr	r0, [r4, #4]
 8007c42:	f7ff ff77 	bl	8007b34 <std>
 8007c46:	2201      	movs	r2, #1
 8007c48:	2109      	movs	r1, #9
 8007c4a:	68a0      	ldr	r0, [r4, #8]
 8007c4c:	f7ff ff72 	bl	8007b34 <std>
 8007c50:	2202      	movs	r2, #2
 8007c52:	2112      	movs	r1, #18
 8007c54:	68e0      	ldr	r0, [r4, #12]
 8007c56:	f7ff ff6d 	bl	8007b34 <std>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	61a3      	str	r3, [r4, #24]
 8007c5e:	e7d2      	b.n	8007c06 <__sinit+0xe>
 8007c60:	080082c4 	.word	0x080082c4
 8007c64:	08007b7d 	.word	0x08007b7d

08007c68 <__sfp>:
 8007c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c6a:	0007      	movs	r7, r0
 8007c6c:	f7ff ffa4 	bl	8007bb8 <__sfp_lock_acquire>
 8007c70:	4b1f      	ldr	r3, [pc, #124]	; (8007cf0 <__sfp+0x88>)
 8007c72:	681e      	ldr	r6, [r3, #0]
 8007c74:	69b3      	ldr	r3, [r6, #24]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <__sfp+0x18>
 8007c7a:	0030      	movs	r0, r6
 8007c7c:	f7ff ffbc 	bl	8007bf8 <__sinit>
 8007c80:	3648      	adds	r6, #72	; 0x48
 8007c82:	68b4      	ldr	r4, [r6, #8]
 8007c84:	6873      	ldr	r3, [r6, #4]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	d504      	bpl.n	8007c94 <__sfp+0x2c>
 8007c8a:	6833      	ldr	r3, [r6, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d022      	beq.n	8007cd6 <__sfp+0x6e>
 8007c90:	6836      	ldr	r6, [r6, #0]
 8007c92:	e7f6      	b.n	8007c82 <__sfp+0x1a>
 8007c94:	220c      	movs	r2, #12
 8007c96:	5ea5      	ldrsh	r5, [r4, r2]
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	d11a      	bne.n	8007cd2 <__sfp+0x6a>
 8007c9c:	0020      	movs	r0, r4
 8007c9e:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <__sfp+0x8c>)
 8007ca0:	3058      	adds	r0, #88	; 0x58
 8007ca2:	60e3      	str	r3, [r4, #12]
 8007ca4:	6665      	str	r5, [r4, #100]	; 0x64
 8007ca6:	f000 f847 	bl	8007d38 <__retarget_lock_init_recursive>
 8007caa:	f7ff ff8d 	bl	8007bc8 <__sfp_lock_release>
 8007cae:	0020      	movs	r0, r4
 8007cb0:	2208      	movs	r2, #8
 8007cb2:	0029      	movs	r1, r5
 8007cb4:	6025      	str	r5, [r4, #0]
 8007cb6:	60a5      	str	r5, [r4, #8]
 8007cb8:	6065      	str	r5, [r4, #4]
 8007cba:	6125      	str	r5, [r4, #16]
 8007cbc:	6165      	str	r5, [r4, #20]
 8007cbe:	61a5      	str	r5, [r4, #24]
 8007cc0:	305c      	adds	r0, #92	; 0x5c
 8007cc2:	f7ff fd19 	bl	80076f8 <memset>
 8007cc6:	6365      	str	r5, [r4, #52]	; 0x34
 8007cc8:	63a5      	str	r5, [r4, #56]	; 0x38
 8007cca:	64a5      	str	r5, [r4, #72]	; 0x48
 8007ccc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007cce:	0020      	movs	r0, r4
 8007cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd2:	3468      	adds	r4, #104	; 0x68
 8007cd4:	e7d7      	b.n	8007c86 <__sfp+0x1e>
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	0038      	movs	r0, r7
 8007cda:	f7ff ff57 	bl	8007b8c <__sfmoreglue>
 8007cde:	1e04      	subs	r4, r0, #0
 8007ce0:	6030      	str	r0, [r6, #0]
 8007ce2:	d1d5      	bne.n	8007c90 <__sfp+0x28>
 8007ce4:	f7ff ff70 	bl	8007bc8 <__sfp_lock_release>
 8007ce8:	230c      	movs	r3, #12
 8007cea:	603b      	str	r3, [r7, #0]
 8007cec:	e7ef      	b.n	8007cce <__sfp+0x66>
 8007cee:	46c0      	nop			; (mov r8, r8)
 8007cf0:	080082c4 	.word	0x080082c4
 8007cf4:	ffff0001 	.word	0xffff0001

08007cf8 <_fwalk_reent>:
 8007cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfa:	0004      	movs	r4, r0
 8007cfc:	0006      	movs	r6, r0
 8007cfe:	2700      	movs	r7, #0
 8007d00:	9101      	str	r1, [sp, #4]
 8007d02:	3448      	adds	r4, #72	; 0x48
 8007d04:	6863      	ldr	r3, [r4, #4]
 8007d06:	68a5      	ldr	r5, [r4, #8]
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	9b00      	ldr	r3, [sp, #0]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	d504      	bpl.n	8007d1c <_fwalk_reent+0x24>
 8007d12:	6824      	ldr	r4, [r4, #0]
 8007d14:	2c00      	cmp	r4, #0
 8007d16:	d1f5      	bne.n	8007d04 <_fwalk_reent+0xc>
 8007d18:	0038      	movs	r0, r7
 8007d1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d1c:	89ab      	ldrh	r3, [r5, #12]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d908      	bls.n	8007d34 <_fwalk_reent+0x3c>
 8007d22:	220e      	movs	r2, #14
 8007d24:	5eab      	ldrsh	r3, [r5, r2]
 8007d26:	3301      	adds	r3, #1
 8007d28:	d004      	beq.n	8007d34 <_fwalk_reent+0x3c>
 8007d2a:	0029      	movs	r1, r5
 8007d2c:	0030      	movs	r0, r6
 8007d2e:	9b01      	ldr	r3, [sp, #4]
 8007d30:	4798      	blx	r3
 8007d32:	4307      	orrs	r7, r0
 8007d34:	3568      	adds	r5, #104	; 0x68
 8007d36:	e7e8      	b.n	8007d0a <_fwalk_reent+0x12>

08007d38 <__retarget_lock_init_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <__retarget_lock_acquire_recursive>:
 8007d3a:	4770      	bx	lr

08007d3c <__retarget_lock_release_recursive>:
 8007d3c:	4770      	bx	lr
	...

08007d40 <__swhatbuf_r>:
 8007d40:	b570      	push	{r4, r5, r6, lr}
 8007d42:	000e      	movs	r6, r1
 8007d44:	001d      	movs	r5, r3
 8007d46:	230e      	movs	r3, #14
 8007d48:	5ec9      	ldrsh	r1, [r1, r3]
 8007d4a:	0014      	movs	r4, r2
 8007d4c:	b096      	sub	sp, #88	; 0x58
 8007d4e:	2900      	cmp	r1, #0
 8007d50:	da07      	bge.n	8007d62 <__swhatbuf_r+0x22>
 8007d52:	2300      	movs	r3, #0
 8007d54:	602b      	str	r3, [r5, #0]
 8007d56:	89b3      	ldrh	r3, [r6, #12]
 8007d58:	061b      	lsls	r3, r3, #24
 8007d5a:	d411      	bmi.n	8007d80 <__swhatbuf_r+0x40>
 8007d5c:	2380      	movs	r3, #128	; 0x80
 8007d5e:	00db      	lsls	r3, r3, #3
 8007d60:	e00f      	b.n	8007d82 <__swhatbuf_r+0x42>
 8007d62:	466a      	mov	r2, sp
 8007d64:	f000 f984 	bl	8008070 <_fstat_r>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	dbf2      	blt.n	8007d52 <__swhatbuf_r+0x12>
 8007d6c:	23f0      	movs	r3, #240	; 0xf0
 8007d6e:	9901      	ldr	r1, [sp, #4]
 8007d70:	021b      	lsls	r3, r3, #8
 8007d72:	4019      	ands	r1, r3
 8007d74:	4b05      	ldr	r3, [pc, #20]	; (8007d8c <__swhatbuf_r+0x4c>)
 8007d76:	18c9      	adds	r1, r1, r3
 8007d78:	424b      	negs	r3, r1
 8007d7a:	4159      	adcs	r1, r3
 8007d7c:	6029      	str	r1, [r5, #0]
 8007d7e:	e7ed      	b.n	8007d5c <__swhatbuf_r+0x1c>
 8007d80:	2340      	movs	r3, #64	; 0x40
 8007d82:	2000      	movs	r0, #0
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	b016      	add	sp, #88	; 0x58
 8007d88:	bd70      	pop	{r4, r5, r6, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	ffffe000 	.word	0xffffe000

08007d90 <__smakebuf_r>:
 8007d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d92:	2602      	movs	r6, #2
 8007d94:	898b      	ldrh	r3, [r1, #12]
 8007d96:	0005      	movs	r5, r0
 8007d98:	000c      	movs	r4, r1
 8007d9a:	4233      	tst	r3, r6
 8007d9c:	d006      	beq.n	8007dac <__smakebuf_r+0x1c>
 8007d9e:	0023      	movs	r3, r4
 8007da0:	3347      	adds	r3, #71	; 0x47
 8007da2:	6023      	str	r3, [r4, #0]
 8007da4:	6123      	str	r3, [r4, #16]
 8007da6:	2301      	movs	r3, #1
 8007da8:	6163      	str	r3, [r4, #20]
 8007daa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007dac:	466a      	mov	r2, sp
 8007dae:	ab01      	add	r3, sp, #4
 8007db0:	f7ff ffc6 	bl	8007d40 <__swhatbuf_r>
 8007db4:	9900      	ldr	r1, [sp, #0]
 8007db6:	0007      	movs	r7, r0
 8007db8:	0028      	movs	r0, r5
 8007dba:	f000 f877 	bl	8007eac <_malloc_r>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d108      	bne.n	8007dd4 <__smakebuf_r+0x44>
 8007dc2:	220c      	movs	r2, #12
 8007dc4:	5ea3      	ldrsh	r3, [r4, r2]
 8007dc6:	059a      	lsls	r2, r3, #22
 8007dc8:	d4ef      	bmi.n	8007daa <__smakebuf_r+0x1a>
 8007dca:	2203      	movs	r2, #3
 8007dcc:	4393      	bics	r3, r2
 8007dce:	431e      	orrs	r6, r3
 8007dd0:	81a6      	strh	r6, [r4, #12]
 8007dd2:	e7e4      	b.n	8007d9e <__smakebuf_r+0xe>
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <__smakebuf_r+0x84>)
 8007dd6:	62ab      	str	r3, [r5, #40]	; 0x28
 8007dd8:	2380      	movs	r3, #128	; 0x80
 8007dda:	89a2      	ldrh	r2, [r4, #12]
 8007ddc:	6020      	str	r0, [r4, #0]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	6120      	str	r0, [r4, #16]
 8007de6:	6163      	str	r3, [r4, #20]
 8007de8:	9b01      	ldr	r3, [sp, #4]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00d      	beq.n	8007e0a <__smakebuf_r+0x7a>
 8007dee:	0028      	movs	r0, r5
 8007df0:	230e      	movs	r3, #14
 8007df2:	5ee1      	ldrsh	r1, [r4, r3]
 8007df4:	f000 f94e 	bl	8008094 <_isatty_r>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	d006      	beq.n	8007e0a <__smakebuf_r+0x7a>
 8007dfc:	2203      	movs	r2, #3
 8007dfe:	89a3      	ldrh	r3, [r4, #12]
 8007e00:	4393      	bics	r3, r2
 8007e02:	001a      	movs	r2, r3
 8007e04:	2301      	movs	r3, #1
 8007e06:	4313      	orrs	r3, r2
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	89a0      	ldrh	r0, [r4, #12]
 8007e0c:	4307      	orrs	r7, r0
 8007e0e:	81a7      	strh	r7, [r4, #12]
 8007e10:	e7cb      	b.n	8007daa <__smakebuf_r+0x1a>
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	08007b7d 	.word	0x08007b7d

08007e18 <_free_r>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	0005      	movs	r5, r0
 8007e1c:	2900      	cmp	r1, #0
 8007e1e:	d010      	beq.n	8007e42 <_free_r+0x2a>
 8007e20:	1f0c      	subs	r4, r1, #4
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	da00      	bge.n	8007e2a <_free_r+0x12>
 8007e28:	18e4      	adds	r4, r4, r3
 8007e2a:	0028      	movs	r0, r5
 8007e2c:	f000 f958 	bl	80080e0 <__malloc_lock>
 8007e30:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <_free_r+0x90>)
 8007e32:	6813      	ldr	r3, [r2, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <_free_r+0x2c>
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	6014      	str	r4, [r2, #0]
 8007e3c:	0028      	movs	r0, r5
 8007e3e:	f000 f957 	bl	80080f0 <__malloc_unlock>
 8007e42:	bd70      	pop	{r4, r5, r6, pc}
 8007e44:	42a3      	cmp	r3, r4
 8007e46:	d908      	bls.n	8007e5a <_free_r+0x42>
 8007e48:	6821      	ldr	r1, [r4, #0]
 8007e4a:	1860      	adds	r0, r4, r1
 8007e4c:	4283      	cmp	r3, r0
 8007e4e:	d1f3      	bne.n	8007e38 <_free_r+0x20>
 8007e50:	6818      	ldr	r0, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	1841      	adds	r1, r0, r1
 8007e56:	6021      	str	r1, [r4, #0]
 8007e58:	e7ee      	b.n	8007e38 <_free_r+0x20>
 8007e5a:	001a      	movs	r2, r3
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <_free_r+0x4e>
 8007e62:	42a3      	cmp	r3, r4
 8007e64:	d9f9      	bls.n	8007e5a <_free_r+0x42>
 8007e66:	6811      	ldr	r1, [r2, #0]
 8007e68:	1850      	adds	r0, r2, r1
 8007e6a:	42a0      	cmp	r0, r4
 8007e6c:	d10b      	bne.n	8007e86 <_free_r+0x6e>
 8007e6e:	6820      	ldr	r0, [r4, #0]
 8007e70:	1809      	adds	r1, r1, r0
 8007e72:	1850      	adds	r0, r2, r1
 8007e74:	6011      	str	r1, [r2, #0]
 8007e76:	4283      	cmp	r3, r0
 8007e78:	d1e0      	bne.n	8007e3c <_free_r+0x24>
 8007e7a:	6818      	ldr	r0, [r3, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	1841      	adds	r1, r0, r1
 8007e80:	6011      	str	r1, [r2, #0]
 8007e82:	6053      	str	r3, [r2, #4]
 8007e84:	e7da      	b.n	8007e3c <_free_r+0x24>
 8007e86:	42a0      	cmp	r0, r4
 8007e88:	d902      	bls.n	8007e90 <_free_r+0x78>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	602b      	str	r3, [r5, #0]
 8007e8e:	e7d5      	b.n	8007e3c <_free_r+0x24>
 8007e90:	6821      	ldr	r1, [r4, #0]
 8007e92:	1860      	adds	r0, r4, r1
 8007e94:	4283      	cmp	r3, r0
 8007e96:	d103      	bne.n	8007ea0 <_free_r+0x88>
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	1841      	adds	r1, r0, r1
 8007e9e:	6021      	str	r1, [r4, #0]
 8007ea0:	6063      	str	r3, [r4, #4]
 8007ea2:	6054      	str	r4, [r2, #4]
 8007ea4:	e7ca      	b.n	8007e3c <_free_r+0x24>
 8007ea6:	46c0      	nop			; (mov r8, r8)
 8007ea8:	2000073c 	.word	0x2000073c

08007eac <_malloc_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	2303      	movs	r3, #3
 8007eb0:	1ccd      	adds	r5, r1, #3
 8007eb2:	439d      	bics	r5, r3
 8007eb4:	3508      	adds	r5, #8
 8007eb6:	0006      	movs	r6, r0
 8007eb8:	2d0c      	cmp	r5, #12
 8007eba:	d21f      	bcs.n	8007efc <_malloc_r+0x50>
 8007ebc:	250c      	movs	r5, #12
 8007ebe:	42a9      	cmp	r1, r5
 8007ec0:	d81e      	bhi.n	8007f00 <_malloc_r+0x54>
 8007ec2:	0030      	movs	r0, r6
 8007ec4:	f000 f90c 	bl	80080e0 <__malloc_lock>
 8007ec8:	4925      	ldr	r1, [pc, #148]	; (8007f60 <_malloc_r+0xb4>)
 8007eca:	680a      	ldr	r2, [r1, #0]
 8007ecc:	0014      	movs	r4, r2
 8007ece:	2c00      	cmp	r4, #0
 8007ed0:	d11a      	bne.n	8007f08 <_malloc_r+0x5c>
 8007ed2:	4f24      	ldr	r7, [pc, #144]	; (8007f64 <_malloc_r+0xb8>)
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d104      	bne.n	8007ee4 <_malloc_r+0x38>
 8007eda:	0021      	movs	r1, r4
 8007edc:	0030      	movs	r0, r6
 8007ede:	f000 f843 	bl	8007f68 <_sbrk_r>
 8007ee2:	6038      	str	r0, [r7, #0]
 8007ee4:	0029      	movs	r1, r5
 8007ee6:	0030      	movs	r0, r6
 8007ee8:	f000 f83e 	bl	8007f68 <_sbrk_r>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d12b      	bne.n	8007f48 <_malloc_r+0x9c>
 8007ef0:	230c      	movs	r3, #12
 8007ef2:	0030      	movs	r0, r6
 8007ef4:	6033      	str	r3, [r6, #0]
 8007ef6:	f000 f8fb 	bl	80080f0 <__malloc_unlock>
 8007efa:	e003      	b.n	8007f04 <_malloc_r+0x58>
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	dade      	bge.n	8007ebe <_malloc_r+0x12>
 8007f00:	230c      	movs	r3, #12
 8007f02:	6033      	str	r3, [r6, #0]
 8007f04:	2000      	movs	r0, #0
 8007f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f08:	6823      	ldr	r3, [r4, #0]
 8007f0a:	1b5b      	subs	r3, r3, r5
 8007f0c:	d419      	bmi.n	8007f42 <_malloc_r+0x96>
 8007f0e:	2b0b      	cmp	r3, #11
 8007f10:	d903      	bls.n	8007f1a <_malloc_r+0x6e>
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	18e4      	adds	r4, r4, r3
 8007f16:	6025      	str	r5, [r4, #0]
 8007f18:	e003      	b.n	8007f22 <_malloc_r+0x76>
 8007f1a:	6863      	ldr	r3, [r4, #4]
 8007f1c:	42a2      	cmp	r2, r4
 8007f1e:	d10e      	bne.n	8007f3e <_malloc_r+0x92>
 8007f20:	600b      	str	r3, [r1, #0]
 8007f22:	0030      	movs	r0, r6
 8007f24:	f000 f8e4 	bl	80080f0 <__malloc_unlock>
 8007f28:	0020      	movs	r0, r4
 8007f2a:	2207      	movs	r2, #7
 8007f2c:	300b      	adds	r0, #11
 8007f2e:	1d23      	adds	r3, r4, #4
 8007f30:	4390      	bics	r0, r2
 8007f32:	1ac2      	subs	r2, r0, r3
 8007f34:	4298      	cmp	r0, r3
 8007f36:	d0e6      	beq.n	8007f06 <_malloc_r+0x5a>
 8007f38:	1a1b      	subs	r3, r3, r0
 8007f3a:	50a3      	str	r3, [r4, r2]
 8007f3c:	e7e3      	b.n	8007f06 <_malloc_r+0x5a>
 8007f3e:	6053      	str	r3, [r2, #4]
 8007f40:	e7ef      	b.n	8007f22 <_malloc_r+0x76>
 8007f42:	0022      	movs	r2, r4
 8007f44:	6864      	ldr	r4, [r4, #4]
 8007f46:	e7c2      	b.n	8007ece <_malloc_r+0x22>
 8007f48:	2303      	movs	r3, #3
 8007f4a:	1cc4      	adds	r4, r0, #3
 8007f4c:	439c      	bics	r4, r3
 8007f4e:	42a0      	cmp	r0, r4
 8007f50:	d0e1      	beq.n	8007f16 <_malloc_r+0x6a>
 8007f52:	1a21      	subs	r1, r4, r0
 8007f54:	0030      	movs	r0, r6
 8007f56:	f000 f807 	bl	8007f68 <_sbrk_r>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d1db      	bne.n	8007f16 <_malloc_r+0x6a>
 8007f5e:	e7c7      	b.n	8007ef0 <_malloc_r+0x44>
 8007f60:	2000073c 	.word	0x2000073c
 8007f64:	20000740 	.word	0x20000740

08007f68 <_sbrk_r>:
 8007f68:	2300      	movs	r3, #0
 8007f6a:	b570      	push	{r4, r5, r6, lr}
 8007f6c:	4d06      	ldr	r5, [pc, #24]	; (8007f88 <_sbrk_r+0x20>)
 8007f6e:	0004      	movs	r4, r0
 8007f70:	0008      	movs	r0, r1
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	f7f9 fa1a 	bl	80013ac <_sbrk>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	d103      	bne.n	8007f84 <_sbrk_r+0x1c>
 8007f7c:	682b      	ldr	r3, [r5, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d000      	beq.n	8007f84 <_sbrk_r+0x1c>
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	bd70      	pop	{r4, r5, r6, pc}
 8007f86:	46c0      	nop			; (mov r8, r8)
 8007f88:	20000a08 	.word	0x20000a08

08007f8c <__sread>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	000c      	movs	r4, r1
 8007f90:	250e      	movs	r5, #14
 8007f92:	5f49      	ldrsh	r1, [r1, r5]
 8007f94:	f000 f8b4 	bl	8008100 <_read_r>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	db03      	blt.n	8007fa4 <__sread+0x18>
 8007f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007f9e:	181b      	adds	r3, r3, r0
 8007fa0:	6563      	str	r3, [r4, #84]	; 0x54
 8007fa2:	bd70      	pop	{r4, r5, r6, pc}
 8007fa4:	89a3      	ldrh	r3, [r4, #12]
 8007fa6:	4a02      	ldr	r2, [pc, #8]	; (8007fb0 <__sread+0x24>)
 8007fa8:	4013      	ands	r3, r2
 8007faa:	81a3      	strh	r3, [r4, #12]
 8007fac:	e7f9      	b.n	8007fa2 <__sread+0x16>
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	ffffefff 	.word	0xffffefff

08007fb4 <__swrite>:
 8007fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fb6:	001f      	movs	r7, r3
 8007fb8:	898b      	ldrh	r3, [r1, #12]
 8007fba:	0005      	movs	r5, r0
 8007fbc:	000c      	movs	r4, r1
 8007fbe:	0016      	movs	r6, r2
 8007fc0:	05db      	lsls	r3, r3, #23
 8007fc2:	d505      	bpl.n	8007fd0 <__swrite+0x1c>
 8007fc4:	230e      	movs	r3, #14
 8007fc6:	5ec9      	ldrsh	r1, [r1, r3]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2302      	movs	r3, #2
 8007fcc:	f000 f874 	bl	80080b8 <_lseek_r>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	4a05      	ldr	r2, [pc, #20]	; (8007fe8 <__swrite+0x34>)
 8007fd4:	0028      	movs	r0, r5
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	81a3      	strh	r3, [r4, #12]
 8007fda:	0032      	movs	r2, r6
 8007fdc:	230e      	movs	r3, #14
 8007fde:	5ee1      	ldrsh	r1, [r4, r3]
 8007fe0:	003b      	movs	r3, r7
 8007fe2:	f000 f81f 	bl	8008024 <_write_r>
 8007fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe8:	ffffefff 	.word	0xffffefff

08007fec <__sseek>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	000c      	movs	r4, r1
 8007ff0:	250e      	movs	r5, #14
 8007ff2:	5f49      	ldrsh	r1, [r1, r5]
 8007ff4:	f000 f860 	bl	80080b8 <_lseek_r>
 8007ff8:	89a3      	ldrh	r3, [r4, #12]
 8007ffa:	1c42      	adds	r2, r0, #1
 8007ffc:	d103      	bne.n	8008006 <__sseek+0x1a>
 8007ffe:	4a05      	ldr	r2, [pc, #20]	; (8008014 <__sseek+0x28>)
 8008000:	4013      	ands	r3, r2
 8008002:	81a3      	strh	r3, [r4, #12]
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	2280      	movs	r2, #128	; 0x80
 8008008:	0152      	lsls	r2, r2, #5
 800800a:	4313      	orrs	r3, r2
 800800c:	81a3      	strh	r3, [r4, #12]
 800800e:	6560      	str	r0, [r4, #84]	; 0x54
 8008010:	e7f8      	b.n	8008004 <__sseek+0x18>
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	ffffefff 	.word	0xffffefff

08008018 <__sclose>:
 8008018:	b510      	push	{r4, lr}
 800801a:	230e      	movs	r3, #14
 800801c:	5ec9      	ldrsh	r1, [r1, r3]
 800801e:	f000 f815 	bl	800804c <_close_r>
 8008022:	bd10      	pop	{r4, pc}

08008024 <_write_r>:
 8008024:	b570      	push	{r4, r5, r6, lr}
 8008026:	0004      	movs	r4, r0
 8008028:	0008      	movs	r0, r1
 800802a:	0011      	movs	r1, r2
 800802c:	001a      	movs	r2, r3
 800802e:	2300      	movs	r3, #0
 8008030:	4d05      	ldr	r5, [pc, #20]	; (8008048 <_write_r+0x24>)
 8008032:	602b      	str	r3, [r5, #0]
 8008034:	f7f9 f971 	bl	800131a <_write>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d103      	bne.n	8008044 <_write_r+0x20>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d000      	beq.n	8008044 <_write_r+0x20>
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	bd70      	pop	{r4, r5, r6, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	20000a08 	.word	0x20000a08

0800804c <_close_r>:
 800804c:	2300      	movs	r3, #0
 800804e:	b570      	push	{r4, r5, r6, lr}
 8008050:	4d06      	ldr	r5, [pc, #24]	; (800806c <_close_r+0x20>)
 8008052:	0004      	movs	r4, r0
 8008054:	0008      	movs	r0, r1
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	f7f9 f97b 	bl	8001352 <_close>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d103      	bne.n	8008068 <_close_r+0x1c>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d000      	beq.n	8008068 <_close_r+0x1c>
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	bd70      	pop	{r4, r5, r6, pc}
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	20000a08 	.word	0x20000a08

08008070 <_fstat_r>:
 8008070:	2300      	movs	r3, #0
 8008072:	b570      	push	{r4, r5, r6, lr}
 8008074:	4d06      	ldr	r5, [pc, #24]	; (8008090 <_fstat_r+0x20>)
 8008076:	0004      	movs	r4, r0
 8008078:	0008      	movs	r0, r1
 800807a:	0011      	movs	r1, r2
 800807c:	602b      	str	r3, [r5, #0]
 800807e:	f7f9 f972 	bl	8001366 <_fstat>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	d103      	bne.n	800808e <_fstat_r+0x1e>
 8008086:	682b      	ldr	r3, [r5, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d000      	beq.n	800808e <_fstat_r+0x1e>
 800808c:	6023      	str	r3, [r4, #0]
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	20000a08 	.word	0x20000a08

08008094 <_isatty_r>:
 8008094:	2300      	movs	r3, #0
 8008096:	b570      	push	{r4, r5, r6, lr}
 8008098:	4d06      	ldr	r5, [pc, #24]	; (80080b4 <_isatty_r+0x20>)
 800809a:	0004      	movs	r4, r0
 800809c:	0008      	movs	r0, r1
 800809e:	602b      	str	r3, [r5, #0]
 80080a0:	f7f9 f96f 	bl	8001382 <_isatty>
 80080a4:	1c43      	adds	r3, r0, #1
 80080a6:	d103      	bne.n	80080b0 <_isatty_r+0x1c>
 80080a8:	682b      	ldr	r3, [r5, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d000      	beq.n	80080b0 <_isatty_r+0x1c>
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	20000a08 	.word	0x20000a08

080080b8 <_lseek_r>:
 80080b8:	b570      	push	{r4, r5, r6, lr}
 80080ba:	0004      	movs	r4, r0
 80080bc:	0008      	movs	r0, r1
 80080be:	0011      	movs	r1, r2
 80080c0:	001a      	movs	r2, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	4d05      	ldr	r5, [pc, #20]	; (80080dc <_lseek_r+0x24>)
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f9 f964 	bl	8001394 <_lseek>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d103      	bne.n	80080d8 <_lseek_r+0x20>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d000      	beq.n	80080d8 <_lseek_r+0x20>
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	46c0      	nop			; (mov r8, r8)
 80080dc:	20000a08 	.word	0x20000a08

080080e0 <__malloc_lock>:
 80080e0:	b510      	push	{r4, lr}
 80080e2:	4802      	ldr	r0, [pc, #8]	; (80080ec <__malloc_lock+0xc>)
 80080e4:	f7ff fe29 	bl	8007d3a <__retarget_lock_acquire_recursive>
 80080e8:	bd10      	pop	{r4, pc}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	20000a00 	.word	0x20000a00

080080f0 <__malloc_unlock>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	4802      	ldr	r0, [pc, #8]	; (80080fc <__malloc_unlock+0xc>)
 80080f4:	f7ff fe22 	bl	8007d3c <__retarget_lock_release_recursive>
 80080f8:	bd10      	pop	{r4, pc}
 80080fa:	46c0      	nop			; (mov r8, r8)
 80080fc:	20000a00 	.word	0x20000a00

08008100 <_read_r>:
 8008100:	b570      	push	{r4, r5, r6, lr}
 8008102:	0004      	movs	r4, r0
 8008104:	0008      	movs	r0, r1
 8008106:	0011      	movs	r1, r2
 8008108:	001a      	movs	r2, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4d05      	ldr	r5, [pc, #20]	; (8008124 <_read_r+0x24>)
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	f7f9 f8e6 	bl	80012e0 <_read>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d103      	bne.n	8008120 <_read_r+0x20>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d000      	beq.n	8008120 <_read_r+0x20>
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	bd70      	pop	{r4, r5, r6, pc}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	20000a08 	.word	0x20000a08

08008128 <_init>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr

08008134 <_fini>:
 8008134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008136:	46c0      	nop			; (mov r8, r8)
 8008138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813a:	bc08      	pop	{r3}
 800813c:	469e      	mov	lr, r3
 800813e:	4770      	bx	lr
