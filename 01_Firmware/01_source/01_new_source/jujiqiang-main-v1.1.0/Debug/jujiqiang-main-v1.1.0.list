
jujiqiang-main-v1.1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f94  08006f94  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f94  08006f94  00016f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f9c  08006f9c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fa0  08006fa0  00016fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001470  20000080  08007024  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014f0  08007024  000214f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e40  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e7  00000000  00000000  00035ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000392d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f40  00000000  00000000  0003a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018dbb  00000000  00000000  0003b2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015210  00000000  00000000  00054083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093cff  00000000  00000000  00069293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcf92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004098  00000000  00000000  000fcfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000080 	.word	0x20000080
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006e28 	.word	0x08006e28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000084 	.word	0x20000084
 8000100:	08006e28 	.word	0x08006e28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_DMA_Init+0x38>)
 8000624:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_DMA_Init+0x38>)
 8000628:	2101      	movs	r1, #1
 800062a:	430a      	orrs	r2, r1
 800062c:	639a      	str	r2, [r3, #56]	; 0x38
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_DMA_Init+0x38>)
 8000630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	2009      	movs	r0, #9
 8000640:	f000 fe9c 	bl	800137c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000644:	2009      	movs	r0, #9
 8000646:	f000 feae 	bl	80013a6 <HAL_NVIC_EnableIRQ>

}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b002      	add	sp, #8
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	40021000 	.word	0x40021000

08000658 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b08b      	sub	sp, #44	; 0x2c
 800065c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	2414      	movs	r4, #20
 8000660:	193b      	adds	r3, r7, r4
 8000662:	0018      	movs	r0, r3
 8000664:	2314      	movs	r3, #20
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f005 fec5 	bl	80063f8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	4b50      	ldr	r3, [pc, #320]	; (80007b0 <MX_GPIO_Init+0x158>)
 8000670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000672:	4b4f      	ldr	r3, [pc, #316]	; (80007b0 <MX_GPIO_Init+0x158>)
 8000674:	2104      	movs	r1, #4
 8000676:	430a      	orrs	r2, r1
 8000678:	635a      	str	r2, [r3, #52]	; 0x34
 800067a:	4b4d      	ldr	r3, [pc, #308]	; (80007b0 <MX_GPIO_Init+0x158>)
 800067c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800067e:	2204      	movs	r2, #4
 8000680:	4013      	ands	r3, r2
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000686:	4b4a      	ldr	r3, [pc, #296]	; (80007b0 <MX_GPIO_Init+0x158>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800068a:	4b49      	ldr	r3, [pc, #292]	; (80007b0 <MX_GPIO_Init+0x158>)
 800068c:	2120      	movs	r1, #32
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	; 0x34
 8000692:	4b47      	ldr	r3, [pc, #284]	; (80007b0 <MX_GPIO_Init+0x158>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000696:	2220      	movs	r2, #32
 8000698:	4013      	ands	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a2:	4b43      	ldr	r3, [pc, #268]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006a4:	2101      	movs	r1, #1
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	; 0x34
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ae:	2201      	movs	r2, #1
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ba:	4b3d      	ldr	r3, [pc, #244]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006bc:	2102      	movs	r1, #2
 80006be:	430a      	orrs	r2, r1
 80006c0:	635a      	str	r2, [r3, #52]	; 0x34
 80006c2:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <MX_GPIO_Init+0x158>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c6:	2202      	movs	r2, #2
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|TEST_Pin, GPIO_PIN_RESET);
 80006ce:	2381      	movs	r3, #129	; 0x81
 80006d0:	0119      	lsls	r1, r3, #4
 80006d2:	23a0      	movs	r3, #160	; 0xa0
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	2200      	movs	r2, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f001 fb20 	bl	8001d1e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	4a34      	ldr	r2, [pc, #208]	; (80007b4 <MX_GPIO_Init+0x15c>)
 80006e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2203      	movs	r2, #3
 80006e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	4a31      	ldr	r2, [pc, #196]	; (80007b8 <MX_GPIO_Init+0x160>)
 80006f4:	0019      	movs	r1, r3
 80006f6:	0010      	movs	r0, r2
 80006f8:	f001 f990 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2204      	movs	r2, #4
 8000700:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000702:	193b      	adds	r3, r7, r4
 8000704:	2203      	movs	r2, #3
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	193b      	adds	r3, r7, r4
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800070e:	193b      	adds	r3, r7, r4
 8000710:	4a2a      	ldr	r2, [pc, #168]	; (80007bc <MX_GPIO_Init+0x164>)
 8000712:	0019      	movs	r1, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f001 f981 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MODE_KEY_Pin|SHOT_KEY_Pin;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2203      	movs	r2, #3
 800071e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000726:	193b      	adds	r3, r7, r4
 8000728:	2201      	movs	r2, #1
 800072a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	193a      	adds	r2, r7, r4
 800072e:	23a0      	movs	r3, #160	; 0xa0
 8000730:	05db      	lsls	r3, r3, #23
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f001 f971 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|TEST_Pin;
 800073a:	0021      	movs	r1, r4
 800073c:	187b      	adds	r3, r7, r1
 800073e:	2281      	movs	r2, #129	; 0x81
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	000c      	movs	r4, r1
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2201      	movs	r2, #1
 8000750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	193b      	adds	r3, r7, r4
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000758:	193a      	adds	r2, r7, r4
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	0011      	movs	r1, r2
 8000760:	0018      	movs	r0, r3
 8000762:	f001 f95b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA8 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_12
 8000766:	193b      	adds	r3, r7, r4
 8000768:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <MX_GPIO_Init+0x168>)
 800076a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800076c:	193b      	adds	r3, r7, r4
 800076e:	2203      	movs	r2, #3
 8000770:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	193b      	adds	r3, r7, r4
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	193a      	adds	r2, r7, r4
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f001 f94b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000786:	0021      	movs	r1, r4
 8000788:	187b      	adds	r3, r7, r1
 800078a:	223c      	movs	r2, #60	; 0x3c
 800078c:	32ff      	adds	r2, #255	; 0xff
 800078e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000790:	187b      	adds	r3, r7, r1
 8000792:	2203      	movs	r2, #3
 8000794:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	187b      	adds	r3, r7, r1
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	187b      	adds	r3, r7, r1
 800079e:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <MX_GPIO_Init+0x16c>)
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f001 f93a 	bl	8001a1c <HAL_GPIO_Init>

}
 80007a8:	46c0      	nop			; (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	b00b      	add	sp, #44	; 0x2c
 80007ae:	bd90      	pop	{r4, r7, pc}
 80007b0:	40021000 	.word	0x40021000
 80007b4:	0000c040 	.word	0x0000c040
 80007b8:	50000800 	.word	0x50000800
 80007bc:	50001400 	.word	0x50001400
 80007c0:	00009160 	.word	0x00009160
 80007c4:	50000400 	.word	0x50000400

080007c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007cc:	f000 fc80 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d0:	f000 f811 	bl	80007f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d4:	f7ff ff40 	bl	8000658 <MX_GPIO_Init>
  MX_DMA_Init();
 80007d8:	f7ff ff20 	bl	800061c <MX_DMA_Init>
  MX_TIM3_Init();
 80007dc:	f000 fa0e 	bl	8000bfc <MX_TIM3_Init>
  MX_TIM2_Init();
 80007e0:	f000 f98e 	bl	8000b00 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80007e4:	f000 fb8a 	bl	8000efc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 fb3a 	bl	8000e60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80007ec:	f005 face 	bl	8005d8c <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80007f0:	f005 fade 	bl	8005db0 <loop>
 80007f4:	e7fc      	b.n	80007f0 <main+0x28>

080007f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f6:	b590      	push	{r4, r7, lr}
 80007f8:	b09d      	sub	sp, #116	; 0x74
 80007fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fc:	2438      	movs	r4, #56	; 0x38
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	0018      	movs	r0, r3
 8000802:	2338      	movs	r3, #56	; 0x38
 8000804:	001a      	movs	r2, r3
 8000806:	2100      	movs	r1, #0
 8000808:	f005 fdf6 	bl	80063f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	2328      	movs	r3, #40	; 0x28
 800080e:	18fb      	adds	r3, r7, r3
 8000810:	0018      	movs	r0, r3
 8000812:	2310      	movs	r3, #16
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f005 fdee 	bl	80063f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800081c:	003b      	movs	r3, r7
 800081e:	0018      	movs	r0, r3
 8000820:	2328      	movs	r3, #40	; 0x28
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 fde7 	bl	80063f8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082a:	2380      	movs	r3, #128	; 0x80
 800082c:	009b      	lsls	r3, r3, #2
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fa92 	bl	8001d58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2202      	movs	r2, #2
 8000838:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2280      	movs	r2, #128	; 0x80
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000842:	0021      	movs	r1, r4
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2240      	movs	r2, #64	; 0x40
 800084e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2202      	movs	r2, #2
 8000854:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2202      	movs	r2, #2
 800085a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2208      	movs	r2, #8
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2280      	movs	r2, #128	; 0x80
 800086c:	0292      	lsls	r2, r2, #10
 800086e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2280      	movs	r2, #128	; 0x80
 8000874:	0492      	lsls	r2, r2, #18
 8000876:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2280      	movs	r2, #128	; 0x80
 800087c:	0592      	lsls	r2, r2, #22
 800087e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	187b      	adds	r3, r7, r1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fab4 	bl	8001df0 <HAL_RCC_OscConfig>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088c:	f000 f828 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	2128      	movs	r1, #40	; 0x28
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2207      	movs	r2, #7
 8000896:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2202      	movs	r2, #2
 800089c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2102      	movs	r1, #2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 fdbe 	bl	8002430 <HAL_RCC_ClockConfig>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008b8:	f000 f812 	bl	80008e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008bc:	003b      	movs	r3, r7
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	003b      	movs	r3, r7
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 ff5a 	bl	8002784 <HAL_RCCEx_PeriphCLKConfig>
 80008d0:	1e03      	subs	r3, r0, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008d4:	f000 f804 	bl	80008e0 <Error_Handler>
  }
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b01d      	add	sp, #116	; 0x74
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <HAL_MspInit+0x44>)
 80008f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_MspInit+0x44>)
 80008f8:	2101      	movs	r1, #1
 80008fa:	430a      	orrs	r2, r1
 80008fc:	641a      	str	r2, [r3, #64]	; 0x40
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_MspInit+0x44>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000902:	2201      	movs	r2, #1
 8000904:	4013      	ands	r3, r2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_MspInit+0x44>)
 800090c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_MspInit+0x44>)
 8000910:	2180      	movs	r1, #128	; 0x80
 8000912:	0549      	lsls	r1, r1, #21
 8000914:	430a      	orrs	r2, r1
 8000916:	63da      	str	r2, [r3, #60]	; 0x3c
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <HAL_MspInit+0x44>)
 800091a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091c:	2380      	movs	r3, #128	; 0x80
 800091e:	055b      	lsls	r3, r3, #21
 8000920:	4013      	ands	r3, r2
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b002      	add	sp, #8
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40021000 	.word	0x40021000

08000934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000938:	e7fe      	b.n	8000938 <NMI_Handler+0x4>

0800093a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093e:	e7fe      	b.n	800093e <HardFault_Handler+0x4>

08000940 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 fc24 	bl	80011a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
  if(DMA1->ISR & 0x02)
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <DMA1_Channel1_IRQHandler+0x28>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2202      	movs	r2, #2
 800096e:	4013      	ands	r3, r2
 8000970:	d004      	beq.n	800097c <DMA1_Channel1_IRQHandler+0x18>
		 HAL_TIM_PWM_Stop_DMA(&htim2, TIM_CHANNEL_4);
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <DMA1_Channel1_IRQHandler+0x2c>)
 8000974:	210c      	movs	r1, #12
 8000976:	0018      	movs	r0, r3
 8000978:	f002 fbf0 	bl	800315c <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <DMA1_Channel1_IRQHandler+0x30>)
 800097e:	0018      	movs	r0, r3
 8000980:	f000 ff0a 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40020000 	.word	0x40020000
 8000990:	200012a4 	.word	0x200012a4
 8000994:	20001248 	.word	0x20001248

08000998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <USART1_IRQHandler+0x14>)
 800099e:	0018      	movs	r0, r3
 80009a0:	f003 fd3e 	bl	8004420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	200012f0 	.word	0x200012f0

080009b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	e00a      	b.n	80009d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009c2:	e000      	b.n	80009c6 <_read+0x16>
 80009c4:	bf00      	nop
 80009c6:	0001      	movs	r1, r0
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	1c5a      	adds	r2, r3, #1
 80009cc:	60ba      	str	r2, [r7, #8]
 80009ce:	b2ca      	uxtb	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	3301      	adds	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbf0      	blt.n	80009c2 <_read+0x12>
	}

return len;
 80009e0:	687b      	ldr	r3, [r7, #4]
}
 80009e2:	0018      	movs	r0, r3
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b006      	add	sp, #24
 80009e8:	bd80      	pop	{r7, pc}

080009ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	e009      	b.n	8000a10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	1c5a      	adds	r2, r3, #1
 8000a00:	60ba      	str	r2, [r7, #8]
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0018      	movs	r0, r3
 8000a06:	f005 fb37 	bl	8006078 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf1      	blt.n	80009fc <_write+0x12>
	}
	return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b006      	add	sp, #24
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_close>:

int _close(int file)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
	return -1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	425b      	negs	r3, r3
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
 8000a3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	2280      	movs	r2, #128	; 0x80
 8000a44:	0192      	lsls	r2, r2, #6
 8000a46:	605a      	str	r2, [r3, #4]
	return 0;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_isatty>:

int _isatty(int file)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b082      	sub	sp, #8
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	6078      	str	r0, [r7, #4]
	return 1;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a84:	4a14      	ldr	r2, [pc, #80]	; (8000ad8 <_sbrk+0x5c>)
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <_sbrk+0x60>)
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a90:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <_sbrk+0x64>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d102      	bne.n	8000a9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <_sbrk+0x64>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	; (8000ae4 <_sbrk+0x68>)
 8000a9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <_sbrk+0x64>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	18d3      	adds	r3, r2, r3
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d207      	bcs.n	8000abc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aac:	f005 fc7a 	bl	80063a4 <__errno>
 8000ab0:	0003      	movs	r3, r0
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	425b      	negs	r3, r3
 8000aba:	e009      	b.n	8000ad0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	18d2      	adds	r2, r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <_sbrk+0x64>)
 8000acc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ace:	68fb      	ldr	r3, [r7, #12]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b006      	add	sp, #24
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20002000 	.word	0x20002000
 8000adc:	00000400 	.word	0x00000400
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	200014f0 	.word	0x200014f0

08000ae8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <SystemInit+0x14>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	0512      	lsls	r2, r2, #20
 8000af2:	609a      	str	r2, [r3, #8]
#endif
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
DMA_HandleTypeDef hdma_tim2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08e      	sub	sp, #56	; 0x38
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	2328      	movs	r3, #40	; 0x28
 8000b08:	18fb      	adds	r3, r7, r3
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	2310      	movs	r3, #16
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2100      	movs	r1, #0
 8000b12:	f005 fc71 	bl	80063f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b16:	231c      	movs	r3, #28
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2100      	movs	r1, #0
 8000b22:	f005 fc69 	bl	80063f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	003b      	movs	r3, r7
 8000b28:	0018      	movs	r0, r3
 8000b2a:	231c      	movs	r3, #28
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f005 fc62 	bl	80063f8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b34:	4b30      	ldr	r3, [pc, #192]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	05d2      	lsls	r2, r2, #23
 8000b3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b3c:	4b2e      	ldr	r3, [pc, #184]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8000b48:	4b2b      	ldr	r3, [pc, #172]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b4a:	224f      	movs	r2, #79	; 0x4f
 8000b4c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 ff8b 	bl	8002a78 <HAL_TIM_Base_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f7ff febb 	bl	80008e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b6a:	2128      	movs	r1, #40	; 0x28
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2280      	movs	r2, #128	; 0x80
 8000b70:	0152      	lsls	r2, r2, #5
 8000b72:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b74:	187a      	adds	r2, r7, r1
 8000b76:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f002 fcbe 	bl	80034fc <HAL_TIM_ConfigClockSource>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000b84:	f7ff feac 	bl	80008e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 ffcc 	bl	8002b28 <HAL_TIM_PWM_Init>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000b94:	f7ff fea4 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	211c      	movs	r1, #28
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f003 fa2f 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000bb6:	f7ff fe93 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	2260      	movs	r2, #96	; 0x60
 8000bbe:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000bc0:	003b      	movs	r3, r7
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc6:	003b      	movs	r3, r7
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	003b      	movs	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bd2:	0039      	movs	r1, r7
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f002 fb99 	bl	8003310 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	1e03      	subs	r3, r0, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000be2:	f7ff fe7d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <MX_TIM2_Init+0xf8>)
 8000be8:	0018      	movs	r0, r3
 8000bea:	f000 f8d3 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b00e      	add	sp, #56	; 0x38
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	200012a4 	.word	0x200012a4

08000bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c02:	231c      	movs	r3, #28
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	0018      	movs	r0, r3
 8000c08:	230c      	movs	r3, #12
 8000c0a:	001a      	movs	r2, r3
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	f005 fbf3 	bl	80063f8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c12:	003b      	movs	r3, r7
 8000c14:	0018      	movs	r0, r3
 8000c16:	231c      	movs	r3, #28
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f005 fbec 	bl	80063f8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c22:	4a25      	ldr	r2, [pc, #148]	; (8000cb8 <MX_TIM3_Init+0xbc>)
 8000c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000c26:	4b23      	ldr	r3, [pc, #140]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c28:	223f      	movs	r2, #63	; 0x3f
 8000c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <MX_TIM3_Init+0xc0>)
 8000c36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 ff6e 	bl	8002b28 <HAL_TIM_PWM_Init>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c50:	f7ff fe46 	bl	80008e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c54:	211c      	movs	r1, #28
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c62:	187a      	adds	r2, r7, r1
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f003 f9d1 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000c72:	f7ff fe35 	bl	80008e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c76:	003b      	movs	r3, r7
 8000c78:	2260      	movs	r2, #96	; 0x60
 8000c7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 1000;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	22fa      	movs	r2, #250	; 0xfa
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c84:	003b      	movs	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c90:	0039      	movs	r1, r7
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000c94:	2204      	movs	r2, #4
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 fb3a 	bl	8003310 <HAL_TIM_PWM_ConfigChannel>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8000ca0:	f7ff fe1e 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <MX_TIM3_Init+0xb8>)
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 f874 	bl	8000d94 <HAL_TIM_MspPostInit>

}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b00a      	add	sp, #40	; 0x28
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200011fc 	.word	0x200011fc
 8000cb8:	40000400 	.word	0x40000400
 8000cbc:	00004e1f 	.word	0x00004e1f

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	2380      	movs	r3, #128	; 0x80
 8000cce:	05db      	lsls	r3, r3, #23
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d136      	bne.n	8000d42 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd4:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <HAL_TIM_Base_MspInit+0x8c>)
 8000cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_TIM_Base_MspInit+0x8c>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_TIM_Base_MspInit+0x8c>)
 8000ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel1;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <HAL_TIM_Base_MspInit+0x94>)
 8000cf0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Request = DMA_REQUEST_TIM2_CH4;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000cf4:	221d      	movs	r2, #29
 8000cf6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cf8:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000cfa:	2210      	movs	r2, #16
 8000cfc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d06:	2280      	movs	r2, #128	; 0x80
 8000d08:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	0092      	lsls	r2, r2, #2
 8000d10:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d14:	2280      	movs	r2, #128	; 0x80
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f000 fb59 	bl	80013e0 <HAL_DMA_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000d32:	f7ff fdd5 	bl	80008e0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_TIM_Base_MspInit+0x90>)
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	20001248 	.word	0x20001248
 8000d54:	40020008 	.word	0x40020008

08000d58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a09      	ldr	r2, [pc, #36]	; (8000d8c <HAL_TIM_PWM_MspInit+0x34>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10b      	bne.n	8000d82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_TIM_PWM_MspInit+0x38>)
 8000d6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_TIM_PWM_MspInit+0x38>)
 8000d70:	2102      	movs	r1, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_TIM_PWM_MspInit+0x38>)
 8000d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b004      	add	sp, #16
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40000400 	.word	0x40000400
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2414      	movs	r4, #20
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f005 fb26 	bl	80063f8 <memset>
  if(timHandle->Instance==TIM2)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d123      	bne.n	8000e00 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbc:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dd0:	0021      	movs	r1, r4
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2202      	movs	r2, #2
 8000ddc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2203      	movs	r2, #3
 8000de8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2202      	movs	r2, #2
 8000dee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df0:	187a      	adds	r2, r7, r1
 8000df2:	23a0      	movs	r3, #160	; 0xa0
 8000df4:	05db      	lsls	r3, r3, #23
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f000 fe0f 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dfe:	e027      	b.n	8000e50 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_TIM_MspPostInit+0xc8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d122      	bne.n	8000e50 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000e0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	635a      	str	r2, [r3, #52]	; 0x34
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_TIM_MspPostInit+0xc4>)
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e22:	2114      	movs	r1, #20
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2201      	movs	r2, #1
 8000e34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2203      	movs	r2, #3
 8000e3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	187a      	adds	r2, r7, r1
 8000e44:	23a0      	movs	r3, #160	; 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 fde6 	bl	8001a1c <HAL_GPIO_Init>
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b00b      	add	sp, #44	; 0x2c
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40000400 	.word	0x40000400

08000e60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e66:	4a24      	ldr	r2, [pc, #144]	; (8000ef8 <MX_USART1_UART_Init+0x98>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e6c:	2296      	movs	r2, #150	; 0x96
 8000e6e:	0192      	lsls	r2, r2, #6
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b18      	ldr	r3, [pc, #96]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e9c:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 f918 	bl	80040e0 <HAL_UART_Init>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000eb4:	f7ff fd14 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f004 fda7 	bl	8005a10 <HAL_UARTEx_SetTxFifoThreshold>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ec6:	f7ff fd0b 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f004 fdde 	bl	8005a90 <HAL_UARTEx_SetRxFifoThreshold>
 8000ed4:	1e03      	subs	r3, r0, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ed8:	f7ff fd02 	bl	80008e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <MX_USART1_UART_Init+0x94>)
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f004 fd5c 	bl	800599c <HAL_UARTEx_DisableFifoMode>
 8000ee4:	1e03      	subs	r3, r0, #0
 8000ee6:	d001      	beq.n	8000eec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ee8:	f7ff fcfa 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	200012f0 	.word	0x200012f0
 8000ef8:	40013800 	.word	0x40013800

08000efc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <MX_USART2_UART_Init+0x64>)
 8000f04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f08:	2296      	movs	r2, #150	; 0x96
 8000f0a:	0192      	lsls	r2, r2, #6
 8000f0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f22:	2208      	movs	r2, #8
 8000f24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <MX_USART2_UART_Init+0x60>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f003 f920 	bl	800418c <HAL_HalfDuplex_Init>
 8000f4c:	1e03      	subs	r3, r0, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f50:	f7ff fcc6 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20001380 	.word	0x20001380
 8000f60:	40004400 	.word	0x40004400

08000f64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b08d      	sub	sp, #52	; 0x34
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	241c      	movs	r4, #28
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	0018      	movs	r0, r3
 8000f72:	2314      	movs	r3, #20
 8000f74:	001a      	movs	r2, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	f005 fa3e 	bl	80063f8 <memset>
  if(uartHandle->Instance==USART1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a3a      	ldr	r2, [pc, #232]	; (800106c <HAL_UART_MspInit+0x108>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d138      	bne.n	8000ff8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f86:	4b3a      	ldr	r3, [pc, #232]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8a:	4b39      	ldr	r3, [pc, #228]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000f8c:	2180      	movs	r1, #128	; 0x80
 8000f8e:	01c9      	lsls	r1, r1, #7
 8000f90:	430a      	orrs	r2, r1
 8000f92:	641a      	str	r2, [r3, #64]	; 0x40
 8000f94:	4b36      	ldr	r3, [pc, #216]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	01db      	lsls	r3, r3, #7
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
 8000fa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b33      	ldr	r3, [pc, #204]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa6:	4b32      	ldr	r3, [pc, #200]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000fa8:	2102      	movs	r1, #2
 8000faa:	430a      	orrs	r2, r1
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	4b30      	ldr	r3, [pc, #192]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fba:	0021      	movs	r1, r4
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	22c0      	movs	r2, #192	; 0xc0
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	4a25      	ldr	r2, [pc, #148]	; (8001074 <HAL_UART_MspInit+0x110>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	0010      	movs	r0, r2
 8000fe2:	f000 fd1b 	bl	8001a1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	201b      	movs	r0, #27
 8000fec:	f000 f9c6 	bl	800137c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ff0:	201b      	movs	r0, #27
 8000ff2:	f000 f9d8 	bl	80013a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ff6:	e035      	b.n	8001064 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <HAL_UART_MspInit+0x114>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d130      	bne.n	8001064 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8001004:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001006:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8001008:	2180      	movs	r1, #128	; 0x80
 800100a:	0289      	lsls	r1, r1, #10
 800100c:	430a      	orrs	r2, r1
 800100e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8001012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8001020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_UART_MspInit+0x10c>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	635a      	str	r2, [r3, #52]	; 0x34
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_UART_MspInit+0x10c>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	2201      	movs	r2, #1
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001036:	211c      	movs	r1, #28
 8001038:	187b      	adds	r3, r7, r1
 800103a:	2204      	movs	r2, #4
 800103c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800103e:	187b      	adds	r3, r7, r1
 8001040:	2212      	movs	r2, #18
 8001042:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2201      	movs	r2, #1
 8001048:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2201      	movs	r2, #1
 8001054:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	187a      	adds	r2, r7, r1
 8001058:	23a0      	movs	r3, #160	; 0xa0
 800105a:	05db      	lsls	r3, r3, #23
 800105c:	0011      	movs	r1, r2
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fcdc 	bl	8001a1c <HAL_GPIO_Init>
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	b00d      	add	sp, #52	; 0x34
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	40013800 	.word	0x40013800
 8001070:	40021000 	.word	0x40021000
 8001074:	50000400 	.word	0x50000400
 8001078:	40004400 	.word	0x40004400

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001080:	f7ff fd32 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f005 f981 	bl	80063b0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010ae:	f7ff fb8b 	bl	80007c8 <main>

080010b2 <LoopForever>:

LoopForever:
  b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80010c0:	08006fa4 	.word	0x08006fa4
  ldr r2, =_sbss
 80010c4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80010c8:	200014f0 	.word	0x200014f0

080010cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <HAL_Init+0x3c>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Init+0x3c>)
 80010e2:	2180      	movs	r1, #128	; 0x80
 80010e4:	0049      	lsls	r1, r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 f810 	bl	8001110 <HAL_InitTick>
 80010f0:	1e03      	subs	r3, r0, #0
 80010f2:	d003      	beq.n	80010fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010f4:	1dfb      	adds	r3, r7, #7
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e001      	b.n	8001100 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fbf6 	bl	80008ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001118:	230f      	movs	r3, #15
 800111a:	18fb      	adds	r3, r7, r3
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_InitTick+0x88>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d02b      	beq.n	8001180 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001128:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_InitTick+0x8c>)
 800112a:	681c      	ldr	r4, [r3, #0]
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <HAL_InitTick+0x88>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	0019      	movs	r1, r3
 8001132:	23fa      	movs	r3, #250	; 0xfa
 8001134:	0098      	lsls	r0, r3, #2
 8001136:	f7fe ffe5 	bl	8000104 <__udivsi3>
 800113a:	0003      	movs	r3, r0
 800113c:	0019      	movs	r1, r3
 800113e:	0020      	movs	r0, r4
 8001140:	f7fe ffe0 	bl	8000104 <__udivsi3>
 8001144:	0003      	movs	r3, r0
 8001146:	0018      	movs	r0, r3
 8001148:	f000 f93d 	bl	80013c6 <HAL_SYSTICK_Config>
 800114c:	1e03      	subs	r3, r0, #0
 800114e:	d112      	bne.n	8001176 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b03      	cmp	r3, #3
 8001154:	d80a      	bhi.n	800116c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2301      	movs	r3, #1
 800115a:	425b      	negs	r3, r3
 800115c:	2200      	movs	r2, #0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f90c 	bl	800137c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_InitTick+0x90>)
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	e00d      	b.n	8001188 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800116c:	230f      	movs	r3, #15
 800116e:	18fb      	adds	r3, r7, r3
 8001170:	2201      	movs	r2, #1
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	e008      	b.n	8001188 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001176:	230f      	movs	r3, #15
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e003      	b.n	8001188 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001180:	230f      	movs	r3, #15
 8001182:	18fb      	adds	r3, r7, r3
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001188:	230f      	movs	r3, #15
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	781b      	ldrb	r3, [r3, #0]
}
 800118e:	0018      	movs	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	b005      	add	sp, #20
 8001194:	bd90      	pop	{r4, r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000008 	.word	0x20000008
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000004 	.word	0x20000004

080011a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_IncTick+0x1c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	001a      	movs	r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_IncTick+0x20>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	18d2      	adds	r2, r2, r3
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_IncTick+0x20>)
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	20000008 	.word	0x20000008
 80011c4:	20001410 	.word	0x20001410

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <HAL_GetTick+0x10>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	46c0      	nop			; (mov r8, r8)
 80011d8:	20001410 	.word	0x20001410

080011dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff fff0 	bl	80011c8 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	3301      	adds	r3, #1
 80011f4:	d005      	beq.n	8001202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_Delay+0x44>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	001a      	movs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001202:	46c0      	nop			; (mov r8, r8)
 8001204:	f7ff ffe0 	bl	80011c8 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	429a      	cmp	r2, r3
 8001212:	d8f7      	bhi.n	8001204 <HAL_Delay+0x28>
  {
  }
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	b004      	add	sp, #16
 800121c:	bd80      	pop	{r7, pc}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	20000008 	.word	0x20000008

08001224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	0002      	movs	r2, r0
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b7f      	cmp	r3, #127	; 0x7f
 8001236:	d809      	bhi.n	800124c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001238:	1dfb      	adds	r3, r7, #7
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	001a      	movs	r2, r3
 800123e:	231f      	movs	r3, #31
 8001240:	401a      	ands	r2, r3
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_EnableIRQ+0x30>)
 8001244:	2101      	movs	r1, #1
 8001246:	4091      	lsls	r1, r2
 8001248:	000a      	movs	r2, r1
 800124a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b002      	add	sp, #8
 8001252:	bd80      	pop	{r7, pc}
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b590      	push	{r4, r7, lr}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	0002      	movs	r2, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b7f      	cmp	r3, #127	; 0x7f
 800126c:	d828      	bhi.n	80012c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126e:	4a2f      	ldr	r2, [pc, #188]	; (800132c <__NVIC_SetPriority+0xd4>)
 8001270:	1dfb      	adds	r3, r7, #7
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b25b      	sxtb	r3, r3
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	33c0      	adds	r3, #192	; 0xc0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	589b      	ldr	r3, [r3, r2]
 800127e:	1dfa      	adds	r2, r7, #7
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	0011      	movs	r1, r2
 8001284:	2203      	movs	r2, #3
 8001286:	400a      	ands	r2, r1
 8001288:	00d2      	lsls	r2, r2, #3
 800128a:	21ff      	movs	r1, #255	; 0xff
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	43d2      	mvns	r2, r2
 8001292:	401a      	ands	r2, r3
 8001294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	22ff      	movs	r2, #255	; 0xff
 800129c:	401a      	ands	r2, r3
 800129e:	1dfb      	adds	r3, r7, #7
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	0018      	movs	r0, r3
 80012a4:	2303      	movs	r3, #3
 80012a6:	4003      	ands	r3, r0
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	481f      	ldr	r0, [pc, #124]	; (800132c <__NVIC_SetPriority+0xd4>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	089b      	lsrs	r3, r3, #2
 80012b6:	430a      	orrs	r2, r1
 80012b8:	33c0      	adds	r3, #192	; 0xc0
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012be:	e031      	b.n	8001324 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c0:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <__NVIC_SetPriority+0xd8>)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0019      	movs	r1, r3
 80012c8:	230f      	movs	r3, #15
 80012ca:	400b      	ands	r3, r1
 80012cc:	3b08      	subs	r3, #8
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3306      	adds	r3, #6
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	18d3      	adds	r3, r2, r3
 80012d6:	3304      	adds	r3, #4
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	1dfa      	adds	r2, r7, #7
 80012dc:	7812      	ldrb	r2, [r2, #0]
 80012de:	0011      	movs	r1, r2
 80012e0:	2203      	movs	r2, #3
 80012e2:	400a      	ands	r2, r1
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	21ff      	movs	r1, #255	; 0xff
 80012e8:	4091      	lsls	r1, r2
 80012ea:	000a      	movs	r2, r1
 80012ec:	43d2      	mvns	r2, r2
 80012ee:	401a      	ands	r2, r3
 80012f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	019b      	lsls	r3, r3, #6
 80012f6:	22ff      	movs	r2, #255	; 0xff
 80012f8:	401a      	ands	r2, r3
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	0018      	movs	r0, r3
 8001300:	2303      	movs	r3, #3
 8001302:	4003      	ands	r3, r0
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001308:	4809      	ldr	r0, [pc, #36]	; (8001330 <__NVIC_SetPriority+0xd8>)
 800130a:	1dfb      	adds	r3, r7, #7
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	001c      	movs	r4, r3
 8001310:	230f      	movs	r3, #15
 8001312:	4023      	ands	r3, r4
 8001314:	3b08      	subs	r3, #8
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	430a      	orrs	r2, r1
 800131a:	3306      	adds	r3, #6
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	18c3      	adds	r3, r0, r3
 8001320:	3304      	adds	r3, #4
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	46c0      	nop			; (mov r8, r8)
 8001326:	46bd      	mov	sp, r7
 8001328:	b003      	add	sp, #12
 800132a:	bd90      	pop	{r4, r7, pc}
 800132c:	e000e100 	.word	0xe000e100
 8001330:	e000ed00 	.word	0xe000ed00

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1e5a      	subs	r2, r3, #1
 8001340:	2380      	movs	r3, #128	; 0x80
 8001342:	045b      	lsls	r3, r3, #17
 8001344:	429a      	cmp	r2, r3
 8001346:	d301      	bcc.n	800134c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001348:	2301      	movs	r3, #1
 800134a:	e010      	b.n	800136e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <SysTick_Config+0x44>)
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	3a01      	subs	r2, #1
 8001352:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001354:	2301      	movs	r3, #1
 8001356:	425b      	negs	r3, r3
 8001358:	2103      	movs	r1, #3
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff ff7c 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <SysTick_Config+0x44>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <SysTick_Config+0x44>)
 8001368:	2207      	movs	r2, #7
 800136a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800136c:	2300      	movs	r3, #0
}
 800136e:	0018      	movs	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	b002      	add	sp, #8
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			; (mov r8, r8)
 8001378:	e000e010 	.word	0xe000e010

0800137c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	210f      	movs	r1, #15
 8001388:	187b      	adds	r3, r7, r1
 800138a:	1c02      	adds	r2, r0, #0
 800138c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	187b      	adds	r3, r7, r1
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	b25b      	sxtb	r3, r3
 8001396:	0011      	movs	r1, r2
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b004      	add	sp, #16
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	0002      	movs	r2, r0
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff33 	bl	8001224 <__NVIC_EnableIRQ>
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b002      	add	sp, #8
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	0018      	movs	r0, r3
 80013d2:	f7ff ffaf 	bl	8001334 <SysTick_Config>
 80013d6:	0003      	movs	r3, r0
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d101      	bne.n	80013f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e077      	b.n	80014e2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a3d      	ldr	r2, [pc, #244]	; (80014ec <HAL_DMA_Init+0x10c>)
 80013f8:	4694      	mov	ip, r2
 80013fa:	4463      	add	r3, ip
 80013fc:	2114      	movs	r1, #20
 80013fe:	0018      	movs	r0, r3
 8001400:	f7fe fe80 	bl	8000104 <__udivsi3>
 8001404:	0003      	movs	r3, r0
 8001406:	009a      	lsls	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2225      	movs	r2, #37	; 0x25
 8001410:	2102      	movs	r1, #2
 8001412:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4934      	ldr	r1, [pc, #208]	; (80014f0 <HAL_DMA_Init+0x110>)
 8001420:	400a      	ands	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6819      	ldr	r1, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	431a      	orrs	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	431a      	orrs	r2, r3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	0018      	movs	r0, r3
 800145e:	f000 fa8d 	bl	800197c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	01db      	lsls	r3, r3, #7
 800146a:	429a      	cmp	r2, r3
 800146c:	d102      	bne.n	8001474 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	213f      	movs	r1, #63	; 0x3f
 800147e:	400a      	ands	r2, r1
 8001480:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800148a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d011      	beq.n	80014b8 <HAL_DMA_Init+0xd8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d80d      	bhi.n	80014b8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	0018      	movs	r0, r3
 80014a0:	f000 fa98 	bl	80019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	e008      	b.n	80014ca <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2200      	movs	r2, #0
 80014c8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2225      	movs	r2, #37	; 0x25
 80014d4:	2101      	movs	r1, #1
 80014d6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2224      	movs	r2, #36	; 0x24
 80014dc:	2100      	movs	r1, #0
 80014de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	0018      	movs	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	b002      	add	sp, #8
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	46c0      	nop			; (mov r8, r8)
 80014ec:	bffdfff8 	.word	0xbffdfff8
 80014f0:	ffff800f 	.word	0xffff800f

080014f4 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
 8001500:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001502:	2317      	movs	r3, #23
 8001504:	18fb      	adds	r3, r7, r3
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2224      	movs	r2, #36	; 0x24
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_DMA_Start_IT+0x24>
 8001514:	2302      	movs	r3, #2
 8001516:	e06f      	b.n	80015f8 <HAL_DMA_Start_IT+0x104>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	2101      	movs	r1, #1
 800151e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2225      	movs	r2, #37	; 0x25
 8001524:	5c9b      	ldrb	r3, [r3, r2]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	2b01      	cmp	r3, #1
 800152a:	d157      	bne.n	80015dc <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2225      	movs	r2, #37	; 0x25
 8001530:	2102      	movs	r1, #2
 8001532:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	438a      	bics	r2, r1
 8001548:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f9d3 	bl	80018fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	2b00      	cmp	r3, #0
 800155c:	d008      	beq.n	8001570 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	210e      	movs	r1, #14
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e00f      	b.n	8001590 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2104      	movs	r1, #4
 800157c:	438a      	bics	r2, r1
 800157e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	210a      	movs	r1, #10
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	4013      	ands	r3, r2
 800159c:	d008      	beq.n	80015b0 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	0049      	lsls	r1, r1, #1
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	2180      	movs	r1, #128	; 0x80
 80015c4:	0049      	lsls	r1, r1, #1
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
 80015da:	e00a      	b.n	80015f2 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2224      	movs	r2, #36	; 0x24
 80015e6:	2100      	movs	r1, #0
 80015e8:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80015ea:	2317      	movs	r3, #23
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2201      	movs	r2, #1
 80015f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80015f2:	2317      	movs	r3, #23
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	781b      	ldrb	r3, [r3, #0]
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b006      	add	sp, #24
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e050      	b.n	80016b4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2225      	movs	r2, #37	; 0x25
 8001616:	5c9b      	ldrb	r3, [r3, r2]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d008      	beq.n	8001630 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2204      	movs	r2, #4
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2224      	movs	r2, #36	; 0x24
 8001628:	2100      	movs	r1, #0
 800162a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e041      	b.n	80016b4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	210e      	movs	r1, #14
 800163c:	438a      	bics	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	491c      	ldr	r1, [pc, #112]	; (80016bc <HAL_DMA_Abort+0xbc>)
 800164c:	400a      	ands	r2, r1
 800164e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_DMA_Abort+0xc0>)
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	221c      	movs	r2, #28
 800166a:	4013      	ands	r3, r2
 800166c:	2201      	movs	r2, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_DMA_Abort+0xc0>)
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800167e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00c      	beq.n	80016a2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_DMA_Abort+0xbc>)
 8001694:	400a      	ands	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80016a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2225      	movs	r2, #37	; 0x25
 80016a6:	2101      	movs	r1, #1
 80016a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2224      	movs	r2, #36	; 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b002      	add	sp, #8
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	fffffeff 	.word	0xfffffeff
 80016c0:	40020000 	.word	0x40020000

080016c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016cc:	210f      	movs	r1, #15
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2225      	movs	r2, #37	; 0x25
 80016d8:	5c9b      	ldrb	r3, [r3, r2]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d006      	beq.n	80016ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2204      	movs	r2, #4
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
 80016ec:	e049      	b.n	8001782 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	210e      	movs	r1, #14
 80016fa:	438a      	bics	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2101      	movs	r1, #1
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	491d      	ldr	r1, [pc, #116]	; (8001790 <HAL_DMA_Abort_IT+0xcc>)
 800171a:	400a      	ands	r2, r1
 800171c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <HAL_DMA_Abort_IT+0xd0>)
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	221c      	movs	r2, #28
 8001728:	4013      	ands	r3, r2
 800172a:	2201      	movs	r2, #1
 800172c:	409a      	lsls	r2, r3
 800172e:	4b19      	ldr	r3, [pc, #100]	; (8001794 <HAL_DMA_Abort_IT+0xd0>)
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800173c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001750:	490f      	ldr	r1, [pc, #60]	; (8001790 <HAL_DMA_Abort_IT+0xcc>)
 8001752:	400a      	ands	r2, r1
 8001754:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800175e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2225      	movs	r2, #37	; 0x25
 8001764:	2101      	movs	r1, #1
 8001766:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2224      	movs	r2, #36	; 0x24
 800176c:	2100      	movs	r1, #0
 800176e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	0010      	movs	r0, r2
 8001780:	4798      	blx	r3
    }
  }
  return status;
 8001782:	230f      	movs	r3, #15
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	781b      	ldrb	r3, [r3, #0]
}
 8001788:	0018      	movs	r0, r3
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}
 8001790:	fffffeff 	.word	0xfffffeff
 8001794:	40020000 	.word	0x40020000

08001798 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80017a0:	4b55      	ldr	r3, [pc, #340]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	221c      	movs	r2, #28
 80017b4:	4013      	ands	r3, r2
 80017b6:	2204      	movs	r2, #4
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	d027      	beq.n	8001812 <HAL_DMA_IRQHandler+0x7a>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2204      	movs	r2, #4
 80017c6:	4013      	ands	r3, r2
 80017c8:	d023      	beq.n	8001812 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2220      	movs	r2, #32
 80017d2:	4013      	ands	r3, r2
 80017d4:	d107      	bne.n	80017e6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2104      	movs	r1, #4
 80017e2:	438a      	bics	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80017e6:	4b44      	ldr	r3, [pc, #272]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 80017e8:	6859      	ldr	r1, [r3, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	221c      	movs	r2, #28
 80017f0:	4013      	ands	r3, r2
 80017f2:	2204      	movs	r2, #4
 80017f4:	409a      	lsls	r2, r3
 80017f6:	4b40      	ldr	r3, [pc, #256]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 80017f8:	430a      	orrs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_DMA_IRQHandler+0x6e>
 8001804:	e073      	b.n	80018ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	0010      	movs	r0, r2
 800180e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001810:	e06d      	b.n	80018ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	221c      	movs	r2, #28
 8001818:	4013      	ands	r3, r2
 800181a:	2202      	movs	r2, #2
 800181c:	409a      	lsls	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	d02e      	beq.n	8001884 <HAL_DMA_IRQHandler+0xec>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d02a      	beq.n	8001884 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	4013      	ands	r3, r2
 8001838:	d10b      	bne.n	8001852 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	210a      	movs	r1, #10
 8001846:	438a      	bics	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2225      	movs	r2, #37	; 0x25
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001852:	4b29      	ldr	r3, [pc, #164]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	221c      	movs	r2, #28
 800185c:	4013      	ands	r3, r2
 800185e:	2202      	movs	r2, #2
 8001860:	409a      	lsls	r2, r3
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 8001864:	430a      	orrs	r2, r1
 8001866:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2224      	movs	r2, #36	; 0x24
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	2b00      	cmp	r3, #0
 8001876:	d03a      	beq.n	80018ee <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	0010      	movs	r0, r2
 8001880:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001882:	e034      	b.n	80018ee <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	221c      	movs	r2, #28
 800188a:	4013      	ands	r3, r2
 800188c:	2208      	movs	r2, #8
 800188e:	409a      	lsls	r2, r3
 8001890:	0013      	movs	r3, r2
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	d02b      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x158>
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	2208      	movs	r2, #8
 800189c:	4013      	ands	r3, r2
 800189e:	d027      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	210e      	movs	r1, #14
 80018ac:	438a      	bics	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	221c      	movs	r2, #28
 80018ba:	4013      	ands	r3, r2
 80018bc:	2201      	movs	r2, #1
 80018be:	409a      	lsls	r2, r3
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <HAL_DMA_IRQHandler+0x160>)
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2225      	movs	r2, #37	; 0x25
 80018d0:	2101      	movs	r1, #1
 80018d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	2100      	movs	r1, #0
 80018da:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	0010      	movs	r0, r2
 80018ec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46c0      	nop			; (mov r8, r8)
}
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b004      	add	sp, #16
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020000 	.word	0x40020000

080018fc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	68fa      	ldr	r2, [r7, #12]
 8001910:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001912:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001918:	2b00      	cmp	r3, #0
 800191a:	d004      	beq.n	8001926 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001924:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <DMA_SetConfig+0x7c>)
 8001928:	6859      	ldr	r1, [r3, #4]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	221c      	movs	r2, #28
 8001930:	4013      	ands	r3, r2
 8001932:	2201      	movs	r2, #1
 8001934:	409a      	lsls	r2, r3
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <DMA_SetConfig+0x7c>)
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b10      	cmp	r3, #16
 800194a:	d108      	bne.n	800195e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800195c:	e007      	b.n	800196e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	60da      	str	r2, [r3, #12]
}
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	46bd      	mov	sp, r7
 8001972:	b004      	add	sp, #16
 8001974:	bd80      	pop	{r7, pc}
 8001976:	46c0      	nop			; (mov r8, r8)
 8001978:	40020000 	.word	0x40020000

0800197c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	089b      	lsrs	r3, r3, #2
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800198c:	4694      	mov	ip, r2
 800198e:	4463      	add	r3, ip
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	001a      	movs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	001a      	movs	r2, r3
 800199e:	23ff      	movs	r3, #255	; 0xff
 80019a0:	4013      	ands	r3, r2
 80019a2:	3b08      	subs	r3, #8
 80019a4:	2114      	movs	r1, #20
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7fe fbac 	bl	8000104 <__udivsi3>
 80019ac:	0003      	movs	r3, r0
 80019ae:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80019b4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	221f      	movs	r2, #31
 80019ba:	4013      	ands	r3, r2
 80019bc:	2201      	movs	r2, #1
 80019be:	409a      	lsls	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b004      	add	sp, #16
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	10008200 	.word	0x10008200
 80019d0:	40020880 	.word	0x40020880

080019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	223f      	movs	r2, #63	; 0x3f
 80019e2:	4013      	ands	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ea:	4694      	mov	ip, r2
 80019ec:	4463      	add	r3, ip
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	001a      	movs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a07      	ldr	r2, [pc, #28]	; (8001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	2203      	movs	r2, #3
 8001a02:	4013      	ands	r3, r2
 8001a04:	2201      	movs	r2, #1
 8001a06:	409a      	lsls	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b004      	add	sp, #16
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	1000823f 	.word	0x1000823f
 8001a18:	40020940 	.word	0x40020940

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e147      	b.n	8001cbc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697a      	ldr	r2, [r7, #20]
 8001a34:	4091      	lsls	r1, r2
 8001a36:	000a      	movs	r2, r1
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d100      	bne.n	8001a44 <HAL_GPIO_Init+0x28>
 8001a42:	e138      	b.n	8001cb6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d00b      	beq.n	8001a64 <HAL_GPIO_Init+0x48>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a58:	2b11      	cmp	r3, #17
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b12      	cmp	r3, #18
 8001a62:	d130      	bne.n	8001ac6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	2203      	movs	r2, #3
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	409a      	lsls	r2, r3
 8001a86:	0013      	movs	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	0013      	movs	r3, r2
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	091b      	lsrs	r3, r3, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0xea>
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b12      	cmp	r3, #18
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	0092      	lsls	r2, r2, #2
 8001b10:	58d3      	ldr	r3, [r2, r3]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2207      	movs	r2, #7
 8001b18:	4013      	ands	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	0013      	movs	r3, r2
 8001b22:	43da      	mvns	r2, r3
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2107      	movs	r1, #7
 8001b32:	400b      	ands	r3, r1
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	409a      	lsls	r2, r3
 8001b38:	0013      	movs	r3, r2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	0092      	lsls	r2, r2, #2
 8001b4a:	6939      	ldr	r1, [r7, #16]
 8001b4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	0013      	movs	r3, r2
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	409a      	lsls	r2, r3
 8001b74:	0013      	movs	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	055b      	lsls	r3, r3, #21
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d100      	bne.n	8001b90 <HAL_GPIO_Init+0x174>
 8001b8e:	e092      	b.n	8001cb6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b90:	4a50      	ldr	r2, [pc, #320]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	3318      	adds	r3, #24
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	220f      	movs	r2, #15
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	0013      	movs	r3, r2
 8001bac:	43da      	mvns	r2, r3
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	23a0      	movs	r3, #160	; 0xa0
 8001bb8:	05db      	lsls	r3, r3, #23
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x1ca>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a45      	ldr	r2, [pc, #276]	; (8001cd8 <HAL_GPIO_Init+0x2bc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x1c6>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a44      	ldr	r2, [pc, #272]	; (8001cdc <HAL_GPIO_Init+0x2c0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x1c2>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a43      	ldr	r2, [pc, #268]	; (8001ce0 <HAL_GPIO_Init+0x2c4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x1be>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e006      	b.n	8001be8 <HAL_GPIO_Init+0x1cc>
 8001bda:	2305      	movs	r3, #5
 8001bdc:	e004      	b.n	8001be8 <HAL_GPIO_Init+0x1cc>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <HAL_GPIO_Init+0x1cc>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <HAL_GPIO_Init+0x1cc>
 8001be6:	2300      	movs	r3, #0
 8001be8:	697a      	ldr	r2, [r7, #20]
 8001bea:	2103      	movs	r1, #3
 8001bec:	400a      	ands	r2, r1
 8001bee:	00d2      	lsls	r2, r2, #3
 8001bf0:	4093      	lsls	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bf8:	4936      	ldr	r1, [pc, #216]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3318      	adds	r3, #24
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c06:	4a33      	ldr	r2, [pc, #204]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	58d3      	ldr	r3, [r2, r3]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	43da      	mvns	r2, r3
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	2380      	movs	r3, #128	; 0x80
 8001c1e:	025b      	lsls	r3, r3, #9
 8001c20:	4013      	ands	r3, r2
 8001c22:	d003      	beq.n	8001c2c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c2c:	4929      	ldr	r1, [pc, #164]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001c34:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c36:	2384      	movs	r3, #132	; 0x84
 8001c38:	58d3      	ldr	r3, [r2, r3]
 8001c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	43da      	mvns	r2, r3
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4013      	ands	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	029b      	lsls	r3, r3, #10
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5a:	491e      	ldr	r1, [pc, #120]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c5c:	2284      	movs	r2, #132	; 0x84
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	035b      	lsls	r3, r3, #13
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c86:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	43da      	mvns	r2, r3
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	039b      	lsls	r3, r3, #14
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_GPIO_Init+0x2b8>)
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	40da      	lsrs	r2, r3
 8001cc4:	1e13      	subs	r3, r2, #0
 8001cc6:	d000      	beq.n	8001cca <HAL_GPIO_Init+0x2ae>
 8001cc8:	e6b0      	b.n	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	46c0      	nop			; (mov r8, r8)
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	b006      	add	sp, #24
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021800 	.word	0x40021800
 8001cd8:	50000400 	.word	0x50000400
 8001cdc:	50000800 	.word	0x50000800
 8001ce0:	50000c00 	.word	0x50000c00

08001ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	000a      	movs	r2, r1
 8001cee:	1cbb      	adds	r3, r7, #2
 8001cf0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	1cba      	adds	r2, r7, #2
 8001cf8:	8812      	ldrh	r2, [r2, #0]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001cfe:	230f      	movs	r3, #15
 8001d00:	18fb      	adds	r3, r7, r3
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
 8001d06:	e003      	b.n	8001d10 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d08:	230f      	movs	r3, #15
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d10:	230f      	movs	r3, #15
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	781b      	ldrb	r3, [r3, #0]
}
 8001d16:	0018      	movs	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	b004      	add	sp, #16
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	0008      	movs	r0, r1
 8001d28:	0011      	movs	r1, r2
 8001d2a:	1cbb      	adds	r3, r7, #2
 8001d2c:	1c02      	adds	r2, r0, #0
 8001d2e:	801a      	strh	r2, [r3, #0]
 8001d30:	1c7b      	adds	r3, r7, #1
 8001d32:	1c0a      	adds	r2, r1, #0
 8001d34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d36:	1c7b      	adds	r3, r7, #1
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3e:	1cbb      	adds	r3, r7, #2
 8001d40:	881a      	ldrh	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d46:	e003      	b.n	8001d50 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d48:	1cbb      	adds	r3, r7, #2
 8001d4a:	881a      	ldrh	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d50:	46c0      	nop			; (mov r8, r8)
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	0019      	movs	r1, r3
 8001d6a:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d11f      	bne.n	8001dbc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	0013      	movs	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	189b      	adds	r3, r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4912      	ldr	r1, [pc, #72]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f7fe f9ba 	bl	8000104 <__udivsi3>
 8001d90:	0003      	movs	r3, r0
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d96:	e008      	b.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e001      	b.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e009      	b.n	8001dbe <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001dac:	695a      	ldr	r2, [r3, #20]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	401a      	ands	r2, r3
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d0ed      	beq.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	fffff9ff 	.word	0xfffff9ff
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	000f4240 	.word	0x000f4240

08001dd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <LL_RCC_GetAPB1Prescaler+0x14>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	23e0      	movs	r3, #224	; 0xe0
 8001de2:	01db      	lsls	r3, r3, #7
 8001de4:	4013      	ands	r3, r2
}
 8001de6:	0018      	movs	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000

08001df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b088      	sub	sp, #32
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e304      	b.n	800240c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2201      	movs	r2, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCC_OscConfig+0x1e>
 8001e0c:	e07c      	b.n	8001f08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0e:	4bc3      	ldr	r3, [pc, #780]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2238      	movs	r2, #56	; 0x38
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e18:	4bc0      	ldr	r3, [pc, #768]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	4013      	ands	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3e>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_OscConfig+0x44>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d10b      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	4bb9      	ldr	r3, [pc, #740]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d062      	beq.n	8001f06 <HAL_RCC_OscConfig+0x116>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d15e      	bne.n	8001f06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e2df      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	2380      	movs	r3, #128	; 0x80
 8001e52:	025b      	lsls	r3, r3, #9
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_OscConfig+0x78>
 8001e58:	4bb0      	ldr	r3, [pc, #704]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4baf      	ldr	r3, [pc, #700]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	2180      	movs	r1, #128	; 0x80
 8001e60:	0249      	lsls	r1, r1, #9
 8001e62:	430a      	orrs	r2, r1
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e020      	b.n	8001eaa <HAL_RCC_OscConfig+0xba>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	23a0      	movs	r3, #160	; 0xa0
 8001e6e:	02db      	lsls	r3, r3, #11
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d10e      	bne.n	8001e92 <HAL_RCC_OscConfig+0xa2>
 8001e74:	4ba9      	ldr	r3, [pc, #676]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4ba8      	ldr	r3, [pc, #672]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	02c9      	lsls	r1, r1, #11
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	4ba6      	ldr	r3, [pc, #664]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4ba5      	ldr	r3, [pc, #660]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e88:	2180      	movs	r1, #128	; 0x80
 8001e8a:	0249      	lsls	r1, r1, #9
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0xba>
 8001e92:	4ba2      	ldr	r3, [pc, #648]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	4ba1      	ldr	r3, [pc, #644]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001e98:	49a1      	ldr	r1, [pc, #644]	; (8002120 <HAL_RCC_OscConfig+0x330>)
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	4b9f      	ldr	r3, [pc, #636]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b9e      	ldr	r3, [pc, #632]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	499f      	ldr	r1, [pc, #636]	; (8002124 <HAL_RCC_OscConfig+0x334>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d014      	beq.n	8001edc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f989 	bl	80011c8 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f984 	bl	80011c8 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e29e      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ece:	4b93      	ldr	r3, [pc, #588]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	029b      	lsls	r3, r3, #10
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0xcc>
 8001eda:	e015      	b.n	8001f08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff f974 	bl	80011c8 <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee6:	f7ff f96f 	bl	80011c8 <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e289      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef8:	4b88      	ldr	r3, [pc, #544]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0xf6>
 8001f04:	e000      	b.n	8001f08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d100      	bne.n	8001f14 <HAL_RCC_OscConfig+0x124>
 8001f12:	e099      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f14:	4b81      	ldr	r3, [pc, #516]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2238      	movs	r2, #56	; 0x38
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f1e:	4b7f      	ldr	r3, [pc, #508]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	2203      	movs	r2, #3
 8001f24:	4013      	ands	r3, r2
 8001f26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b10      	cmp	r3, #16
 8001f2c:	d102      	bne.n	8001f34 <HAL_RCC_OscConfig+0x144>
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d002      	beq.n	8001f3a <HAL_RCC_OscConfig+0x14a>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d135      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f3a:	4b78      	ldr	r3, [pc, #480]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4013      	ands	r3, r2
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x162>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e25c      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b72      	ldr	r3, [pc, #456]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	4a74      	ldr	r2, [pc, #464]	; (8002128 <HAL_RCC_OscConfig+0x338>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	021a      	lsls	r2, r3, #8
 8001f62:	4b6e      	ldr	r3, [pc, #440]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a6e      	ldr	r2, [pc, #440]	; (800212c <HAL_RCC_OscConfig+0x33c>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	4b67      	ldr	r3, [pc, #412]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001f82:	4b66      	ldr	r3, [pc, #408]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0adb      	lsrs	r3, r3, #11
 8001f88:	2207      	movs	r2, #7
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	4a68      	ldr	r2, [pc, #416]	; (8002130 <HAL_RCC_OscConfig+0x340>)
 8001f8e:	40da      	lsrs	r2, r3
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_OscConfig+0x344>)
 8001f92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x348>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff f8b9 	bl	8001110 <HAL_InitTick>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d051      	beq.n	8002046 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e232      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fae:	4b5b      	ldr	r3, [pc, #364]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_RCC_OscConfig+0x33c>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001fc2:	4b56      	ldr	r3, [pc, #344]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	4b55      	ldr	r3, [pc, #340]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fc8:	2180      	movs	r1, #128	; 0x80
 8001fca:	0049      	lsls	r1, r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f8fa 	bl	80011c8 <HAL_GetTick>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff f8f5 	bl	80011c8 <HAL_GetTick>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e20f      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fec:	4b4b      	ldr	r3, [pc, #300]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f0      	beq.n	8001fda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b48      	ldr	r3, [pc, #288]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4a4a      	ldr	r2, [pc, #296]	; (8002128 <HAL_RCC_OscConfig+0x338>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	021a      	lsls	r2, r3, #8
 8002008:	4b44      	ldr	r3, [pc, #272]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 800200a:	430a      	orrs	r2, r1
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	e01b      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002010:	4b42      	ldr	r3, [pc, #264]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b41      	ldr	r3, [pc, #260]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002016:	4949      	ldr	r1, [pc, #292]	; (800213c <HAL_RCC_OscConfig+0x34c>)
 8002018:	400a      	ands	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f8d4 	bl	80011c8 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff f8cf 	bl	80011c8 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1e9      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002038:	4b38      	ldr	r3, [pc, #224]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4013      	ands	r3, r2
 8002042:	d1f0      	bne.n	8002026 <HAL_RCC_OscConfig+0x236>
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002046:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2208      	movs	r2, #8
 800204e:	4013      	ands	r3, r2
 8002050:	d047      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002052:	4b32      	ldr	r3, [pc, #200]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2238      	movs	r2, #56	; 0x38
 8002058:	4013      	ands	r3, r2
 800205a:	2b18      	cmp	r3, #24
 800205c:	d10a      	bne.n	8002074 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800205e:	4b2f      	ldr	r3, [pc, #188]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	2202      	movs	r2, #2
 8002064:	4013      	ands	r3, r2
 8002066:	d03c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d138      	bne.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e1cb      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d019      	beq.n	80020b0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800207c:	4b27      	ldr	r3, [pc, #156]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 800207e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002082:	2101      	movs	r1, #1
 8002084:	430a      	orrs	r2, r1
 8002086:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff f89e 	bl	80011c8 <HAL_GetTick>
 800208c:	0003      	movs	r3, r0
 800208e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002092:	f7ff f899 	bl	80011c8 <HAL_GetTick>
 8002096:	0002      	movs	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e1b3      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d0f1      	beq.n	8002092 <HAL_RCC_OscConfig+0x2a2>
 80020ae:	e018      	b.n	80020e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020b0:	4b1a      	ldr	r3, [pc, #104]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 80020b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	438a      	bics	r2, r1
 80020ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f884 	bl	80011c8 <HAL_GetTick>
 80020c0:	0003      	movs	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020c4:	e008      	b.n	80020d8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020c6:	f7ff f87f 	bl	80011c8 <HAL_GetTick>
 80020ca:	0002      	movs	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e199      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d1f1      	bne.n	80020c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d100      	bne.n	80020ee <HAL_RCC_OscConfig+0x2fe>
 80020ec:	e0c6      	b.n	800227c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ee:	231f      	movs	r3, #31
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2238      	movs	r2, #56	; 0x38
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b20      	cmp	r3, #32
 8002100:	d11e      	bne.n	8002140 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_OscConfig+0x32c>)
 8002104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	d100      	bne.n	800210e <HAL_RCC_OscConfig+0x31e>
 800210c:	e0b6      	b.n	800227c <HAL_RCC_OscConfig+0x48c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d000      	beq.n	8002118 <HAL_RCC_OscConfig+0x328>
 8002116:	e0b1      	b.n	800227c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e177      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
 800211c:	40021000 	.word	0x40021000
 8002120:	fffeffff 	.word	0xfffeffff
 8002124:	fffbffff 	.word	0xfffbffff
 8002128:	ffff80ff 	.word	0xffff80ff
 800212c:	ffffc7ff 	.word	0xffffc7ff
 8002130:	00f42400 	.word	0x00f42400
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004
 800213c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002140:	4bb4      	ldr	r3, [pc, #720]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002142:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	055b      	lsls	r3, r3, #21
 8002148:	4013      	ands	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x360>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x362>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d011      	beq.n	800217a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	4baf      	ldr	r3, [pc, #700]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002158:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800215a:	4bae      	ldr	r3, [pc, #696]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0549      	lsls	r1, r1, #21
 8002160:	430a      	orrs	r2, r1
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
 8002164:	4bab      	ldr	r3, [pc, #684]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002168:	2380      	movs	r3, #128	; 0x80
 800216a:	055b      	lsls	r3, r3, #21
 800216c:	4013      	ands	r3, r2
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002172:	231f      	movs	r3, #31
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4ba7      	ldr	r3, [pc, #668]	; (8002418 <HAL_RCC_OscConfig+0x628>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d11a      	bne.n	80021bc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002186:	4ba4      	ldr	r3, [pc, #656]	; (8002418 <HAL_RCC_OscConfig+0x628>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4ba3      	ldr	r3, [pc, #652]	; (8002418 <HAL_RCC_OscConfig+0x628>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0049      	lsls	r1, r1, #1
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002194:	f7ff f818 	bl	80011c8 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7ff f813 	bl	80011c8 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e12d      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b0:	4b99      	ldr	r3, [pc, #612]	; (8002418 <HAL_RCC_OscConfig+0x628>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3e2>
 80021c4:	4b93      	ldr	r3, [pc, #588]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021c8:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d0:	e01c      	b.n	800220c <HAL_RCC_OscConfig+0x41c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x404>
 80021da:	4b8e      	ldr	r3, [pc, #568]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021e0:	2104      	movs	r1, #4
 80021e2:	430a      	orrs	r2, r1
 80021e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021ec:	2101      	movs	r1, #1
 80021ee:	430a      	orrs	r2, r1
 80021f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0x41c>
 80021f4:	4b87      	ldr	r3, [pc, #540]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021f8:	4b86      	ldr	r3, [pc, #536]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80021fa:	2101      	movs	r1, #1
 80021fc:	438a      	bics	r2, r1
 80021fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002200:	4b84      	ldr	r3, [pc, #528]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002202:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002204:	4b83      	ldr	r3, [pc, #524]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002206:	2104      	movs	r1, #4
 8002208:	438a      	bics	r2, r1
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d014      	beq.n	800223e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe ffd8 	bl	80011c8 <HAL_GetTick>
 8002218:	0003      	movs	r3, r0
 800221a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221c:	e009      	b.n	8002232 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800221e:	f7fe ffd3 	bl	80011c8 <HAL_GetTick>
 8002222:	0002      	movs	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	4a7c      	ldr	r2, [pc, #496]	; (800241c <HAL_RCC_OscConfig+0x62c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0ec      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	4b78      	ldr	r3, [pc, #480]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x42e>
 800223c:	e013      	b.n	8002266 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223e:	f7fe ffc3 	bl	80011c8 <HAL_GetTick>
 8002242:	0003      	movs	r3, r0
 8002244:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002246:	e009      	b.n	800225c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ffbe 	bl	80011c8 <HAL_GetTick>
 800224c:	0002      	movs	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	4a72      	ldr	r2, [pc, #456]	; (800241c <HAL_RCC_OscConfig+0x62c>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0d7      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800225c:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	2202      	movs	r2, #2
 8002262:	4013      	ands	r3, r2
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002266:	231f      	movs	r3, #31
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002274:	4b67      	ldr	r3, [pc, #412]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002276:	496a      	ldr	r1, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x630>)
 8002278:	400a      	ands	r2, r1
 800227a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d100      	bne.n	8002286 <HAL_RCC_OscConfig+0x496>
 8002284:	e0c1      	b.n	800240a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	2238      	movs	r2, #56	; 0x38
 800228c:	4013      	ands	r3, r2
 800228e:	2b10      	cmp	r3, #16
 8002290:	d100      	bne.n	8002294 <HAL_RCC_OscConfig+0x4a4>
 8002292:	e081      	b.n	8002398 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d156      	bne.n	800234a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229c:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80022a2:	4960      	ldr	r1, [pc, #384]	; (8002424 <HAL_RCC_OscConfig+0x634>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a8:	f7fe ff8e 	bl	80011c8 <HAL_GetTick>
 80022ac:	0003      	movs	r3, r0
 80022ae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe ff89 	bl	80011c8 <HAL_GetTick>
 80022b6:	0002      	movs	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0a3      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	049b      	lsls	r3, r3, #18
 80022cc:	4013      	ands	r3, r2
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d0:	4b50      	ldr	r3, [pc, #320]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4a54      	ldr	r2, [pc, #336]	; (8002428 <HAL_RCC_OscConfig+0x638>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1a      	ldr	r2, [r3, #32]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fc:	431a      	orrs	r2, r3
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002300:	430a      	orrs	r2, r1
 8002302:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002304:	4b43      	ldr	r3, [pc, #268]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800230a:	2180      	movs	r1, #128	; 0x80
 800230c:	0449      	lsls	r1, r1, #17
 800230e:	430a      	orrs	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002312:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	4b3f      	ldr	r3, [pc, #252]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002318:	2180      	movs	r1, #128	; 0x80
 800231a:	0549      	lsls	r1, r1, #21
 800231c:	430a      	orrs	r2, r1
 800231e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ff52 	bl	80011c8 <HAL_GetTick>
 8002324:	0003      	movs	r3, r0
 8002326:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	e008      	b.n	800233c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232a:	f7fe ff4d 	bl	80011c8 <HAL_GetTick>
 800232e:	0002      	movs	r2, r0
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b02      	cmp	r3, #2
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e067      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	049b      	lsls	r3, r3, #18
 8002344:	4013      	ands	r3, r2
 8002346:	d0f0      	beq.n	800232a <HAL_RCC_OscConfig+0x53a>
 8002348:	e05f      	b.n	800240a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234a:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002350:	4934      	ldr	r1, [pc, #208]	; (8002424 <HAL_RCC_OscConfig+0x634>)
 8002352:	400a      	ands	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002356:	4b2f      	ldr	r3, [pc, #188]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002358:	68da      	ldr	r2, [r3, #12]
 800235a:	4b2e      	ldr	r3, [pc, #184]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800235c:	2103      	movs	r1, #3
 800235e:	438a      	bics	r2, r1
 8002360:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	4b2b      	ldr	r3, [pc, #172]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 8002368:	4930      	ldr	r1, [pc, #192]	; (800242c <HAL_RCC_OscConfig+0x63c>)
 800236a:	400a      	ands	r2, r1
 800236c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7fe ff2b 	bl	80011c8 <HAL_GetTick>
 8002372:	0003      	movs	r3, r0
 8002374:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ff26 	bl	80011c8 <HAL_GetTick>
 800237c:	0002      	movs	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e040      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	049b      	lsls	r3, r3, #18
 8002392:	4013      	ands	r3, r2
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x588>
 8002396:	e038      	b.n	800240a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e033      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_RCC_OscConfig+0x624>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2203      	movs	r2, #3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d126      	bne.n	8002406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2270      	movs	r2, #112	; 0x70
 80023bc:	401a      	ands	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d11f      	bne.n	8002406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	23fe      	movs	r3, #254	; 0xfe
 80023ca:	01db      	lsls	r3, r3, #7
 80023cc:	401a      	ands	r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d116      	bne.n	8002406 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	23f8      	movs	r3, #248	; 0xf8
 80023dc:	039b      	lsls	r3, r3, #14
 80023de:	401a      	ands	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d10e      	bne.n	8002406 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	23e0      	movs	r3, #224	; 0xe0
 80023ec:	051b      	lsls	r3, r3, #20
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	0f5b      	lsrs	r3, r3, #29
 80023fc:	075a      	lsls	r2, r3, #29
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	0018      	movs	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	b008      	add	sp, #32
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	00001388 	.word	0x00001388
 8002420:	efffffff 	.word	0xefffffff
 8002424:	feffffff 	.word	0xfeffffff
 8002428:	11c1808c 	.word	0x11c1808c
 800242c:	eefeffff 	.word	0xeefeffff

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0e9      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002444:	4b76      	ldr	r3, [pc, #472]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2207      	movs	r2, #7
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d91e      	bls.n	8002490 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2207      	movs	r2, #7
 8002458:	4393      	bics	r3, r2
 800245a:	0019      	movs	r1, r3
 800245c:	4b70      	ldr	r3, [pc, #448]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002464:	f7fe feb0 	bl	80011c8 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800246c:	e009      	b.n	8002482 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe feab 	bl	80011c8 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a6a      	ldr	r2, [pc, #424]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e0ca      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002482:	4b67      	ldr	r3, [pc, #412]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2207      	movs	r2, #7
 8002488:	4013      	ands	r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d015      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2204      	movs	r2, #4
 80024a0:	4013      	ands	r3, r2
 80024a2:	d006      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80024a4:	4b60      	ldr	r3, [pc, #384]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4b5f      	ldr	r3, [pc, #380]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024aa:	21e0      	movs	r1, #224	; 0xe0
 80024ac:	01c9      	lsls	r1, r1, #7
 80024ae:	430a      	orrs	r2, r1
 80024b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b2:	4b5d      	ldr	r3, [pc, #372]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a5d      	ldr	r2, [pc, #372]	; (800262c <HAL_RCC_ClockConfig+0x1fc>)
 80024b8:	4013      	ands	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	4b59      	ldr	r3, [pc, #356]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024c2:	430a      	orrs	r2, r1
 80024c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2201      	movs	r2, #1
 80024cc:	4013      	ands	r3, r2
 80024ce:	d057      	beq.n	8002580 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	029b      	lsls	r3, r3, #10
 80024e0:	4013      	ands	r3, r2
 80024e2:	d12b      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e097      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f0:	4b4d      	ldr	r3, [pc, #308]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	049b      	lsls	r3, r3, #18
 80024f8:	4013      	ands	r3, r2
 80024fa:	d11f      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e08b      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	4b47      	ldr	r3, [pc, #284]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4013      	ands	r3, r2
 8002512:	d113      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e07f      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d106      	bne.n	800252e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002520:	4b41      	ldr	r3, [pc, #260]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	2202      	movs	r2, #2
 8002526:	4013      	ands	r3, r2
 8002528:	d108      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e074      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	d101      	bne.n	800253c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e06d      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2207      	movs	r2, #7
 8002542:	4393      	bics	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4b37      	ldr	r3, [pc, #220]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002550:	f7fe fe3a 	bl	80011c8 <HAL_GetTick>
 8002554:	0003      	movs	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002558:	e009      	b.n	800256e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255a:	f7fe fe35 	bl	80011c8 <HAL_GetTick>
 800255e:	0002      	movs	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e054      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	; 0x38
 8002574:	401a      	ands	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	429a      	cmp	r2, r3
 800257e:	d1ec      	bne.n	800255a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002580:	4b27      	ldr	r3, [pc, #156]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2207      	movs	r2, #7
 8002586:	4013      	ands	r3, r2
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d21e      	bcs.n	80025cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2207      	movs	r2, #7
 8002594:	4393      	bics	r3, r2
 8002596:	0019      	movs	r1, r3
 8002598:	4b21      	ldr	r3, [pc, #132]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025a0:	f7fe fe12 	bl	80011c8 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025a8:	e009      	b.n	80025be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025aa:	f7fe fe0d 	bl	80011c8 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	4a1b      	ldr	r2, [pc, #108]	; (8002624 <HAL_RCC_ClockConfig+0x1f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e02c      	b.n	8002618 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80025be:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HAL_RCC_ClockConfig+0x1f0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2207      	movs	r2, #7
 80025c4:	4013      	ands	r3, r2
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1ee      	bne.n	80025aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2204      	movs	r2, #4
 80025d2:	4013      	ands	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <HAL_RCC_ClockConfig+0x200>)
 80025dc:	4013      	ands	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68da      	ldr	r2, [r3, #12]
 80025e4:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80025ea:	f000 f829 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025ee:	0001      	movs	r1, r0
 80025f0:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <HAL_RCC_ClockConfig+0x1f8>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	220f      	movs	r2, #15
 80025f8:	401a      	ands	r2, r3
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x204>)
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	58d3      	ldr	r3, [r2, r3]
 8002600:	221f      	movs	r2, #31
 8002602:	4013      	ands	r3, r2
 8002604:	000a      	movs	r2, r1
 8002606:	40da      	lsrs	r2, r3
 8002608:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCC_ClockConfig+0x208>)
 800260a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x20c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0018      	movs	r0, r3
 8002612:	f7fe fd7d 	bl	8001110 <HAL_InitTick>
 8002616:	0003      	movs	r3, r0
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b004      	add	sp, #16
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40022000 	.word	0x40022000
 8002624:	00001388 	.word	0x00001388
 8002628:	40021000 	.word	0x40021000
 800262c:	fffff0ff 	.word	0xfffff0ff
 8002630:	ffff8fff 	.word	0xffff8fff
 8002634:	08006e64 	.word	0x08006e64
 8002638:	20000000 	.word	0x20000000
 800263c:	20000004 	.word	0x20000004

08002640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	; 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	d10f      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0adb      	lsrs	r3, r3, #11
 8002656:	2207      	movs	r2, #7
 8002658:	4013      	ands	r3, r2
 800265a:	2201      	movs	r2, #1
 800265c:	409a      	lsls	r2, r3
 800265e:	0013      	movs	r3, r2
 8002660:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	4835      	ldr	r0, [pc, #212]	; (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002666:	f7fd fd4d 	bl	8000104 <__udivsi3>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	e05d      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002670:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	2238      	movs	r2, #56	; 0x38
 8002676:	4013      	ands	r3, r2
 8002678:	2b08      	cmp	r3, #8
 800267a:	d102      	bne.n	8002682 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800267c:	4b30      	ldr	r3, [pc, #192]	; (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e054      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2238      	movs	r2, #56	; 0x38
 8002688:	4013      	ands	r3, r2
 800268a:	2b10      	cmp	r3, #16
 800268c:	d138      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800268e:	4b2a      	ldr	r3, [pc, #168]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2203      	movs	r2, #3
 8002694:	4013      	ands	r3, r2
 8002696:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	2207      	movs	r2, #7
 80026a0:	4013      	ands	r3, r2
 80026a2:	3301      	adds	r3, #1
 80026a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4824      	ldr	r0, [pc, #144]	; (8002740 <HAL_RCC_GetSysClockFreq+0x100>)
 80026b0:	f7fd fd28 	bl	8000104 <__udivsi3>
 80026b4:	0003      	movs	r3, r0
 80026b6:	0019      	movs	r1, r3
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	0a1b      	lsrs	r3, r3, #8
 80026be:	227f      	movs	r2, #127	; 0x7f
 80026c0:	4013      	ands	r3, r2
 80026c2:	434b      	muls	r3, r1
 80026c4:	617b      	str	r3, [r7, #20]
        break;
 80026c6:	e00d      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	481c      	ldr	r0, [pc, #112]	; (800273c <HAL_RCC_GetSysClockFreq+0xfc>)
 80026cc:	f7fd fd1a 	bl	8000104 <__udivsi3>
 80026d0:	0003      	movs	r3, r0
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	227f      	movs	r2, #127	; 0x7f
 80026dc:	4013      	ands	r3, r2
 80026de:	434b      	muls	r3, r1
 80026e0:	617b      	str	r3, [r7, #20]
        break;
 80026e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	0f5b      	lsrs	r3, r3, #29
 80026ea:	2207      	movs	r2, #7
 80026ec:	4013      	ands	r3, r2
 80026ee:	3301      	adds	r3, #1
 80026f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	6978      	ldr	r0, [r7, #20]
 80026f6:	f7fd fd05 	bl	8000104 <__udivsi3>
 80026fa:	0003      	movs	r3, r0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	e015      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002700:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2238      	movs	r2, #56	; 0x38
 8002706:	4013      	ands	r3, r2
 8002708:	2b20      	cmp	r3, #32
 800270a:	d103      	bne.n	8002714 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	613b      	str	r3, [r7, #16]
 8002712:	e00b      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2238      	movs	r2, #56	; 0x38
 800271a:	4013      	ands	r3, r2
 800271c:	2b18      	cmp	r3, #24
 800271e:	d103      	bne.n	8002728 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002720:	23fa      	movs	r3, #250	; 0xfa
 8002722:	01db      	lsls	r3, r3, #7
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	e001      	b.n	800272c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800272c:	693b      	ldr	r3, [r7, #16]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	00f42400 	.word	0x00f42400
 8002740:	007a1200 	.word	0x007a1200

08002744 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002748:	4b02      	ldr	r3, [pc, #8]	; (8002754 <HAL_RCC_GetHCLKFreq+0x10>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	20000000 	.word	0x20000000

08002758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800275c:	f7ff fff2 	bl	8002744 <HAL_RCC_GetHCLKFreq>
 8002760:	0004      	movs	r4, r0
 8002762:	f7ff fb39 	bl	8001dd8 <LL_RCC_GetAPB1Prescaler>
 8002766:	0003      	movs	r3, r0
 8002768:	0b1a      	lsrs	r2, r3, #12
 800276a:	4b05      	ldr	r3, [pc, #20]	; (8002780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800276c:	0092      	lsls	r2, r2, #2
 800276e:	58d3      	ldr	r3, [r2, r3]
 8002770:	221f      	movs	r2, #31
 8002772:	4013      	ands	r3, r2
 8002774:	40dc      	lsrs	r4, r3
 8002776:	0023      	movs	r3, r4
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	08006ea4 	.word	0x08006ea4

08002784 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800278c:	2313      	movs	r3, #19
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2312      	movs	r3, #18
 8002796:	18fb      	adds	r3, r7, r3
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	029b      	lsls	r3, r3, #10
 80027a4:	4013      	ands	r3, r2
 80027a6:	d100      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80027a8:	e0a3      	b.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2011      	movs	r0, #17
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4ba5      	ldr	r3, [pc, #660]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	055b      	lsls	r3, r3, #21
 80027ba:	4013      	ands	r3, r2
 80027bc:	d110      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4ba2      	ldr	r3, [pc, #648]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027c2:	4ba1      	ldr	r3, [pc, #644]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027c4:	2180      	movs	r1, #128	; 0x80
 80027c6:	0549      	lsls	r1, r1, #21
 80027c8:	430a      	orrs	r2, r1
 80027ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80027cc:	4b9e      	ldr	r3, [pc, #632]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80027ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	055b      	lsls	r3, r3, #21
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027da:	183b      	adds	r3, r7, r0
 80027dc:	2201      	movs	r2, #1
 80027de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e0:	4b9a      	ldr	r3, [pc, #616]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4b99      	ldr	r3, [pc, #612]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	0049      	lsls	r1, r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027ee:	f7fe fceb 	bl	80011c8 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f6:	e00b      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f8:	f7fe fce6 	bl	80011c8 <HAL_GetTick>
 80027fc:	0002      	movs	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d904      	bls.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002806:	2313      	movs	r3, #19
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2203      	movs	r2, #3
 800280c:	701a      	strb	r2, [r3, #0]
        break;
 800280e:	e005      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002810:	4b8e      	ldr	r3, [pc, #568]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	4013      	ands	r3, r2
 800281a:	d0ed      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800281c:	2313      	movs	r3, #19
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d154      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002826:	4b88      	ldr	r3, [pc, #544]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800282a:	23c0      	movs	r3, #192	; 0xc0
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4013      	ands	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d019      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	429a      	cmp	r2, r3
 8002840:	d014      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002842:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	4a82      	ldr	r2, [pc, #520]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002848:	4013      	ands	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800284c:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800284e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002850:	4b7d      	ldr	r3, [pc, #500]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	0249      	lsls	r1, r1, #9
 8002856:	430a      	orrs	r2, r1
 8002858:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800285a:	4b7b      	ldr	r3, [pc, #492]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800285c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800285e:	4b7a      	ldr	r3, [pc, #488]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002860:	497c      	ldr	r1, [pc, #496]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002862:	400a      	ands	r2, r1
 8002864:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002866:	4b78      	ldr	r3, [pc, #480]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2201      	movs	r2, #1
 8002870:	4013      	ands	r3, r2
 8002872:	d016      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002874:	f7fe fca8 	bl	80011c8 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287c:	e00c      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800287e:	f7fe fca3 	bl	80011c8 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	4a73      	ldr	r2, [pc, #460]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d904      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800288e:	2313      	movs	r3, #19
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2203      	movs	r2, #3
 8002894:	701a      	strb	r2, [r3, #0]
            break;
 8002896:	e004      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002898:	4b6b      	ldr	r3, [pc, #428]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800289a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d0ed      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80028a2:	2313      	movs	r3, #19
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ac:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028bc:	430a      	orrs	r2, r1
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c
 80028c0:	e00c      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028c2:	2312      	movs	r3, #18
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2213      	movs	r2, #19
 80028c8:	18ba      	adds	r2, r7, r2
 80028ca:	7812      	ldrb	r2, [r2, #0]
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e005      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	2312      	movs	r3, #18
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	2213      	movs	r2, #19
 80028d6:	18ba      	adds	r2, r7, r2
 80028d8:	7812      	ldrb	r2, [r2, #0]
 80028da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028dc:	2311      	movs	r3, #17
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d105      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e6:	4b58      	ldr	r3, [pc, #352]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ea:	4b57      	ldr	r3, [pc, #348]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028ec:	495b      	ldr	r1, [pc, #364]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80028ee:	400a      	ands	r2, r1
 80028f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	4013      	ands	r3, r2
 80028fa:	d009      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028fc:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	2203      	movs	r2, #3
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800290c:	430a      	orrs	r2, r1
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	4013      	ands	r3, r2
 8002918:	d009      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800291a:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	4a50      	ldr	r2, [pc, #320]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002920:	4013      	ands	r3, r2
 8002922:	0019      	movs	r1, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800292a:	430a      	orrs	r2, r1
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2380      	movs	r3, #128	; 0x80
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4013      	ands	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800293a:	4b43      	ldr	r3, [pc, #268]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800293c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293e:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002940:	4013      	ands	r3, r2
 8002942:	0019      	movs	r1, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695a      	ldr	r2, [r3, #20]
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800294a:	430a      	orrs	r2, r1
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4013      	ands	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800295a:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	4a42      	ldr	r2, [pc, #264]	; (8002a68 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002960:	4013      	ands	r3, r2
 8002962:	0019      	movs	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699a      	ldr	r2, [r3, #24]
 8002968:	4b37      	ldr	r3, [pc, #220]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800296a:	430a      	orrs	r2, r1
 800296c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2220      	movs	r2, #32
 8002974:	4013      	ands	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800297e:	4013      	ands	r3, r2
 8002980:	0019      	movs	r1, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002988:	430a      	orrs	r2, r1
 800298a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2380      	movs	r3, #128	; 0x80
 8002992:	01db      	lsls	r3, r3, #7
 8002994:	4013      	ands	r3, r2
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800299a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	0899      	lsrs	r1, r3, #2
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	05db      	lsls	r3, r3, #23
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80029b6:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	4b23      	ldr	r3, [pc, #140]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0249      	lsls	r1, r1, #9
 80029c0:	430a      	orrs	r2, r1
 80029c2:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	039b      	lsls	r3, r3, #14
 80029cc:	4013      	ands	r3, r2
 80029ce:	d016      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	4a26      	ldr	r2, [pc, #152]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	0019      	movs	r1, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1a      	ldr	r2, [r3, #32]
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029e0:	430a      	orrs	r2, r1
 80029e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1a      	ldr	r2, [r3, #32]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	03db      	lsls	r3, r3, #15
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029f0:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	4b14      	ldr	r3, [pc, #80]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80029f6:	2180      	movs	r1, #128	; 0x80
 80029f8:	0449      	lsls	r1, r1, #17
 80029fa:	430a      	orrs	r2, r1
 80029fc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	2380      	movs	r3, #128	; 0x80
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	4013      	ands	r3, r2
 8002a08:	d016      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	0019      	movs	r1, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691a      	ldr	r2, [r3, #16]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	01db      	lsls	r3, r3, #7
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d106      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0249      	lsls	r1, r1, #9
 8002a34:	430a      	orrs	r2, r1
 8002a36:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002a38:	2312      	movs	r3, #18
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	fffffcff 	.word	0xfffffcff
 8002a54:	fffeffff 	.word	0xfffeffff
 8002a58:	00001388 	.word	0x00001388
 8002a5c:	efffffff 	.word	0xefffffff
 8002a60:	fffff3ff 	.word	0xfffff3ff
 8002a64:	fff3ffff 	.word	0xfff3ffff
 8002a68:	ffcfffff 	.word	0xffcfffff
 8002a6c:	ffffcfff 	.word	0xffffcfff
 8002a70:	ffbfffff 	.word	0xffbfffff
 8002a74:	ffff3fff 	.word	0xffff3fff

08002a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e04a      	b.n	8002b20 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	223d      	movs	r2, #61	; 0x3d
 8002a8e:	5c9b      	ldrb	r3, [r3, r2]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d107      	bne.n	8002aa6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223c      	movs	r2, #60	; 0x3c
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7fe f90d 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223d      	movs	r2, #61	; 0x3d
 8002aaa:	2102      	movs	r1, #2
 8002aac:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	0010      	movs	r0, r2
 8002aba:	f000 fed7 	bl	800386c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2248      	movs	r2, #72	; 0x48
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223e      	movs	r2, #62	; 0x3e
 8002aca:	2101      	movs	r1, #1
 8002acc:	5499      	strb	r1, [r3, r2]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	223f      	movs	r2, #63	; 0x3f
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2240      	movs	r2, #64	; 0x40
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2241      	movs	r2, #65	; 0x41
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2242      	movs	r2, #66	; 0x42
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2243      	movs	r2, #67	; 0x43
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2244      	movs	r2, #68	; 0x44
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2245      	movs	r2, #69	; 0x45
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2246      	movs	r2, #70	; 0x46
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2247      	movs	r2, #71	; 0x47
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	223d      	movs	r2, #61	; 0x3d
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b002      	add	sp, #8
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e04a      	b.n	8002bd0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223d      	movs	r2, #61	; 0x3d
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	223c      	movs	r2, #60	; 0x3c
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fe f901 	bl	8000d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223d      	movs	r2, #61	; 0x3d
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3304      	adds	r3, #4
 8002b66:	0019      	movs	r1, r3
 8002b68:	0010      	movs	r0, r2
 8002b6a:	f000 fe7f 	bl	800386c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2248      	movs	r2, #72	; 0x48
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223e      	movs	r2, #62	; 0x3e
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223f      	movs	r2, #63	; 0x3f
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2240      	movs	r2, #64	; 0x40
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2241      	movs	r2, #65	; 0x41
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2242      	movs	r2, #66	; 0x42
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2243      	movs	r2, #67	; 0x43
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2244      	movs	r2, #68	; 0x44
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2245      	movs	r2, #69	; 0x45
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2246      	movs	r2, #70	; 0x46
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2247      	movs	r2, #71	; 0x47
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	223d      	movs	r2, #61	; 0x3d
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b002      	add	sp, #8
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <HAL_TIM_PWM_Start+0x22>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	223e      	movs	r2, #62	; 0x3e
 8002bec:	5c9b      	ldrb	r3, [r3, r2]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	1e5a      	subs	r2, r3, #1
 8002bf4:	4193      	sbcs	r3, r2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	e037      	b.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d108      	bne.n	8002c12 <HAL_TIM_PWM_Start+0x3a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	223f      	movs	r2, #63	; 0x3f
 8002c04:	5c9b      	ldrb	r3, [r3, r2]
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	1e5a      	subs	r2, r3, #1
 8002c0c:	4193      	sbcs	r3, r2
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	e02b      	b.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b08      	cmp	r3, #8
 8002c16:	d108      	bne.n	8002c2a <HAL_TIM_PWM_Start+0x52>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	5c9b      	ldrb	r3, [r3, r2]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	1e5a      	subs	r2, r3, #1
 8002c24:	4193      	sbcs	r3, r2
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	e01f      	b.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d108      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x6a>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2241      	movs	r2, #65	; 0x41
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	1e5a      	subs	r2, r3, #1
 8002c3c:	4193      	sbcs	r3, r2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e013      	b.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b10      	cmp	r3, #16
 8002c46:	d108      	bne.n	8002c5a <HAL_TIM_PWM_Start+0x82>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2242      	movs	r2, #66	; 0x42
 8002c4c:	5c9b      	ldrb	r3, [r3, r2]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	1e5a      	subs	r2, r3, #1
 8002c54:	4193      	sbcs	r3, r2
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	e007      	b.n	8002c6a <HAL_TIM_PWM_Start+0x92>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2243      	movs	r2, #67	; 0x43
 8002c5e:	5c9b      	ldrb	r3, [r3, r2]
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	1e5a      	subs	r2, r3, #1
 8002c66:	4193      	sbcs	r3, r2
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e081      	b.n	8002d76 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start+0xaa>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223e      	movs	r2, #62	; 0x3e
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	5499      	strb	r1, [r3, r2]
 8002c80:	e023      	b.n	8002cca <HAL_TIM_PWM_Start+0xf2>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d104      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xba>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	223f      	movs	r2, #63	; 0x3f
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	5499      	strb	r1, [r3, r2]
 8002c90:	e01b      	b.n	8002cca <HAL_TIM_PWM_Start+0xf2>
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d104      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0xca>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	5499      	strb	r1, [r3, r2]
 8002ca0:	e013      	b.n	8002cca <HAL_TIM_PWM_Start+0xf2>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d104      	bne.n	8002cb2 <HAL_TIM_PWM_Start+0xda>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2241      	movs	r2, #65	; 0x41
 8002cac:	2102      	movs	r1, #2
 8002cae:	5499      	strb	r1, [r3, r2]
 8002cb0:	e00b      	b.n	8002cca <HAL_TIM_PWM_Start+0xf2>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b10      	cmp	r3, #16
 8002cb6:	d104      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0xea>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2242      	movs	r2, #66	; 0x42
 8002cbc:	2102      	movs	r1, #2
 8002cbe:	5499      	strb	r1, [r3, r2]
 8002cc0:	e003      	b.n	8002cca <HAL_TIM_PWM_Start+0xf2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2243      	movs	r2, #67	; 0x43
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6839      	ldr	r1, [r7, #0]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f001 f978 	bl	8003fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <HAL_TIM_PWM_Start+0x1a8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x11e>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_TIM_PWM_Start+0x1ac>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIM_PWM_Start+0x11e>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <HAL_TIM_PWM_Start+0x1b0>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x122>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_PWM_Start+0x124>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	0209      	lsls	r1, r1, #8
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_TIM_PWM_Start+0x1a8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00a      	beq.n	8002d32 <HAL_TIM_PWM_Start+0x15a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	05db      	lsls	r3, r3, #23
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d004      	beq.n	8002d32 <HAL_TIM_PWM_Start+0x15a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a17      	ldr	r2, [pc, #92]	; (8002d8c <HAL_TIM_PWM_Start+0x1b4>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d116      	bne.n	8002d60 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <HAL_TIM_PWM_Start+0x1b8>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b06      	cmp	r3, #6
 8002d42:	d016      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x19a>
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	025b      	lsls	r3, r3, #9
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d011      	beq.n	8002d72 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2101      	movs	r1, #1
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5e:	e008      	b.n	8002d72 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e000      	b.n	8002d74 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d72:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	0018      	movs	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	b004      	add	sp, #16
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40014400 	.word	0x40014400
 8002d88:	40014800 	.word	0x40014800
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	00010007 	.word	0x00010007

08002d94 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	001a      	movs	r2, r3
 8002da2:	1cbb      	adds	r3, r7, #2
 8002da4:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d108      	bne.n	8002dbe <HAL_TIM_PWM_Start_DMA+0x2a>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	223e      	movs	r2, #62	; 0x3e
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3b02      	subs	r3, #2
 8002db6:	425a      	negs	r2, r3
 8002db8:	4153      	adcs	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e037      	b.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x9a>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d108      	bne.n	8002dd6 <HAL_TIM_PWM_Start_DMA+0x42>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	223f      	movs	r2, #63	; 0x3f
 8002dc8:	5c9b      	ldrb	r3, [r3, r2]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3b02      	subs	r3, #2
 8002dce:	425a      	negs	r2, r3
 8002dd0:	4153      	adcs	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e02b      	b.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x9a>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d108      	bne.n	8002dee <HAL_TIM_PWM_Start_DMA+0x5a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2240      	movs	r2, #64	; 0x40
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	3b02      	subs	r3, #2
 8002de6:	425a      	negs	r2, r3
 8002de8:	4153      	adcs	r3, r2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e01f      	b.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x9a>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b0c      	cmp	r3, #12
 8002df2:	d108      	bne.n	8002e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2241      	movs	r2, #65	; 0x41
 8002df8:	5c9b      	ldrb	r3, [r3, r2]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	425a      	negs	r2, r3
 8002e00:	4153      	adcs	r3, r2
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e013      	b.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x9a>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d108      	bne.n	8002e1e <HAL_TIM_PWM_Start_DMA+0x8a>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2242      	movs	r2, #66	; 0x42
 8002e10:	5c9b      	ldrb	r3, [r3, r2]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	3b02      	subs	r3, #2
 8002e16:	425a      	negs	r2, r3
 8002e18:	4153      	adcs	r3, r2
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	e007      	b.n	8002e2e <HAL_TIM_PWM_Start_DMA+0x9a>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2243      	movs	r2, #67	; 0x43
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	3b02      	subs	r3, #2
 8002e28:	425a      	negs	r2, r3
 8002e2a:	4153      	adcs	r3, r2
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_TIM_PWM_Start_DMA+0xa2>
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
 8002e34:	e17e      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d108      	bne.n	8002e4e <HAL_TIM_PWM_Start_DMA+0xba>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	223e      	movs	r2, #62	; 0x3e
 8002e40:	5c9b      	ldrb	r3, [r3, r2]
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	425a      	negs	r2, r3
 8002e48:	4153      	adcs	r3, r2
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	e037      	b.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x12a>
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d108      	bne.n	8002e66 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	223f      	movs	r2, #63	; 0x3f
 8002e58:	5c9b      	ldrb	r3, [r3, r2]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	425a      	negs	r2, r3
 8002e60:	4153      	adcs	r3, r2
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e02b      	b.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x12a>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d108      	bne.n	8002e7e <HAL_TIM_PWM_Start_DMA+0xea>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2240      	movs	r2, #64	; 0x40
 8002e70:	5c9b      	ldrb	r3, [r3, r2]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	425a      	negs	r2, r3
 8002e78:	4153      	adcs	r3, r2
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e01f      	b.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x12a>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	d108      	bne.n	8002e96 <HAL_TIM_PWM_Start_DMA+0x102>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2241      	movs	r2, #65	; 0x41
 8002e88:	5c9b      	ldrb	r3, [r3, r2]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	425a      	negs	r2, r3
 8002e90:	4153      	adcs	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e013      	b.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x12a>
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d108      	bne.n	8002eae <HAL_TIM_PWM_Start_DMA+0x11a>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2242      	movs	r2, #66	; 0x42
 8002ea0:	5c9b      	ldrb	r3, [r3, r2]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	425a      	negs	r2, r3
 8002ea8:	4153      	adcs	r3, r2
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	e007      	b.n	8002ebe <HAL_TIM_PWM_Start_DMA+0x12a>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2243      	movs	r2, #67	; 0x43
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	425a      	negs	r2, r3
 8002eba:	4153      	adcs	r3, r2
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d035      	beq.n	8002f2e <HAL_TIM_PWM_Start_DMA+0x19a>
  {
    if ((pData == NULL) && (Length > 0U))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d105      	bne.n	8002ed4 <HAL_TIM_PWM_Start_DMA+0x140>
 8002ec8:	1cbb      	adds	r3, r7, #2
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_PWM_Start_DMA+0x140>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e12f      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d104      	bne.n	8002ee4 <HAL_TIM_PWM_Start_DMA+0x150>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	223e      	movs	r2, #62	; 0x3e
 8002ede:	2102      	movs	r1, #2
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	e026      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d104      	bne.n	8002ef4 <HAL_TIM_PWM_Start_DMA+0x160>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	223f      	movs	r2, #63	; 0x3f
 8002eee:	2102      	movs	r1, #2
 8002ef0:	5499      	strb	r1, [r3, r2]
 8002ef2:	e01e      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d104      	bne.n	8002f04 <HAL_TIM_PWM_Start_DMA+0x170>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2240      	movs	r2, #64	; 0x40
 8002efe:	2102      	movs	r1, #2
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	e016      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d104      	bne.n	8002f14 <HAL_TIM_PWM_Start_DMA+0x180>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2241      	movs	r2, #65	; 0x41
 8002f0e:	2102      	movs	r1, #2
 8002f10:	5499      	strb	r1, [r3, r2]
 8002f12:	e00e      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b10      	cmp	r3, #16
 8002f18:	d104      	bne.n	8002f24 <HAL_TIM_PWM_Start_DMA+0x190>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2242      	movs	r2, #66	; 0x42
 8002f1e:	2102      	movs	r1, #2
 8002f20:	5499      	strb	r1, [r3, r2]
 8002f22:	e006      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2243      	movs	r2, #67	; 0x43
 8002f28:	2102      	movs	r1, #2
 8002f2a:	5499      	strb	r1, [r3, r2]
 8002f2c:	e001      	b.n	8002f32 <HAL_TIM_PWM_Start_DMA+0x19e>
    }
  }
  else
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e100      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
  }

  switch (Channel)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d100      	bne.n	8002f3a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8002f38:	e080      	b.n	800303c <HAL_TIM_PWM_Start_DMA+0x2a8>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d900      	bls.n	8002f42 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8002f40:	e0a1      	b.n	8003086 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d054      	beq.n	8002ff2 <HAL_TIM_PWM_Start_DMA+0x25e>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d900      	bls.n	8002f50 <HAL_TIM_PWM_Start_DMA+0x1bc>
 8002f4e:	e09a      	b.n	8003086 <HAL_TIM_PWM_Start_DMA+0x2f2>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_PWM_Start_DMA+0x1ca>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d025      	beq.n	8002fa8 <HAL_TIM_PWM_Start_DMA+0x214>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
      break;
    }

    default:
      break;
 8002f5c:	e093      	b.n	8003086 <HAL_TIM_PWM_Start_DMA+0x2f2>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	4a76      	ldr	r2, [pc, #472]	; (800313c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8002f64:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	4a75      	ldr	r2, [pc, #468]	; (8003140 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4a74      	ldr	r2, [pc, #464]	; (8003144 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8002f74:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	3334      	adds	r3, #52	; 0x34
 8002f82:	001a      	movs	r2, r3
 8002f84:	1cbb      	adds	r3, r7, #2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	f7fe fab4 	bl	80014f4 <HAL_DMA_Start_IT>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_TIM_PWM_Start_DMA+0x200>
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0cf      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2180      	movs	r1, #128	; 0x80
 8002fa0:	0089      	lsls	r1, r1, #2
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
      break;
 8002fa6:	e06f      	b.n	8003088 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	4a63      	ldr	r2, [pc, #396]	; (800313c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8002fae:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb4:	4a62      	ldr	r2, [pc, #392]	; (8003140 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbc:	4a61      	ldr	r2, [pc, #388]	; (8003144 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8002fbe:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3338      	adds	r3, #56	; 0x38
 8002fcc:	001a      	movs	r2, r3
 8002fce:	1cbb      	adds	r3, r7, #2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	f7fe fa8f 	bl	80014f4 <HAL_DMA_Start_IT>
 8002fd6:	1e03      	subs	r3, r0, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_TIM_PWM_Start_DMA+0x24a>
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e0aa      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68da      	ldr	r2, [r3, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	00c9      	lsls	r1, r1, #3
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]
      break;
 8002ff0:	e04a      	b.n	8003088 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	4a51      	ldr	r2, [pc, #324]	; (800313c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8002ff8:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffe:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003008:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	333c      	adds	r3, #60	; 0x3c
 8003016:	001a      	movs	r2, r3
 8003018:	1cbb      	adds	r3, r7, #2
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	f7fe fa6a 	bl	80014f4 <HAL_DMA_Start_IT>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d001      	beq.n	8003028 <HAL_TIM_PWM_Start_DMA+0x294>
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e085      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2180      	movs	r1, #128	; 0x80
 8003034:	0109      	lsls	r1, r1, #4
 8003036:	430a      	orrs	r2, r1
 8003038:	60da      	str	r2, [r3, #12]
      break;
 800303a:	e025      	b.n	8003088 <HAL_TIM_PWM_Start_DMA+0x2f4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a3e      	ldr	r2, [pc, #248]	; (800313c <HAL_TIM_PWM_Start_DMA+0x3a8>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	4a3d      	ldr	r2, [pc, #244]	; (8003140 <HAL_TIM_PWM_Start_DMA+0x3ac>)
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_TIM_PWM_Start_DMA+0x3b0>)
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3340      	adds	r3, #64	; 0x40
 8003060:	001a      	movs	r2, r3
 8003062:	1cbb      	adds	r3, r7, #2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	f7fe fa45 	bl	80014f4 <HAL_DMA_Start_IT>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d001      	beq.n	8003072 <HAL_TIM_PWM_Start_DMA+0x2de>
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e060      	b.n	8003134 <HAL_TIM_PWM_Start_DMA+0x3a0>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2180      	movs	r1, #128	; 0x80
 800307e:	0149      	lsls	r1, r1, #5
 8003080:	430a      	orrs	r2, r1
 8003082:	60da      	str	r2, [r3, #12]
      break;
 8003084:	e000      	b.n	8003088 <HAL_TIM_PWM_Start_DMA+0x2f4>
      break;
 8003086:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	2201      	movs	r2, #1
 8003090:	0018      	movs	r0, r3
 8003092:	f000 ff99 	bl	8003fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x320>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a29      	ldr	r2, [pc, #164]	; (800314c <HAL_TIM_PWM_Start_DMA+0x3b8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_PWM_Start_DMA+0x320>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a28      	ldr	r2, [pc, #160]	; (8003150 <HAL_TIM_PWM_Start_DMA+0x3bc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_TIM_PWM_Start_DMA+0x324>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <HAL_TIM_PWM_Start_DMA+0x326>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_TIM_PWM_Start_DMA+0x33c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	0209      	lsls	r1, r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1c      	ldr	r2, [pc, #112]	; (8003148 <HAL_TIM_PWM_Start_DMA+0x3b4>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00a      	beq.n	80030f0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	05db      	lsls	r3, r3, #23
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d004      	beq.n	80030f0 <HAL_TIM_PWM_Start_DMA+0x35c>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a1a      	ldr	r2, [pc, #104]	; (8003154 <HAL_TIM_PWM_Start_DMA+0x3c0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d116      	bne.n	800311e <HAL_TIM_PWM_Start_DMA+0x38a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	4a18      	ldr	r2, [pc, #96]	; (8003158 <HAL_TIM_PWM_Start_DMA+0x3c4>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d016      	beq.n	8003130 <HAL_TIM_PWM_Start_DMA+0x39c>
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	025b      	lsls	r3, r3, #9
 8003108:	429a      	cmp	r2, r3
 800310a:	d011      	beq.n	8003130 <HAL_TIM_PWM_Start_DMA+0x39c>
    {
      __HAL_TIM_ENABLE(htim);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2101      	movs	r1, #1
 8003118:	430a      	orrs	r2, r1
 800311a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311c:	e008      	b.n	8003130 <HAL_TIM_PWM_Start_DMA+0x39c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2101      	movs	r1, #1
 800312a:	430a      	orrs	r2, r1
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e000      	b.n	8003132 <HAL_TIM_PWM_Start_DMA+0x39e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003130:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	0018      	movs	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	b006      	add	sp, #24
 800313a:	bd80      	pop	{r7, pc}
 800313c:	08003759 	.word	0x08003759
 8003140:	08003803 	.word	0x08003803
 8003144:	080036c5 	.word	0x080036c5
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40014400 	.word	0x40014400
 8003150:	40014800 	.word	0x40014800
 8003154:	40000400 	.word	0x40000400
 8003158:	00010007 	.word	0x00010007

0800315c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	d039      	beq.n	80031e0 <HAL_TIM_PWM_Stop_DMA+0x84>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d844      	bhi.n	80031fc <HAL_TIM_PWM_Stop_DMA+0xa0>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d025      	beq.n	80031c4 <HAL_TIM_PWM_Stop_DMA+0x68>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b08      	cmp	r3, #8
 800317c:	d83e      	bhi.n	80031fc <HAL_TIM_PWM_Stop_DMA+0xa0>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_TIM_PWM_Stop_DMA+0x30>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_PWM_Stop_DMA+0x4c>
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
      break;
    }

    default:
      break;
 800318a:	e037      	b.n	80031fc <HAL_TIM_PWM_Stop_DMA+0xa0>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4954      	ldr	r1, [pc, #336]	; (80032e8 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8003198:	400a      	ands	r2, r1
 800319a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	0018      	movs	r0, r3
 80031a2:	f7fe fa8f 	bl	80016c4 <HAL_DMA_Abort_IT>
      break;
 80031a6:	e02a      	b.n	80031fe <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	494e      	ldr	r1, [pc, #312]	; (80032ec <HAL_TIM_PWM_Stop_DMA+0x190>)
 80031b4:	400a      	ands	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fe fa81 	bl	80016c4 <HAL_DMA_Abort_IT>
      break;
 80031c2:	e01c      	b.n	80031fe <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4948      	ldr	r1, [pc, #288]	; (80032f0 <HAL_TIM_PWM_Stop_DMA+0x194>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fe fa73 	bl	80016c4 <HAL_DMA_Abort_IT>
      break;
 80031de:	e00e      	b.n	80031fe <HAL_TIM_PWM_Stop_DMA+0xa2>
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4942      	ldr	r1, [pc, #264]	; (80032f4 <HAL_TIM_PWM_Stop_DMA+0x198>)
 80031ec:	400a      	ands	r2, r1
 80031ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	0018      	movs	r0, r3
 80031f6:	f7fe fa65 	bl	80016c4 <HAL_DMA_Abort_IT>
      break;
 80031fa:	e000      	b.n	80031fe <HAL_TIM_PWM_Stop_DMA+0xa2>
      break;
 80031fc:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6839      	ldr	r1, [r7, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	0018      	movs	r0, r3
 8003208:	f000 fede 	bl	8003fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d009      	beq.n	800322a <HAL_TIM_PWM_Stop_DMA+0xce>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a38      	ldr	r2, [pc, #224]	; (80032fc <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d004      	beq.n	800322a <HAL_TIM_PWM_Stop_DMA+0xce>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a36      	ldr	r2, [pc, #216]	; (8003300 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d101      	bne.n	800322e <HAL_TIM_PWM_Stop_DMA+0xd2>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <HAL_TIM_PWM_Stop_DMA+0xd4>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d013      	beq.n	800325c <HAL_TIM_PWM_Stop_DMA+0x100>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a32      	ldr	r2, [pc, #200]	; (8003304 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 800323c:	4013      	ands	r3, r2
 800323e:	d10d      	bne.n	800325c <HAL_TIM_PWM_Stop_DMA+0x100>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a30      	ldr	r2, [pc, #192]	; (8003308 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003248:	4013      	ands	r3, r2
 800324a:	d107      	bne.n	800325c <HAL_TIM_PWM_Stop_DMA+0x100>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	492d      	ldr	r1, [pc, #180]	; (800330c <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8003258:	400a      	ands	r2, r1
 800325a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a28      	ldr	r2, [pc, #160]	; (8003304 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8003264:	4013      	ands	r3, r2
 8003266:	d10d      	bne.n	8003284 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a26      	ldr	r2, [pc, #152]	; (8003308 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8003270:	4013      	ands	r3, r2
 8003272:	d107      	bne.n	8003284 <HAL_TIM_PWM_Stop_DMA+0x128>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_TIM_PWM_Stop_DMA+0x138>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223e      	movs	r2, #62	; 0x3e
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	e023      	b.n	80032dc <HAL_TIM_PWM_Stop_DMA+0x180>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_PWM_Stop_DMA+0x148>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223f      	movs	r2, #63	; 0x3f
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	e01b      	b.n	80032dc <HAL_TIM_PWM_Stop_DMA+0x180>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2240      	movs	r2, #64	; 0x40
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
 80032b2:	e013      	b.n	80032dc <HAL_TIM_PWM_Stop_DMA+0x180>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d104      	bne.n	80032c4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2241      	movs	r2, #65	; 0x41
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]
 80032c2:	e00b      	b.n	80032dc <HAL_TIM_PWM_Stop_DMA+0x180>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2b10      	cmp	r3, #16
 80032c8:	d104      	bne.n	80032d4 <HAL_TIM_PWM_Stop_DMA+0x178>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2242      	movs	r2, #66	; 0x42
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
 80032d2:	e003      	b.n	80032dc <HAL_TIM_PWM_Stop_DMA+0x180>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2243      	movs	r2, #67	; 0x43
 80032d8:	2101      	movs	r1, #1
 80032da:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	0018      	movs	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	b002      	add	sp, #8
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	fffffdff 	.word	0xfffffdff
 80032ec:	fffffbff 	.word	0xfffffbff
 80032f0:	fffff7ff 	.word	0xfffff7ff
 80032f4:	ffffefff 	.word	0xffffefff
 80032f8:	40012c00 	.word	0x40012c00
 80032fc:	40014400 	.word	0x40014400
 8003300:	40014800 	.word	0x40014800
 8003304:	00001111 	.word	0x00001111
 8003308:	00000444 	.word	0x00000444
 800330c:	ffff7fff 	.word	0xffff7fff

08003310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	223c      	movs	r2, #60	; 0x3c
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003326:	2302      	movs	r3, #2
 8003328:	e0df      	b.n	80034ea <HAL_TIM_PWM_ConfigChannel+0x1da>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	223c      	movs	r2, #60	; 0x3c
 800332e:	2101      	movs	r1, #1
 8003330:	5499      	strb	r1, [r3, r2]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b14      	cmp	r3, #20
 8003336:	d900      	bls.n	800333a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8003338:	e0d1      	b.n	80034de <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	009a      	lsls	r2, r3, #2
 800333e:	4b6d      	ldr	r3, [pc, #436]	; (80034f4 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8003340:	18d3      	adds	r3, r2, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	0011      	movs	r1, r2
 800334e:	0018      	movs	r0, r3
 8003350:	f000 fb02 	bl	8003958 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2108      	movs	r1, #8
 8003360:	430a      	orrs	r2, r1
 8003362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	699a      	ldr	r2, [r3, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2104      	movs	r1, #4
 8003370:	438a      	bics	r2, r1
 8003372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6999      	ldr	r1, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	619a      	str	r2, [r3, #24]
      break;
 8003386:	e0ab      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	0011      	movs	r1, r2
 8003390:	0018      	movs	r0, r3
 8003392:	f000 fb61 	bl	8003a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2180      	movs	r1, #128	; 0x80
 80033a2:	0109      	lsls	r1, r1, #4
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699a      	ldr	r2, [r3, #24]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4951      	ldr	r1, [pc, #324]	; (80034f8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80033b4:	400a      	ands	r2, r1
 80033b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6999      	ldr	r1, [r3, #24]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	021a      	lsls	r2, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	619a      	str	r2, [r3, #24]
      break;
 80033cc:	e088      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	0011      	movs	r1, r2
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fbbc 	bl	8003b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2108      	movs	r1, #8
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2104      	movs	r1, #4
 80033f8:	438a      	bics	r2, r1
 80033fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69d9      	ldr	r1, [r3, #28]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	61da      	str	r2, [r3, #28]
      break;
 800340e:	e067      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68ba      	ldr	r2, [r7, #8]
 8003416:	0011      	movs	r1, r2
 8003418:	0018      	movs	r0, r3
 800341a:	f000 fc1d 	bl	8003c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	0109      	lsls	r1, r1, #4
 800342c:	430a      	orrs	r2, r1
 800342e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	69da      	ldr	r2, [r3, #28]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	492f      	ldr	r1, [pc, #188]	; (80034f8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800343c:	400a      	ands	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69d9      	ldr	r1, [r3, #28]
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	021a      	lsls	r2, r3, #8
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	61da      	str	r2, [r3, #28]
      break;
 8003454:	e044      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	0011      	movs	r1, r2
 800345e:	0018      	movs	r0, r3
 8003460:	f000 fc5e 	bl	8003d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2108      	movs	r1, #8
 8003470:	430a      	orrs	r2, r1
 8003472:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2104      	movs	r1, #4
 8003480:	438a      	bics	r2, r1
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003496:	e023      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	0011      	movs	r1, r2
 80034a0:	0018      	movs	r0, r3
 80034a2:	f000 fc97 	bl	8003dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2180      	movs	r1, #128	; 0x80
 80034b2:	0109      	lsls	r1, r1, #4
 80034b4:	430a      	orrs	r2, r1
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80034dc:	e000      	b.n	80034e0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80034de:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	0018      	movs	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	08006ec4 	.word	0x08006ec4
 80034f8:	fffffbff 	.word	0xfffffbff

080034fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	223c      	movs	r2, #60	; 0x3c
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIM_ConfigClockSource+0x18>
 8003510:	2302      	movs	r3, #2
 8003512:	e0b7      	b.n	8003684 <HAL_TIM_ConfigClockSource+0x188>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223c      	movs	r2, #60	; 0x3c
 8003518:	2101      	movs	r1, #1
 800351a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	223d      	movs	r2, #61	; 0x3d
 8003520:	2102      	movs	r1, #2
 8003522:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a57      	ldr	r2, [pc, #348]	; (800368c <HAL_TIM_ConfigClockSource+0x190>)
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a56      	ldr	r2, [pc, #344]	; (8003690 <HAL_TIM_ConfigClockSource+0x194>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2280      	movs	r2, #128	; 0x80
 800354a:	0192      	lsls	r2, r2, #6
 800354c:	4293      	cmp	r3, r2
 800354e:	d040      	beq.n	80035d2 <HAL_TIM_ConfigClockSource+0xd6>
 8003550:	2280      	movs	r2, #128	; 0x80
 8003552:	0192      	lsls	r2, r2, #6
 8003554:	4293      	cmp	r3, r2
 8003556:	d900      	bls.n	800355a <HAL_TIM_ConfigClockSource+0x5e>
 8003558:	e088      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	0152      	lsls	r2, r2, #5
 800355e:	4293      	cmp	r3, r2
 8003560:	d100      	bne.n	8003564 <HAL_TIM_ConfigClockSource+0x68>
 8003562:	e085      	b.n	8003670 <HAL_TIM_ConfigClockSource+0x174>
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	0152      	lsls	r2, r2, #5
 8003568:	4293      	cmp	r3, r2
 800356a:	d900      	bls.n	800356e <HAL_TIM_ConfigClockSource+0x72>
 800356c:	e07e      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 800356e:	2b70      	cmp	r3, #112	; 0x70
 8003570:	d018      	beq.n	80035a4 <HAL_TIM_ConfigClockSource+0xa8>
 8003572:	d900      	bls.n	8003576 <HAL_TIM_ConfigClockSource+0x7a>
 8003574:	e07a      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 8003576:	2b60      	cmp	r3, #96	; 0x60
 8003578:	d04f      	beq.n	800361a <HAL_TIM_ConfigClockSource+0x11e>
 800357a:	d900      	bls.n	800357e <HAL_TIM_ConfigClockSource+0x82>
 800357c:	e076      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 800357e:	2b50      	cmp	r3, #80	; 0x50
 8003580:	d03b      	beq.n	80035fa <HAL_TIM_ConfigClockSource+0xfe>
 8003582:	d900      	bls.n	8003586 <HAL_TIM_ConfigClockSource+0x8a>
 8003584:	e072      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d057      	beq.n	800363a <HAL_TIM_ConfigClockSource+0x13e>
 800358a:	d900      	bls.n	800358e <HAL_TIM_ConfigClockSource+0x92>
 800358c:	e06e      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 800358e:	2b30      	cmp	r3, #48	; 0x30
 8003590:	d063      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15e>
 8003592:	d86b      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 8003594:	2b20      	cmp	r3, #32
 8003596:	d060      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15e>
 8003598:	d868      	bhi.n	800366c <HAL_TIM_ConfigClockSource+0x170>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d05d      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15e>
 800359e:	2b10      	cmp	r3, #16
 80035a0:	d05b      	beq.n	800365a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80035a2:	e063      	b.n	800366c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	f000 fce8 	bl	8003f88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2277      	movs	r2, #119	; 0x77
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	609a      	str	r2, [r3, #8]
      break;
 80035d0:	e04f      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f000 fcd1 	bl	8003f88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	01c9      	lsls	r1, r1, #7
 80035f4:	430a      	orrs	r2, r1
 80035f6:	609a      	str	r2, [r3, #8]
      break;
 80035f8:	e03b      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	001a      	movs	r2, r3
 8003608:	f000 fc42 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2150      	movs	r1, #80	; 0x50
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fc9c 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 8003618:	e02b      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	001a      	movs	r2, r3
 8003628:	f000 fc60 	bl	8003eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2160      	movs	r1, #96	; 0x60
 8003632:	0018      	movs	r0, r3
 8003634:	f000 fc8c 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 8003638:	e01b      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	001a      	movs	r2, r3
 8003648:	f000 fc22 	bl	8003e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2140      	movs	r1, #64	; 0x40
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fc7c 	bl	8003f50 <TIM_ITRx_SetConfig>
      break;
 8003658:	e00b      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	0019      	movs	r1, r3
 8003664:	0010      	movs	r0, r2
 8003666:	f000 fc73 	bl	8003f50 <TIM_ITRx_SetConfig>
        break;
 800366a:	e002      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	e000      	b.n	8003672 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8003670:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	223d      	movs	r2, #61	; 0x3d
 8003676:	2101      	movs	r1, #1
 8003678:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	223c      	movs	r2, #60	; 0x3c
 800367e:	2100      	movs	r1, #0
 8003680:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	ffceff88 	.word	0xffceff88
 8003690:	ffff00ff 	.word	0xffff00ff

08003694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800369c:	46c0      	nop			; (mov r8, r8)
 800369e:	46bd      	mov	sp, r7
 80036a0:	b002      	add	sp, #8
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b002      	add	sp, #8
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d107      	bne.n	80036ec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	223e      	movs	r2, #62	; 0x3e
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]
 80036ea:	e02a      	b.n	8003742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d107      	bne.n	8003706 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2202      	movs	r2, #2
 80036fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	223f      	movs	r2, #63	; 0x3f
 8003700:	2101      	movs	r1, #1
 8003702:	5499      	strb	r1, [r3, r2]
 8003704:	e01d      	b.n	8003742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d107      	bne.n	8003720 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2204      	movs	r2, #4
 8003714:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	e010      	b.n	8003742 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d107      	bne.n	800373a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2208      	movs	r2, #8
 800372e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2241      	movs	r2, #65	; 0x41
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]
 8003738:	e003      	b.n	8003742 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	223d      	movs	r2, #61	; 0x3d
 800373e:	2101      	movs	r1, #1
 8003740:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	0018      	movs	r0, r3
 8003746:	f7ff ffb5 	bl	80036b4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b004      	add	sp, #16
 8003756:	bd80      	pop	{r7, pc}

08003758 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	429a      	cmp	r2, r3
 800376e:	d10b      	bne.n	8003788 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d136      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	223e      	movs	r2, #62	; 0x3e
 8003782:	2101      	movs	r1, #1
 8003784:	5499      	strb	r1, [r3, r2]
 8003786:	e031      	b.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	d10b      	bne.n	80037aa <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2202      	movs	r2, #2
 8003796:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d125      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	223f      	movs	r2, #63	; 0x3f
 80037a4:	2101      	movs	r1, #1
 80037a6:	5499      	strb	r1, [r3, r2]
 80037a8:	e020      	b.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d10b      	bne.n	80037cc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2204      	movs	r2, #4
 80037b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d114      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	2101      	movs	r1, #1
 80037c8:	5499      	strb	r1, [r3, r2]
 80037ca:	e00f      	b.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d10a      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2208      	movs	r2, #8
 80037da:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d103      	bne.n	80037ec <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2241      	movs	r2, #65	; 0x41
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	0018      	movs	r0, r3
 80037f0:	f7ff ff50 	bl	8003694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	771a      	strb	r2, [r3, #28]
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b004      	add	sp, #16
 8003800:	bd80      	pop	{r7, pc}

08003802 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	429a      	cmp	r2, r3
 8003818:	d103      	bne.n	8003822 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	771a      	strb	r2, [r3, #28]
 8003820:	e019      	b.n	8003856 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	429a      	cmp	r2, r3
 800382a:	d103      	bne.n	8003834 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2202      	movs	r2, #2
 8003830:	771a      	strb	r2, [r3, #28]
 8003832:	e010      	b.n	8003856 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d103      	bne.n	8003846 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2204      	movs	r2, #4
 8003842:	771a      	strb	r2, [r3, #28]
 8003844:	e007      	b.n	8003856 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	429a      	cmp	r2, r3
 800384e:	d102      	bne.n	8003856 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2208      	movs	r2, #8
 8003854:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	0018      	movs	r0, r3
 800385a:	f7ff ff23 	bl	80036a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
}
 8003864:	46c0      	nop			; (mov r8, r8)
 8003866:	46bd      	mov	sp, r7
 8003868:	b004      	add	sp, #16
 800386a:	bd80      	pop	{r7, pc}

0800386c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a30      	ldr	r2, [pc, #192]	; (8003940 <TIM_Base_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d008      	beq.n	8003896 <TIM_Base_SetConfig+0x2a>
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	05db      	lsls	r3, r3, #23
 800388a:	429a      	cmp	r2, r3
 800388c:	d003      	beq.n	8003896 <TIM_Base_SetConfig+0x2a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <TIM_Base_SetConfig+0xd8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d108      	bne.n	80038a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2270      	movs	r2, #112	; 0x70
 800389a:	4393      	bics	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <TIM_Base_SetConfig+0xd4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d014      	beq.n	80038da <TIM_Base_SetConfig+0x6e>
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	05db      	lsls	r3, r3, #23
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d00f      	beq.n	80038da <TIM_Base_SetConfig+0x6e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a21      	ldr	r2, [pc, #132]	; (8003944 <TIM_Base_SetConfig+0xd8>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_Base_SetConfig+0x6e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <TIM_Base_SetConfig+0xdc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_Base_SetConfig+0x6e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <TIM_Base_SetConfig+0xe0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_Base_SetConfig+0x6e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <TIM_Base_SetConfig+0xe4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d108      	bne.n	80038ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <TIM_Base_SetConfig+0xe8>)
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	4393      	bics	r3, r2
 80038f2:	001a      	movs	r2, r3
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <TIM_Base_SetConfig+0xd4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <TIM_Base_SetConfig+0xbe>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a0b      	ldr	r2, [pc, #44]	; (800394c <TIM_Base_SetConfig+0xe0>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d003      	beq.n	800392a <TIM_Base_SetConfig+0xbe>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a0a      	ldr	r2, [pc, #40]	; (8003950 <TIM_Base_SetConfig+0xe4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d103      	bne.n	8003932 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	615a      	str	r2, [r3, #20]
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40012c00 	.word	0x40012c00
 8003944:	40000400 	.word	0x40000400
 8003948:	40002000 	.word	0x40002000
 800394c:	40014400 	.word	0x40014400
 8003950:	40014800 	.word	0x40014800
 8003954:	fffffcff 	.word	0xfffffcff

08003958 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	2201      	movs	r2, #1
 8003968:	4393      	bics	r3, r2
 800396a:	001a      	movs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4a2e      	ldr	r2, [pc, #184]	; (8003a40 <TIM_OC1_SetConfig+0xe8>)
 8003986:	4013      	ands	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2203      	movs	r2, #3
 800398e:	4393      	bics	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2202      	movs	r2, #2
 80039a0:	4393      	bics	r3, r2
 80039a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <TIM_OC1_SetConfig+0xec>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d007      	beq.n	80039c6 <TIM_OC1_SetConfig+0x6e>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a23      	ldr	r2, [pc, #140]	; (8003a48 <TIM_OC1_SetConfig+0xf0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d003      	beq.n	80039c6 <TIM_OC1_SetConfig+0x6e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a22      	ldr	r2, [pc, #136]	; (8003a4c <TIM_OC1_SetConfig+0xf4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d10c      	bne.n	80039e0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2208      	movs	r2, #8
 80039ca:	4393      	bics	r3, r2
 80039cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2204      	movs	r2, #4
 80039dc:	4393      	bics	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <TIM_OC1_SetConfig+0xec>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d007      	beq.n	80039f8 <TIM_OC1_SetConfig+0xa0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a17      	ldr	r2, [pc, #92]	; (8003a48 <TIM_OC1_SetConfig+0xf0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_OC1_SetConfig+0xa0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a16      	ldr	r2, [pc, #88]	; (8003a4c <TIM_OC1_SetConfig+0xf4>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d111      	bne.n	8003a1c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <TIM_OC1_SetConfig+0xf8>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4a14      	ldr	r2, [pc, #80]	; (8003a54 <TIM_OC1_SetConfig+0xfc>)
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b006      	add	sp, #24
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	fffeff8f 	.word	0xfffeff8f
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800
 8003a50:	fffffeff 	.word	0xfffffeff
 8003a54:	fffffdff 	.word	0xfffffdff

08003a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	2210      	movs	r2, #16
 8003a68:	4393      	bics	r3, r2
 8003a6a:	001a      	movs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <TIM_OC2_SetConfig+0xe0>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	; (8003b3c <TIM_OC2_SetConfig+0xe4>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	4393      	bics	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a22      	ldr	r2, [pc, #136]	; (8003b40 <TIM_OC2_SetConfig+0xe8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10d      	bne.n	8003ad6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	2280      	movs	r2, #128	; 0x80
 8003abe:	4393      	bics	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2240      	movs	r2, #64	; 0x40
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <TIM_OC2_SetConfig+0xe8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d007      	beq.n	8003aee <TIM_OC2_SetConfig+0x96>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <TIM_OC2_SetConfig+0xec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d003      	beq.n	8003aee <TIM_OC2_SetConfig+0x96>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <TIM_OC2_SetConfig+0xf0>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d113      	bne.n	8003b16 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <TIM_OC2_SetConfig+0xf4>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <TIM_OC2_SetConfig+0xf8>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	621a      	str	r2, [r3, #32]
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b006      	add	sp, #24
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	feff8fff 	.word	0xfeff8fff
 8003b3c:	fffffcff 	.word	0xfffffcff
 8003b40:	40012c00 	.word	0x40012c00
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800
 8003b4c:	fffffbff 	.word	0xfffffbff
 8003b50:	fffff7ff 	.word	0xfffff7ff

08003b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	4a33      	ldr	r2, [pc, #204]	; (8003c30 <TIM_OC3_SetConfig+0xdc>)
 8003b64:	401a      	ands	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a2d      	ldr	r2, [pc, #180]	; (8003c34 <TIM_OC3_SetConfig+0xe0>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2203      	movs	r2, #3
 8003b88:	4393      	bics	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <TIM_OC3_SetConfig+0xe4>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	021b      	lsls	r3, r3, #8
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a23      	ldr	r2, [pc, #140]	; (8003c3c <TIM_OC3_SetConfig+0xe8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d10d      	bne.n	8003bce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <TIM_OC3_SetConfig+0xec>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	021b      	lsls	r3, r3, #8
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	4a1e      	ldr	r2, [pc, #120]	; (8003c44 <TIM_OC3_SetConfig+0xf0>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1a      	ldr	r2, [pc, #104]	; (8003c3c <TIM_OC3_SetConfig+0xe8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <TIM_OC3_SetConfig+0x92>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <TIM_OC3_SetConfig+0xf4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d003      	beq.n	8003be6 <TIM_OC3_SetConfig+0x92>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <TIM_OC3_SetConfig+0xf8>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d113      	bne.n	8003c0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <TIM_OC3_SetConfig+0xfc>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <TIM_OC3_SetConfig+0x100>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b006      	add	sp, #24
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	fffffeff 	.word	0xfffffeff
 8003c34:	fffeff8f 	.word	0xfffeff8f
 8003c38:	fffffdff 	.word	0xfffffdff
 8003c3c:	40012c00 	.word	0x40012c00
 8003c40:	fffff7ff 	.word	0xfffff7ff
 8003c44:	fffffbff 	.word	0xfffffbff
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	ffffefff 	.word	0xffffefff
 8003c54:	ffffdfff 	.word	0xffffdfff

08003c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	4a26      	ldr	r2, [pc, #152]	; (8003d00 <TIM_OC4_SetConfig+0xa8>)
 8003c68:	401a      	ands	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4a20      	ldr	r2, [pc, #128]	; (8003d04 <TIM_OC4_SetConfig+0xac>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <TIM_OC4_SetConfig+0xb0>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	; (8003d0c <TIM_OC4_SetConfig+0xb4>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <TIM_OC4_SetConfig+0xb8>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x70>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <TIM_OC4_SetConfig+0xbc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC4_SetConfig+0x70>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <TIM_OC4_SetConfig+0xc0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d109      	bne.n	8003cdc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4a14      	ldr	r2, [pc, #80]	; (8003d1c <TIM_OC4_SetConfig+0xc4>)
 8003ccc:	4013      	ands	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	019b      	lsls	r3, r3, #6
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	ffffefff 	.word	0xffffefff
 8003d04:	feff8fff 	.word	0xfeff8fff
 8003d08:	fffffcff 	.word	0xfffffcff
 8003d0c:	ffffdfff 	.word	0xffffdfff
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	ffffbfff 	.word	0xffffbfff

08003d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <TIM_OC5_SetConfig+0x9c>)
 8003d30:	401a      	ands	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a1d      	ldr	r2, [pc, #116]	; (8003dc0 <TIM_OC5_SetConfig+0xa0>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4a19      	ldr	r2, [pc, #100]	; (8003dc4 <TIM_OC5_SetConfig+0xa4>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	041b      	lsls	r3, r3, #16
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <TIM_OC5_SetConfig+0xa8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <TIM_OC5_SetConfig+0x66>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <TIM_OC5_SetConfig+0xac>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d003      	beq.n	8003d86 <TIM_OC5_SetConfig+0x66>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a13      	ldr	r2, [pc, #76]	; (8003dd0 <TIM_OC5_SetConfig+0xb0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d109      	bne.n	8003d9a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	4a0c      	ldr	r2, [pc, #48]	; (8003dbc <TIM_OC5_SetConfig+0x9c>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	46c0      	nop			; (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b006      	add	sp, #24
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	fffeffff 	.word	0xfffeffff
 8003dc0:	fffeff8f 	.word	0xfffeff8f
 8003dc4:	fffdffff 	.word	0xfffdffff
 8003dc8:	40012c00 	.word	0x40012c00
 8003dcc:	40014400 	.word	0x40014400
 8003dd0:	40014800 	.word	0x40014800

08003dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a24      	ldr	r2, [pc, #144]	; (8003e74 <TIM_OC6_SetConfig+0xa0>)
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <TIM_OC6_SetConfig+0xa4>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	021b      	lsls	r3, r3, #8
 8003e0a:	68fa      	ldr	r2, [r7, #12]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <TIM_OC6_SetConfig+0xa8>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	051b      	lsls	r3, r3, #20
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a16      	ldr	r2, [pc, #88]	; (8003e80 <TIM_OC6_SetConfig+0xac>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d007      	beq.n	8003e3c <TIM_OC6_SetConfig+0x68>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <TIM_OC6_SetConfig+0xb0>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d003      	beq.n	8003e3c <TIM_OC6_SetConfig+0x68>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a14      	ldr	r2, [pc, #80]	; (8003e88 <TIM_OC6_SetConfig+0xb4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d109      	bne.n	8003e50 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	4a13      	ldr	r2, [pc, #76]	; (8003e8c <TIM_OC6_SetConfig+0xb8>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	029b      	lsls	r3, r3, #10
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b006      	add	sp, #24
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	ffefffff 	.word	0xffefffff
 8003e78:	feff8fff 	.word	0xfeff8fff
 8003e7c:	ffdfffff 	.word	0xffdfffff
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800
 8003e8c:	fffbffff 	.word	0xfffbffff

08003e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	4393      	bics	r3, r2
 8003eaa:	001a      	movs	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	22f0      	movs	r2, #240	; 0xf0
 8003eba:	4393      	bics	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	220a      	movs	r2, #10
 8003ecc:	4393      	bics	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b006      	add	sp, #24
 8003eea:	bd80      	pop	{r7, pc}

08003eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	2210      	movs	r2, #16
 8003efe:	4393      	bics	r3, r2
 8003f00:	001a      	movs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	4a0d      	ldr	r2, [pc, #52]	; (8003f4c <TIM_TI2_ConfigInputStage+0x60>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	031b      	lsls	r3, r3, #12
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	22a0      	movs	r2, #160	; 0xa0
 8003f28:	4393      	bics	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	621a      	str	r2, [r3, #32]
}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b006      	add	sp, #24
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	ffff0fff 	.word	0xffff0fff

08003f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <TIM_ITRx_SetConfig+0x34>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	2207      	movs	r2, #7
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	609a      	str	r2, [r3, #8]
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	ffcfff8f 	.word	0xffcfff8f

08003f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <TIM_ETR_SetConfig+0x3c>)
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b006      	add	sp, #24
 8003fc2:	bd80      	pop	{r7, pc}
 8003fc4:	ffff00ff 	.word	0xffff00ff

08003fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	221f      	movs	r2, #31
 8003fd8:	4013      	ands	r3, r2
 8003fda:	2201      	movs	r2, #1
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	0013      	movs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	43d2      	mvns	r2, r2
 8003fea:	401a      	ands	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1a      	ldr	r2, [r3, #32]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	211f      	movs	r1, #31
 8003ff8:	400b      	ands	r3, r1
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4099      	lsls	r1, r3
 8003ffe:	000b      	movs	r3, r1
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b006      	add	sp, #24
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	223c      	movs	r2, #60	; 0x3c
 800401e:	5c9b      	ldrb	r3, [r3, r2]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e050      	b.n	80040ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	223c      	movs	r2, #60	; 0x3c
 800402c:	2101      	movs	r1, #1
 800402e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	223d      	movs	r2, #61	; 0x3d
 8004034:	2102      	movs	r1, #2
 8004036:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d108      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4a20      	ldr	r2, [pc, #128]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004056:	4013      	ands	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2270      	movs	r2, #112	; 0x70
 8004068:	4393      	bics	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00a      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	05db      	lsls	r3, r3, #23
 8004090:	429a      	cmp	r2, r3
 8004092:	d004      	beq.n	800409e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d10c      	bne.n	80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2280      	movs	r2, #128	; 0x80
 80040a2:	4393      	bics	r3, r2
 80040a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	223d      	movs	r2, #61	; 0x3d
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	223c      	movs	r2, #60	; 0x3c
 80040c4:	2100      	movs	r1, #0
 80040c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	0018      	movs	r0, r3
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b004      	add	sp, #16
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	ff0fffff 	.word	0xff0fffff
 80040dc:	40000400 	.word	0x40000400

080040e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e046      	b.n	8004180 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2284      	movs	r2, #132	; 0x84
 80040f6:	589b      	ldr	r3, [r3, r2]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d107      	bne.n	800410c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2280      	movs	r2, #128	; 0x80
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	0018      	movs	r0, r3
 8004108:	f7fc ff2c 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2284      	movs	r2, #132	; 0x84
 8004110:	2124      	movs	r1, #36	; 0x24
 8004112:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	438a      	bics	r2, r1
 8004122:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	0018      	movs	r0, r3
 8004128:	f000 fbce 	bl	80048c8 <UART_SetConfig>
 800412c:	0003      	movs	r3, r0
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e024      	b.n	8004180 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f000 fe57 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	490d      	ldr	r1, [pc, #52]	; (8004188 <HAL_UART_Init+0xa8>)
 8004152:	400a      	ands	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	212a      	movs	r1, #42	; 0x2a
 8004162:	438a      	bics	r2, r1
 8004164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2101      	movs	r1, #1
 8004172:	430a      	orrs	r2, r1
 8004174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 feef 	bl	8004f5c <UART_CheckIdleState>
 800417e:	0003      	movs	r3, r0
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}
 8004188:	ffffb7ff 	.word	0xffffb7ff

0800418c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e04e      	b.n	800423c <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2284      	movs	r2, #132	; 0x84
 80041a2:	589b      	ldr	r3, [r3, r2]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	2100      	movs	r1, #0
 80041ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f7fc fed6 	bl	8000f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2284      	movs	r2, #132	; 0x84
 80041bc:	2124      	movs	r1, #36	; 0x24
 80041be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f000 fb78 	bl	80048c8 <UART_SetConfig>
 80041d8:	0003      	movs	r3, r0
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_HalfDuplex_Init+0x56>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e02c      	b.n	800423c <HAL_HalfDuplex_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_HalfDuplex_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f000 fe01 	bl	8004df4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4911      	ldr	r1, [pc, #68]	; (8004244 <HAL_HalfDuplex_Init+0xb8>)
 80041fe:	400a      	ands	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2122      	movs	r1, #34	; 0x22
 800420e:	438a      	bics	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2108      	movs	r1, #8
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	430a      	orrs	r2, r1
 8004230:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	0018      	movs	r0, r3
 8004236:	f000 fe91 	bl	8004f5c <UART_CheckIdleState>
 800423a:	0003      	movs	r3, r0
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b002      	add	sp, #8
 8004242:	bd80      	pop	{r7, pc}
 8004244:	ffffb7ff 	.word	0xffffb7ff

08004248 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af02      	add	r7, sp, #8
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	603b      	str	r3, [r7, #0]
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2284      	movs	r2, #132	; 0x84
 800425c:	589b      	ldr	r3, [r3, r2]
 800425e:	2b20      	cmp	r3, #32
 8004260:	d000      	beq.n	8004264 <HAL_UART_Transmit+0x1c>
 8004262:	e097      	b.n	8004394 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_UART_Transmit+0x2a>
 800426a:	1dbb      	adds	r3, r7, #6
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e08f      	b.n	8004396 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	2380      	movs	r3, #128	; 0x80
 800427c:	015b      	lsls	r3, r3, #5
 800427e:	429a      	cmp	r2, r3
 8004280:	d109      	bne.n	8004296 <HAL_UART_Transmit+0x4e>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2201      	movs	r2, #1
 800428e:	4013      	ands	r3, r2
 8004290:	d001      	beq.n	8004296 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2280      	movs	r2, #128	; 0x80
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_UART_Transmit+0x5c>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e078      	b.n	8004396 <HAL_UART_Transmit+0x14e>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	228c      	movs	r2, #140	; 0x8c
 80042b0:	2100      	movs	r1, #0
 80042b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2284      	movs	r2, #132	; 0x84
 80042b8:	2121      	movs	r1, #33	; 0x21
 80042ba:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042bc:	f7fc ff84 	bl	80011c8 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1dba      	adds	r2, r7, #6
 80042c8:	2154      	movs	r1, #84	; 0x54
 80042ca:	8812      	ldrh	r2, [r2, #0]
 80042cc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1dba      	adds	r2, r7, #6
 80042d2:	2156      	movs	r1, #86	; 0x56
 80042d4:	8812      	ldrh	r2, [r2, #0]
 80042d6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	015b      	lsls	r3, r3, #5
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d108      	bne.n	80042f6 <HAL_UART_Transmit+0xae>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d104      	bne.n	80042f6 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61bb      	str	r3, [r7, #24]
 80042f4:	e003      	b.n	80042fe <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2280      	movs	r2, #128	; 0x80
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004306:	e02c      	b.n	8004362 <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	0013      	movs	r3, r2
 8004312:	2200      	movs	r2, #0
 8004314:	2180      	movs	r1, #128	; 0x80
 8004316:	f000 fe6b 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e039      	b.n	8004396 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10b      	bne.n	8004340 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	05d2      	lsls	r2, r2, #23
 8004334:	0dd2      	lsrs	r2, r2, #23
 8004336:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	3302      	adds	r3, #2
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	e007      	b.n	8004350 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	781a      	ldrb	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	3301      	adds	r3, #1
 800434e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2256      	movs	r2, #86	; 0x56
 8004354:	5a9b      	ldrh	r3, [r3, r2]
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b299      	uxth	r1, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2256      	movs	r2, #86	; 0x56
 8004360:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2256      	movs	r2, #86	; 0x56
 8004366:	5a9b      	ldrh	r3, [r3, r2]
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1cc      	bne.n	8004308 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	0013      	movs	r3, r2
 8004378:	2200      	movs	r2, #0
 800437a:	2140      	movs	r1, #64	; 0x40
 800437c:	f000 fe38 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004380:	1e03      	subs	r3, r0, #0
 8004382:	d001      	beq.n	8004388 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e006      	b.n	8004396 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2284      	movs	r2, #132	; 0x84
 800438c:	2120      	movs	r1, #32
 800438e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b008      	add	sp, #32
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	1dbb      	adds	r3, r7, #6
 80043aa:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2288      	movs	r2, #136	; 0x88
 80043b0:	589b      	ldr	r3, [r3, r2]
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d12f      	bne.n	8004416 <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_UART_Receive_IT+0x26>
 80043bc:	1dbb      	adds	r3, r7, #6
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e027      	b.n	8004418 <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	015b      	lsls	r3, r3, #5
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d109      	bne.n	80043e8 <HAL_UART_Receive_IT+0x4a>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	2201      	movs	r2, #1
 80043e0:	4013      	ands	r3, r2
 80043e2:	d001      	beq.n	80043e8 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e017      	b.n	8004418 <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	5c9b      	ldrb	r3, [r3, r2]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Receive_IT+0x58>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e010      	b.n	8004418 <HAL_UART_Receive_IT+0x7a>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2280      	movs	r2, #128	; 0x80
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004404:	1dbb      	adds	r3, r7, #6
 8004406:	881a      	ldrh	r2, [r3, #0]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	0018      	movs	r0, r3
 800440e:	f000 fe71 	bl	80050f4 <UART_Start_Receive_IT>
 8004412:	0003      	movs	r3, r0
 8004414:	e000      	b.n	8004418 <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4abb      	ldr	r2, [pc, #748]	; (8004730 <HAL_UART_IRQHandler+0x310>)
 8004444:	4013      	ands	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d117      	bne.n	800447e <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2220      	movs	r2, #32
 8004452:	4013      	ands	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2220      	movs	r2, #32
 800445a:	4013      	ands	r3, r2
 800445c:	d104      	bne.n	8004468 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	2380      	movs	r3, #128	; 0x80
 8004462:	055b      	lsls	r3, r3, #21
 8004464:	4013      	ands	r3, r2
 8004466:	d00a      	beq.n	800447e <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	2b00      	cmp	r3, #0
 800446e:	d100      	bne.n	8004472 <HAL_UART_IRQHandler+0x52>
 8004470:	e1fd      	b.n	800486e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	0010      	movs	r0, r2
 800447a:	4798      	blx	r3
      }
      return;
 800447c:	e1f7      	b.n	800486e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d100      	bne.n	8004486 <HAL_UART_IRQHandler+0x66>
 8004484:	e0de      	b.n	8004644 <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	4aaa      	ldr	r2, [pc, #680]	; (8004734 <HAL_UART_IRQHandler+0x314>)
 800448a:	4013      	ands	r3, r2
 800448c:	d104      	bne.n	8004498 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	4aa9      	ldr	r2, [pc, #676]	; (8004738 <HAL_UART_IRQHandler+0x318>)
 8004492:	4013      	ands	r3, r2
 8004494:	d100      	bne.n	8004498 <HAL_UART_IRQHandler+0x78>
 8004496:	e0d5      	b.n	8004644 <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2201      	movs	r2, #1
 800449c:	4013      	ands	r3, r2
 800449e:	d010      	beq.n	80044c2 <HAL_UART_IRQHandler+0xa2>
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2201      	movs	r2, #1
 80044b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	228c      	movs	r2, #140	; 0x8c
 80044b6:	589b      	ldr	r3, [r3, r2]
 80044b8:	2201      	movs	r2, #1
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	218c      	movs	r1, #140	; 0x8c
 80044c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	2202      	movs	r2, #2
 80044c6:	4013      	ands	r3, r2
 80044c8:	d00f      	beq.n	80044ea <HAL_UART_IRQHandler+0xca>
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2201      	movs	r2, #1
 80044ce:	4013      	ands	r3, r2
 80044d0:	d00b      	beq.n	80044ea <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2202      	movs	r2, #2
 80044d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	228c      	movs	r2, #140	; 0x8c
 80044de:	589b      	ldr	r3, [r3, r2]
 80044e0:	2204      	movs	r2, #4
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	218c      	movs	r1, #140	; 0x8c
 80044e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	2204      	movs	r2, #4
 80044ee:	4013      	ands	r3, r2
 80044f0:	d00f      	beq.n	8004512 <HAL_UART_IRQHandler+0xf2>
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2201      	movs	r2, #1
 80044f6:	4013      	ands	r3, r2
 80044f8:	d00b      	beq.n	8004512 <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2204      	movs	r2, #4
 8004500:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	228c      	movs	r2, #140	; 0x8c
 8004506:	589b      	ldr	r3, [r3, r2]
 8004508:	2202      	movs	r2, #2
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	218c      	movs	r1, #140	; 0x8c
 8004510:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	2208      	movs	r2, #8
 8004516:	4013      	ands	r3, r2
 8004518:	d013      	beq.n	8004542 <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	2220      	movs	r2, #32
 800451e:	4013      	ands	r3, r2
 8004520:	d103      	bne.n	800452a <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4a83      	ldr	r2, [pc, #524]	; (8004734 <HAL_UART_IRQHandler+0x314>)
 8004526:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004528:	d00b      	beq.n	8004542 <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2208      	movs	r2, #8
 8004530:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	228c      	movs	r2, #140	; 0x8c
 8004536:	589b      	ldr	r3, [r3, r2]
 8004538:	2208      	movs	r2, #8
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	218c      	movs	r1, #140	; 0x8c
 8004540:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004542:	69fa      	ldr	r2, [r7, #28]
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	011b      	lsls	r3, r3, #4
 8004548:	4013      	ands	r3, r2
 800454a:	d011      	beq.n	8004570 <HAL_UART_IRQHandler+0x150>
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	04db      	lsls	r3, r3, #19
 8004552:	4013      	ands	r3, r2
 8004554:	d00c      	beq.n	8004570 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	228c      	movs	r2, #140	; 0x8c
 8004564:	589b      	ldr	r3, [r3, r2]
 8004566:	2220      	movs	r2, #32
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	218c      	movs	r1, #140	; 0x8c
 800456e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	228c      	movs	r2, #140	; 0x8c
 8004574:	589b      	ldr	r3, [r3, r2]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d100      	bne.n	800457c <HAL_UART_IRQHandler+0x15c>
 800457a:	e17a      	b.n	8004872 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2220      	movs	r2, #32
 8004580:	4013      	ands	r3, r2
 8004582:	d011      	beq.n	80045a8 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2220      	movs	r2, #32
 8004588:	4013      	ands	r3, r2
 800458a:	d104      	bne.n	8004596 <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	055b      	lsls	r3, r3, #21
 8004592:	4013      	ands	r3, r2
 8004594:	d008      	beq.n	80045a8 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459a:	2b00      	cmp	r3, #0
 800459c:	d004      	beq.n	80045a8 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	0010      	movs	r0, r2
 80045a6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	228c      	movs	r2, #140	; 0x8c
 80045ac:	589b      	ldr	r3, [r3, r2]
 80045ae:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2240      	movs	r2, #64	; 0x40
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b40      	cmp	r3, #64	; 0x40
 80045bc:	d003      	beq.n	80045c6 <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2228      	movs	r2, #40	; 0x28
 80045c2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045c4:	d033      	beq.n	800462e <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	0018      	movs	r0, r3
 80045ca:	f000 fe5b 	bl	8005284 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2240      	movs	r2, #64	; 0x40
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d123      	bne.n	8004624 <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2140      	movs	r1, #64	; 0x40
 80045e8:	438a      	bics	r2, r1
 80045ea:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045f8:	4a50      	ldr	r2, [pc, #320]	; (800473c <HAL_UART_IRQHandler+0x31c>)
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004600:	0018      	movs	r0, r3
 8004602:	f7fd f85f 	bl	80016c4 <HAL_DMA_Abort_IT>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d01a      	beq.n	8004640 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800460e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004614:	0018      	movs	r0, r3
 8004616:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004618:	e012      	b.n	8004640 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	0018      	movs	r0, r3
 800461e:	f000 f93f 	bl	80048a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004622:	e00d      	b.n	8004640 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f93a 	bl	80048a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462c:	e008      	b.n	8004640 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 f935 	bl	80048a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	228c      	movs	r2, #140	; 0x8c
 800463a:	2100      	movs	r1, #0
 800463c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800463e:	e118      	b.n	8004872 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004640:	46c0      	nop			; (mov r8, r8)
    return;
 8004642:	e116      	b.n	8004872 <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004648:	2b01      	cmp	r3, #1
 800464a:	d000      	beq.n	800464e <HAL_UART_IRQHandler+0x22e>
 800464c:	e0bb      	b.n	80047c6 <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2210      	movs	r2, #16
 8004652:	4013      	ands	r3, r2
 8004654:	d100      	bne.n	8004658 <HAL_UART_IRQHandler+0x238>
 8004656:	e0b6      	b.n	80047c6 <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2210      	movs	r2, #16
 800465c:	4013      	ands	r3, r2
 800465e:	d100      	bne.n	8004662 <HAL_UART_IRQHandler+0x242>
 8004660:	e0b1      	b.n	80047c6 <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2210      	movs	r2, #16
 8004668:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2240      	movs	r2, #64	; 0x40
 8004672:	4013      	ands	r3, r2
 8004674:	2b40      	cmp	r3, #64	; 0x40
 8004676:	d165      	bne.n	8004744 <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	2108      	movs	r1, #8
 8004682:	187b      	adds	r3, r7, r1
 8004684:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8004686:	187b      	adds	r3, r7, r1
 8004688:	881b      	ldrh	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d100      	bne.n	8004690 <HAL_UART_IRQHandler+0x270>
 800468e:	e0f2      	b.n	8004876 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	225c      	movs	r2, #92	; 0x5c
 8004694:	5a9b      	ldrh	r3, [r3, r2]
 8004696:	187a      	adds	r2, r7, r1
 8004698:	8812      	ldrh	r2, [r2, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d300      	bcc.n	80046a0 <HAL_UART_IRQHandler+0x280>
 800469e:	e0ea      	b.n	8004876 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	187a      	adds	r2, r7, r1
 80046a4:	215e      	movs	r1, #94	; 0x5e
 80046a6:	8812      	ldrh	r2, [r2, #0]
 80046a8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2220      	movs	r2, #32
 80046b4:	4013      	ands	r3, r2
 80046b6:	d12b      	bne.n	8004710 <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	491f      	ldr	r1, [pc, #124]	; (8004740 <HAL_UART_IRQHandler+0x320>)
 80046c4:	400a      	ands	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2101      	movs	r1, #1
 80046d4:	438a      	bics	r2, r1
 80046d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2140      	movs	r1, #64	; 0x40
 80046e4:	438a      	bics	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2288      	movs	r2, #136	; 0x88
 80046ec:	2120      	movs	r1, #32
 80046ee:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2110      	movs	r1, #16
 8004702:	438a      	bics	r2, r1
 8004704:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800470a:	0018      	movs	r0, r3
 800470c:	f7fc ff78 	bl	8001600 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	225c      	movs	r2, #92	; 0x5c
 8004714:	5a9a      	ldrh	r2, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	215e      	movs	r1, #94	; 0x5e
 800471a:	5a5b      	ldrh	r3, [r3, r1]
 800471c:	b29b      	uxth	r3, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f000 f8c2 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800472c:	e0a3      	b.n	8004876 <HAL_UART_IRQHandler+0x456>
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	0000080f 	.word	0x0000080f
 8004734:	10000001 	.word	0x10000001
 8004738:	04000120 	.word	0x04000120
 800473c:	080052e9 	.word	0x080052e9
 8004740:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	225c      	movs	r2, #92	; 0x5c
 8004748:	5a99      	ldrh	r1, [r3, r2]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	225e      	movs	r2, #94	; 0x5e
 800474e:	5a9b      	ldrh	r3, [r3, r2]
 8004750:	b29a      	uxth	r2, r3
 8004752:	200a      	movs	r0, #10
 8004754:	183b      	adds	r3, r7, r0
 8004756:	1a8a      	subs	r2, r1, r2
 8004758:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	225e      	movs	r2, #94	; 0x5e
 800475e:	5a9b      	ldrh	r3, [r3, r2]
 8004760:	b29b      	uxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d100      	bne.n	8004768 <HAL_UART_IRQHandler+0x348>
 8004766:	e088      	b.n	800487a <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 8004768:	183b      	adds	r3, r7, r0
 800476a:	881b      	ldrh	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d100      	bne.n	8004772 <HAL_UART_IRQHandler+0x352>
 8004770:	e083      	b.n	800487a <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4942      	ldr	r1, [pc, #264]	; (8004888 <HAL_UART_IRQHandler+0x468>)
 800477e:	400a      	ands	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	493f      	ldr	r1, [pc, #252]	; (800488c <HAL_UART_IRQHandler+0x46c>)
 800478e:	400a      	ands	r2, r1
 8004790:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2288      	movs	r2, #136	; 0x88
 8004796:	2120      	movs	r1, #32
 8004798:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2110      	movs	r1, #16
 80047b2:	438a      	bics	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047b6:	183b      	adds	r3, r7, r0
 80047b8:	881a      	ldrh	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0011      	movs	r1, r2
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 f876 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80047c4:	e059      	b.n	800487a <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	2380      	movs	r3, #128	; 0x80
 80047ca:	035b      	lsls	r3, r3, #13
 80047cc:	4013      	ands	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_UART_IRQHandler+0x3ce>
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	03db      	lsls	r3, r3, #15
 80047d6:	4013      	ands	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	0352      	lsls	r2, r2, #13
 80047e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	0018      	movs	r0, r3
 80047e8:	f001 f8c0 	bl	800596c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047ec:	e048      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	4013      	ands	r3, r2
 80047f4:	d012      	beq.n	800481c <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	4013      	ands	r3, r2
 80047fc:	d104      	bne.n	8004808 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	2380      	movs	r3, #128	; 0x80
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	4013      	ands	r3, r2
 8004806:	d009      	beq.n	800481c <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480c:	2b00      	cmp	r3, #0
 800480e:	d036      	beq.n	800487e <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	0010      	movs	r0, r2
 8004818:	4798      	blx	r3
    }
    return;
 800481a:	e030      	b.n	800487e <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	4013      	ands	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_UART_IRQHandler+0x416>
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2240      	movs	r2, #64	; 0x40
 8004828:	4013      	ands	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	0018      	movs	r0, r3
 8004830:	f000 fd71 	bl	8005316 <UART_EndTransmit_IT>
    return;
 8004834:	e024      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004836:	69fa      	ldr	r2, [r7, #28]
 8004838:	2380      	movs	r3, #128	; 0x80
 800483a:	041b      	lsls	r3, r3, #16
 800483c:	4013      	ands	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_UART_IRQHandler+0x434>
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	2380      	movs	r3, #128	; 0x80
 8004844:	05db      	lsls	r3, r3, #23
 8004846:	4013      	ands	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	0018      	movs	r0, r3
 800484e:	f001 f89d 	bl	800598c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004852:	e015      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	2380      	movs	r3, #128	; 0x80
 8004858:	045b      	lsls	r3, r3, #17
 800485a:	4013      	ands	r3, r2
 800485c:	d010      	beq.n	8004880 <HAL_UART_IRQHandler+0x460>
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b00      	cmp	r3, #0
 8004862:	da0d      	bge.n	8004880 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f001 f888 	bl	800597c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800486c:	e008      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
      return;
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	e006      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
    return;
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	e004      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
      return;
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	e002      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
      return;
 800487a:	46c0      	nop			; (mov r8, r8)
 800487c:	e000      	b.n	8004880 <HAL_UART_IRQHandler+0x460>
    return;
 800487e:	46c0      	nop			; (mov r8, r8)
  }
}
 8004880:	46bd      	mov	sp, r7
 8004882:	b008      	add	sp, #32
 8004884:	bd80      	pop	{r7, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	fffffedf 	.word	0xfffffedf
 800488c:	effffffe 	.word	0xeffffffe

08004890 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004898:	46c0      	nop			; (mov r8, r8)
 800489a:	46bd      	mov	sp, r7
 800489c:	b002      	add	sp, #8
 800489e:	bd80      	pop	{r7, pc}

080048a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	000a      	movs	r2, r1
 80048ba:	1cbb      	adds	r3, r7, #2
 80048bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	46bd      	mov	sp, r7
 80048c2:	b002      	add	sp, #8
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b090      	sub	sp, #64	; 0x40
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d0:	231a      	movs	r3, #26
 80048d2:	2220      	movs	r2, #32
 80048d4:	4694      	mov	ip, r2
 80048d6:	44bc      	add	ip, r7
 80048d8:	4463      	add	r3, ip
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	431a      	orrs	r2, r3
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048fc:	4313      	orrs	r3, r2
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4ac8      	ldr	r2, [pc, #800]	; (8004c28 <UART_SetConfig+0x360>)
 8004908:	4013      	ands	r3, r2
 800490a:	0019      	movs	r1, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	430b      	orrs	r3, r1
 8004914:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4ac3      	ldr	r2, [pc, #780]	; (8004c2c <UART_SetConfig+0x364>)
 800491e:	4013      	ands	r3, r2
 8004920:	0018      	movs	r0, r3
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	68d9      	ldr	r1, [r3, #12]
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	0003      	movs	r3, r0
 800492c:	430b      	orrs	r3, r1
 800492e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4abd      	ldr	r2, [pc, #756]	; (8004c30 <UART_SetConfig+0x368>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <UART_SetConfig+0x82>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004946:	4313      	orrs	r3, r2
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4ab8      	ldr	r2, [pc, #736]	; (8004c34 <UART_SetConfig+0x36c>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	430b      	orrs	r3, r1
 800495e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	220f      	movs	r2, #15
 8004968:	4393      	bics	r3, r2
 800496a:	0018      	movs	r0, r3
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	0003      	movs	r3, r0
 8004976:	430b      	orrs	r3, r1
 8004978:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4aae      	ldr	r2, [pc, #696]	; (8004c38 <UART_SetConfig+0x370>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d136      	bne.n	80049f2 <UART_SetConfig+0x12a>
 8004984:	4bad      	ldr	r3, [pc, #692]	; (8004c3c <UART_SetConfig+0x374>)
 8004986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004988:	2203      	movs	r2, #3
 800498a:	4013      	ands	r3, r2
 800498c:	2b03      	cmp	r3, #3
 800498e:	d020      	beq.n	80049d2 <UART_SetConfig+0x10a>
 8004990:	d827      	bhi.n	80049e2 <UART_SetConfig+0x11a>
 8004992:	2b02      	cmp	r3, #2
 8004994:	d00d      	beq.n	80049b2 <UART_SetConfig+0xea>
 8004996:	d824      	bhi.n	80049e2 <UART_SetConfig+0x11a>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <UART_SetConfig+0xda>
 800499c:	2b01      	cmp	r3, #1
 800499e:	d010      	beq.n	80049c2 <UART_SetConfig+0xfa>
 80049a0:	e01f      	b.n	80049e2 <UART_SetConfig+0x11a>
 80049a2:	231b      	movs	r3, #27
 80049a4:	2220      	movs	r2, #32
 80049a6:	4694      	mov	ip, r2
 80049a8:	44bc      	add	ip, r7
 80049aa:	4463      	add	r3, ip
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e07c      	b.n	8004aac <UART_SetConfig+0x1e4>
 80049b2:	231b      	movs	r3, #27
 80049b4:	2220      	movs	r2, #32
 80049b6:	4694      	mov	ip, r2
 80049b8:	44bc      	add	ip, r7
 80049ba:	4463      	add	r3, ip
 80049bc:	2202      	movs	r2, #2
 80049be:	701a      	strb	r2, [r3, #0]
 80049c0:	e074      	b.n	8004aac <UART_SetConfig+0x1e4>
 80049c2:	231b      	movs	r3, #27
 80049c4:	2220      	movs	r2, #32
 80049c6:	4694      	mov	ip, r2
 80049c8:	44bc      	add	ip, r7
 80049ca:	4463      	add	r3, ip
 80049cc:	2204      	movs	r2, #4
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e06c      	b.n	8004aac <UART_SetConfig+0x1e4>
 80049d2:	231b      	movs	r3, #27
 80049d4:	2220      	movs	r2, #32
 80049d6:	4694      	mov	ip, r2
 80049d8:	44bc      	add	ip, r7
 80049da:	4463      	add	r3, ip
 80049dc:	2208      	movs	r2, #8
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	e064      	b.n	8004aac <UART_SetConfig+0x1e4>
 80049e2:	231b      	movs	r3, #27
 80049e4:	2220      	movs	r2, #32
 80049e6:	4694      	mov	ip, r2
 80049e8:	44bc      	add	ip, r7
 80049ea:	4463      	add	r3, ip
 80049ec:	2210      	movs	r2, #16
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e05c      	b.n	8004aac <UART_SetConfig+0x1e4>
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a92      	ldr	r2, [pc, #584]	; (8004c40 <UART_SetConfig+0x378>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d107      	bne.n	8004a0c <UART_SetConfig+0x144>
 80049fc:	231b      	movs	r3, #27
 80049fe:	2220      	movs	r2, #32
 8004a00:	4694      	mov	ip, r2
 8004a02:	44bc      	add	ip, r7
 8004a04:	4463      	add	r3, ip
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	e04f      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a87      	ldr	r2, [pc, #540]	; (8004c30 <UART_SetConfig+0x368>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d143      	bne.n	8004a9e <UART_SetConfig+0x1d6>
 8004a16:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <UART_SetConfig+0x374>)
 8004a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a1a:	23c0      	movs	r3, #192	; 0xc0
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	4013      	ands	r3, r2
 8004a20:	22c0      	movs	r2, #192	; 0xc0
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d02a      	beq.n	8004a7e <UART_SetConfig+0x1b6>
 8004a28:	22c0      	movs	r2, #192	; 0xc0
 8004a2a:	0112      	lsls	r2, r2, #4
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d82e      	bhi.n	8004a8e <UART_SetConfig+0x1c6>
 8004a30:	2280      	movs	r2, #128	; 0x80
 8004a32:	0112      	lsls	r2, r2, #4
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d012      	beq.n	8004a5e <UART_SetConfig+0x196>
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	0112      	lsls	r2, r2, #4
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d826      	bhi.n	8004a8e <UART_SetConfig+0x1c6>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <UART_SetConfig+0x186>
 8004a44:	2280      	movs	r2, #128	; 0x80
 8004a46:	00d2      	lsls	r2, r2, #3
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d010      	beq.n	8004a6e <UART_SetConfig+0x1a6>
 8004a4c:	e01f      	b.n	8004a8e <UART_SetConfig+0x1c6>
 8004a4e:	231b      	movs	r3, #27
 8004a50:	2220      	movs	r2, #32
 8004a52:	4694      	mov	ip, r2
 8004a54:	44bc      	add	ip, r7
 8004a56:	4463      	add	r3, ip
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e026      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a5e:	231b      	movs	r3, #27
 8004a60:	2220      	movs	r2, #32
 8004a62:	4694      	mov	ip, r2
 8004a64:	44bc      	add	ip, r7
 8004a66:	4463      	add	r3, ip
 8004a68:	2202      	movs	r2, #2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e01e      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a6e:	231b      	movs	r3, #27
 8004a70:	2220      	movs	r2, #32
 8004a72:	4694      	mov	ip, r2
 8004a74:	44bc      	add	ip, r7
 8004a76:	4463      	add	r3, ip
 8004a78:	2204      	movs	r2, #4
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e016      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a7e:	231b      	movs	r3, #27
 8004a80:	2220      	movs	r2, #32
 8004a82:	4694      	mov	ip, r2
 8004a84:	44bc      	add	ip, r7
 8004a86:	4463      	add	r3, ip
 8004a88:	2208      	movs	r2, #8
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e00e      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a8e:	231b      	movs	r3, #27
 8004a90:	2220      	movs	r2, #32
 8004a92:	4694      	mov	ip, r2
 8004a94:	44bc      	add	ip, r7
 8004a96:	4463      	add	r3, ip
 8004a98:	2210      	movs	r2, #16
 8004a9a:	701a      	strb	r2, [r3, #0]
 8004a9c:	e006      	b.n	8004aac <UART_SetConfig+0x1e4>
 8004a9e:	231b      	movs	r3, #27
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	4694      	mov	ip, r2
 8004aa4:	44bc      	add	ip, r7
 8004aa6:	4463      	add	r3, ip
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a5f      	ldr	r2, [pc, #380]	; (8004c30 <UART_SetConfig+0x368>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d000      	beq.n	8004ab8 <UART_SetConfig+0x1f0>
 8004ab6:	e096      	b.n	8004be6 <UART_SetConfig+0x31e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ab8:	231b      	movs	r3, #27
 8004aba:	2220      	movs	r2, #32
 8004abc:	4694      	mov	ip, r2
 8004abe:	44bc      	add	ip, r7
 8004ac0:	4463      	add	r3, ip
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d015      	beq.n	8004af4 <UART_SetConfig+0x22c>
 8004ac8:	dc18      	bgt.n	8004afc <UART_SetConfig+0x234>
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	d00d      	beq.n	8004aea <UART_SetConfig+0x222>
 8004ace:	dc15      	bgt.n	8004afc <UART_SetConfig+0x234>
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <UART_SetConfig+0x212>
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d005      	beq.n	8004ae4 <UART_SetConfig+0x21c>
 8004ad8:	e010      	b.n	8004afc <UART_SetConfig+0x234>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ada:	f7fd fe3d 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ae2:	e015      	b.n	8004b10 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae4:	4b57      	ldr	r3, [pc, #348]	; (8004c44 <UART_SetConfig+0x37c>)
 8004ae6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ae8:	e012      	b.n	8004b10 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aea:	f7fd fda9 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004aee:	0003      	movs	r3, r0
 8004af0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004af2:	e00d      	b.n	8004b10 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004afa:	e009      	b.n	8004b10 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b00:	231a      	movs	r3, #26
 8004b02:	2220      	movs	r2, #32
 8004b04:	4694      	mov	ip, r2
 8004b06:	44bc      	add	ip, r7
 8004b08:	4463      	add	r3, ip
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
        break;
 8004b0e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d100      	bne.n	8004b18 <UART_SetConfig+0x250>
 8004b16:	e150      	b.n	8004dba <UART_SetConfig+0x4f2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b1c:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <UART_SetConfig+0x380>)
 8004b1e:	0052      	lsls	r2, r2, #1
 8004b20:	5ad3      	ldrh	r3, [r2, r3]
 8004b22:	0019      	movs	r1, r3
 8004b24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b26:	f7fb faed 	bl	8000104 <__udivsi3>
 8004b2a:	0003      	movs	r3, r0
 8004b2c:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	0013      	movs	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d305      	bcc.n	8004b4a <UART_SetConfig+0x282>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d907      	bls.n	8004b5a <UART_SetConfig+0x292>
      {
        ret = HAL_ERROR;
 8004b4a:	231a      	movs	r3, #26
 8004b4c:	2220      	movs	r2, #32
 8004b4e:	4694      	mov	ip, r2
 8004b50:	44bc      	add	ip, r7
 8004b52:	4463      	add	r3, ip
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e12f      	b.n	8004dba <UART_SetConfig+0x4f2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	61bb      	str	r3, [r7, #24]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b66:	4b38      	ldr	r3, [pc, #224]	; (8004c48 <UART_SetConfig+0x380>)
 8004b68:	0052      	lsls	r2, r2, #1
 8004b6a:	5ad3      	ldrh	r3, [r2, r3]
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	69f9      	ldr	r1, [r7, #28]
 8004b7a:	f7fb fc39 	bl	80003f0 <__aeabi_uldivmod>
 8004b7e:	0002      	movs	r2, r0
 8004b80:	000b      	movs	r3, r1
 8004b82:	0e11      	lsrs	r1, r2, #24
 8004b84:	021d      	lsls	r5, r3, #8
 8004b86:	430d      	orrs	r5, r1
 8004b88:	0214      	lsls	r4, r2, #8
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	68b8      	ldr	r0, [r7, #8]
 8004b98:	68f9      	ldr	r1, [r7, #12]
 8004b9a:	1900      	adds	r0, r0, r4
 8004b9c:	4169      	adcs	r1, r5
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	603b      	str	r3, [r7, #0]
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	607b      	str	r3, [r7, #4]
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f7fb fc20 	bl	80003f0 <__aeabi_uldivmod>
 8004bb0:	0002      	movs	r2, r0
 8004bb2:	000b      	movs	r3, r1
 8004bb4:	0013      	movs	r3, r2
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bba:	23c0      	movs	r3, #192	; 0xc0
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d309      	bcc.n	8004bd6 <UART_SetConfig+0x30e>
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc4:	2380      	movs	r3, #128	; 0x80
 8004bc6:	035b      	lsls	r3, r3, #13
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d204      	bcs.n	8004bd6 <UART_SetConfig+0x30e>
        {
          huart->Instance->BRR = usartdiv;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bd2:	60da      	str	r2, [r3, #12]
 8004bd4:	e0f1      	b.n	8004dba <UART_SetConfig+0x4f2>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd6:	231a      	movs	r3, #26
 8004bd8:	2220      	movs	r2, #32
 8004bda:	4694      	mov	ip, r2
 8004bdc:	44bc      	add	ip, r7
 8004bde:	4463      	add	r3, ip
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e0e9      	b.n	8004dba <UART_SetConfig+0x4f2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d000      	beq.n	8004bf4 <UART_SetConfig+0x32c>
 8004bf2:	e087      	b.n	8004d04 <UART_SetConfig+0x43c>
  {
    switch (clocksource)
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	4694      	mov	ip, r2
 8004bfa:	44bc      	add	ip, r7
 8004bfc:	4463      	add	r3, ip
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d028      	beq.n	8004c56 <UART_SetConfig+0x38e>
 8004c04:	dc2b      	bgt.n	8004c5e <UART_SetConfig+0x396>
 8004c06:	2b04      	cmp	r3, #4
 8004c08:	d020      	beq.n	8004c4c <UART_SetConfig+0x384>
 8004c0a:	dc28      	bgt.n	8004c5e <UART_SetConfig+0x396>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <UART_SetConfig+0x34e>
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d005      	beq.n	8004c20 <UART_SetConfig+0x358>
 8004c14:	e023      	b.n	8004c5e <UART_SetConfig+0x396>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c16:	f7fd fd9f 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c1e:	e028      	b.n	8004c72 <UART_SetConfig+0x3aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <UART_SetConfig+0x37c>)
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c24:	e025      	b.n	8004c72 <UART_SetConfig+0x3aa>
 8004c26:	46c0      	nop			; (mov r8, r8)
 8004c28:	cfff69f3 	.word	0xcfff69f3
 8004c2c:	ffffcfff 	.word	0xffffcfff
 8004c30:	40008000 	.word	0x40008000
 8004c34:	11fff4ff 	.word	0x11fff4ff
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	40004400 	.word	0x40004400
 8004c44:	00f42400 	.word	0x00f42400
 8004c48:	08006f18 	.word	0x08006f18
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4c:	f7fd fcf8 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004c50:	0003      	movs	r3, r0
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c54:	e00d      	b.n	8004c72 <UART_SetConfig+0x3aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c5c:	e009      	b.n	8004c72 <UART_SetConfig+0x3aa>
      default:
        pclk = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c62:	231a      	movs	r3, #26
 8004c64:	2220      	movs	r2, #32
 8004c66:	4694      	mov	ip, r2
 8004c68:	44bc      	add	ip, r7
 8004c6a:	4463      	add	r3, ip
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]
        break;
 8004c70:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d100      	bne.n	8004c7a <UART_SetConfig+0x3b2>
 8004c78:	e09f      	b.n	8004dba <UART_SetConfig+0x4f2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	; (8004dec <UART_SetConfig+0x524>)
 8004c80:	0052      	lsls	r2, r2, #1
 8004c82:	5ad3      	ldrh	r3, [r2, r3]
 8004c84:	0019      	movs	r1, r3
 8004c86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c88:	f7fb fa3c 	bl	8000104 <__udivsi3>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	005a      	lsls	r2, r3, #1
 8004c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	085b      	lsrs	r3, r3, #1
 8004c96:	18d2      	adds	r2, r2, r3
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	0010      	movs	r0, r2
 8004ca0:	f7fb fa30 	bl	8000104 <__udivsi3>
 8004ca4:	0003      	movs	r3, r0
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	2b0f      	cmp	r3, #15
 8004cae:	d921      	bls.n	8004cf4 <UART_SetConfig+0x42c>
 8004cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb2:	2380      	movs	r3, #128	; 0x80
 8004cb4:	025b      	lsls	r3, r3, #9
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d21c      	bcs.n	8004cf4 <UART_SetConfig+0x42c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	200e      	movs	r0, #14
 8004cc0:	2420      	movs	r4, #32
 8004cc2:	193b      	adds	r3, r7, r4
 8004cc4:	181b      	adds	r3, r3, r0
 8004cc6:	210f      	movs	r1, #15
 8004cc8:	438a      	bics	r2, r1
 8004cca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2207      	movs	r2, #7
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	b299      	uxth	r1, r3
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	181b      	adds	r3, r3, r0
 8004cdc:	193a      	adds	r2, r7, r4
 8004cde:	1812      	adds	r2, r2, r0
 8004ce0:	8812      	ldrh	r2, [r2, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	193a      	adds	r2, r7, r4
 8004cec:	1812      	adds	r2, r2, r0
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	e062      	b.n	8004dba <UART_SetConfig+0x4f2>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf4:	231a      	movs	r3, #26
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	4694      	mov	ip, r2
 8004cfa:	44bc      	add	ip, r7
 8004cfc:	4463      	add	r3, ip
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
 8004d02:	e05a      	b.n	8004dba <UART_SetConfig+0x4f2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d04:	231b      	movs	r3, #27
 8004d06:	2220      	movs	r2, #32
 8004d08:	4694      	mov	ip, r2
 8004d0a:	44bc      	add	ip, r7
 8004d0c:	4463      	add	r3, ip
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d015      	beq.n	8004d40 <UART_SetConfig+0x478>
 8004d14:	dc18      	bgt.n	8004d48 <UART_SetConfig+0x480>
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d00d      	beq.n	8004d36 <UART_SetConfig+0x46e>
 8004d1a:	dc15      	bgt.n	8004d48 <UART_SetConfig+0x480>
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <UART_SetConfig+0x45e>
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d005      	beq.n	8004d30 <UART_SetConfig+0x468>
 8004d24:	e010      	b.n	8004d48 <UART_SetConfig+0x480>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d26:	f7fd fd17 	bl	8002758 <HAL_RCC_GetPCLK1Freq>
 8004d2a:	0003      	movs	r3, r0
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d2e:	e015      	b.n	8004d5c <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b2f      	ldr	r3, [pc, #188]	; (8004df0 <UART_SetConfig+0x528>)
 8004d32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d34:	e012      	b.n	8004d5c <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fd fc83 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 8004d3a:	0003      	movs	r3, r0
 8004d3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d3e:	e00d      	b.n	8004d5c <UART_SetConfig+0x494>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d40:	2380      	movs	r3, #128	; 0x80
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d46:	e009      	b.n	8004d5c <UART_SetConfig+0x494>
      default:
        pclk = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004d4c:	231a      	movs	r3, #26
 8004d4e:	2220      	movs	r2, #32
 8004d50:	4694      	mov	ip, r2
 8004d52:	44bc      	add	ip, r7
 8004d54:	4463      	add	r3, ip
 8004d56:	2201      	movs	r2, #1
 8004d58:	701a      	strb	r2, [r3, #0]
        break;
 8004d5a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d02b      	beq.n	8004dba <UART_SetConfig+0x4f2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d66:	4b21      	ldr	r3, [pc, #132]	; (8004dec <UART_SetConfig+0x524>)
 8004d68:	0052      	lsls	r2, r2, #1
 8004d6a:	5ad3      	ldrh	r3, [r2, r3]
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d70:	f7fb f9c8 	bl	8000104 <__udivsi3>
 8004d74:	0003      	movs	r3, r0
 8004d76:	001a      	movs	r2, r3
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	085b      	lsrs	r3, r3, #1
 8004d7e:	18d2      	adds	r2, r2, r3
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0019      	movs	r1, r3
 8004d86:	0010      	movs	r0, r2
 8004d88:	f7fb f9bc 	bl	8000104 <__udivsi3>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	d909      	bls.n	8004dac <UART_SetConfig+0x4e4>
 8004d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	025b      	lsls	r3, r3, #9
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d204      	bcs.n	8004dac <UART_SetConfig+0x4e4>
      {
        huart->Instance->BRR = usartdiv;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da8:	60da      	str	r2, [r3, #12]
 8004daa:	e006      	b.n	8004dba <UART_SetConfig+0x4f2>
      }
      else
      {
        ret = HAL_ERROR;
 8004dac:	231a      	movs	r3, #26
 8004dae:	2220      	movs	r2, #32
 8004db0:	4694      	mov	ip, r2
 8004db2:	44bc      	add	ip, r7
 8004db4:	4463      	add	r3, ip
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	226a      	movs	r2, #106	; 0x6a
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	2268      	movs	r2, #104	; 0x68
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	2200      	movs	r2, #0
 8004dce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004dd6:	231a      	movs	r3, #26
 8004dd8:	2220      	movs	r2, #32
 8004dda:	4694      	mov	ip, r2
 8004ddc:	44bc      	add	ip, r7
 8004dde:	4463      	add	r3, ip
 8004de0:	781b      	ldrb	r3, [r3, #0]
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b010      	add	sp, #64	; 0x40
 8004de8:	bdb0      	pop	{r4, r5, r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	08006f18 	.word	0x08006f18
 8004df0:	00f42400 	.word	0x00f42400

08004df4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e00:	2201      	movs	r2, #1
 8004e02:	4013      	ands	r3, r2
 8004e04:	d00b      	beq.n	8004e1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4a4a      	ldr	r2, [pc, #296]	; (8004f38 <UART_AdvFeatureConfig+0x144>)
 8004e0e:	4013      	ands	r3, r2
 8004e10:	0019      	movs	r1, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	2202      	movs	r2, #2
 8004e24:	4013      	ands	r3, r2
 8004e26:	d00b      	beq.n	8004e40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4a43      	ldr	r2, [pc, #268]	; (8004f3c <UART_AdvFeatureConfig+0x148>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	0019      	movs	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	2204      	movs	r2, #4
 8004e46:	4013      	ands	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4a3b      	ldr	r2, [pc, #236]	; (8004f40 <UART_AdvFeatureConfig+0x14c>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e66:	2208      	movs	r2, #8
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4a34      	ldr	r2, [pc, #208]	; (8004f44 <UART_AdvFeatureConfig+0x150>)
 8004e74:	4013      	ands	r3, r2
 8004e76:	0019      	movs	r1, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	2210      	movs	r2, #16
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d00b      	beq.n	8004ea6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a2c      	ldr	r2, [pc, #176]	; (8004f48 <UART_AdvFeatureConfig+0x154>)
 8004e96:	4013      	ands	r3, r2
 8004e98:	0019      	movs	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	2220      	movs	r2, #32
 8004eac:	4013      	ands	r3, r2
 8004eae:	d00b      	beq.n	8004ec8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	4a25      	ldr	r2, [pc, #148]	; (8004f4c <UART_AdvFeatureConfig+0x158>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	0019      	movs	r1, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ecc:	2240      	movs	r2, #64	; 0x40
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d01d      	beq.n	8004f0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <UART_AdvFeatureConfig+0x15c>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	0019      	movs	r1, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	035b      	lsls	r3, r3, #13
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d10b      	bne.n	8004f0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	; (8004f54 <UART_AdvFeatureConfig+0x160>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	4013      	ands	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	4a0e      	ldr	r2, [pc, #56]	; (8004f58 <UART_AdvFeatureConfig+0x164>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
  }
}
 8004f30:	46c0      	nop			; (mov r8, r8)
 8004f32:	46bd      	mov	sp, r7
 8004f34:	b002      	add	sp, #8
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	fffdffff 	.word	0xfffdffff
 8004f3c:	fffeffff 	.word	0xfffeffff
 8004f40:	fffbffff 	.word	0xfffbffff
 8004f44:	ffff7fff 	.word	0xffff7fff
 8004f48:	ffffefff 	.word	0xffffefff
 8004f4c:	ffffdfff 	.word	0xffffdfff
 8004f50:	ffefffff 	.word	0xffefffff
 8004f54:	ff9fffff 	.word	0xff9fffff
 8004f58:	fff7ffff 	.word	0xfff7ffff

08004f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	228c      	movs	r2, #140	; 0x8c
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f6c:	f7fc f92c 	bl	80011c8 <HAL_GetTick>
 8004f70:	0003      	movs	r3, r0
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2208      	movs	r2, #8
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d10c      	bne.n	8004f9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	0391      	lsls	r1, r2, #14
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4a18      	ldr	r2, [pc, #96]	; (8004fec <UART_CheckIdleState+0x90>)
 8004f8c:	9200      	str	r2, [sp, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f000 f82e 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004f94:	1e03      	subs	r3, r0, #0
 8004f96:	d001      	beq.n	8004f9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e023      	b.n	8004fe4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d10c      	bne.n	8004fc4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2280      	movs	r2, #128	; 0x80
 8004fae:	03d1      	lsls	r1, r2, #15
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <UART_CheckIdleState+0x90>)
 8004fb4:	9200      	str	r2, [sp, #0]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f000 f81a 	bl	8004ff0 <UART_WaitOnFlagUntilTimeout>
 8004fbc:	1e03      	subs	r3, r0, #0
 8004fbe:	d001      	beq.n	8004fc4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e00f      	b.n	8004fe4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2284      	movs	r2, #132	; 0x84
 8004fc8:	2120      	movs	r1, #32
 8004fca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2288      	movs	r2, #136	; 0x88
 8004fd0:	2120      	movs	r1, #32
 8004fd2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2280      	movs	r2, #128	; 0x80
 8004fde:	2100      	movs	r1, #0
 8004fe0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	0018      	movs	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	b004      	add	sp, #16
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	01ffffff 	.word	0x01ffffff

08004ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b084      	sub	sp, #16
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	603b      	str	r3, [r7, #0]
 8004ffc:	1dfb      	adds	r3, r7, #7
 8004ffe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	e062      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	3301      	adds	r3, #1
 8005006:	d05f      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005008:	f7fc f8de 	bl	80011c8 <HAL_GetTick>
 800500c:	0002      	movs	r2, r0
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	429a      	cmp	r2, r3
 8005016:	d302      	bcc.n	800501e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d11d      	bne.n	800505a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4931      	ldr	r1, [pc, #196]	; (80050f0 <UART_WaitOnFlagUntilTimeout+0x100>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	438a      	bics	r2, r1
 800503c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2284      	movs	r2, #132	; 0x84
 8005042:	2120      	movs	r1, #32
 8005044:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2288      	movs	r2, #136	; 0x88
 800504a:	2120      	movs	r1, #32
 800504c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	2100      	movs	r1, #0
 8005054:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e046      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2204      	movs	r2, #4
 8005062:	4013      	ands	r3, r2
 8005064:	d030      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	2380      	movs	r3, #128	; 0x80
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	401a      	ands	r2, r3
 8005072:	2380      	movs	r3, #128	; 0x80
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	429a      	cmp	r2, r3
 8005078:	d126      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4918      	ldr	r1, [pc, #96]	; (80050f0 <UART_WaitOnFlagUntilTimeout+0x100>)
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2101      	movs	r1, #1
 80050a0:	438a      	bics	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2284      	movs	r2, #132	; 0x84
 80050a8:	2120      	movs	r1, #32
 80050aa:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2288      	movs	r2, #136	; 0x88
 80050b0:	2120      	movs	r1, #32
 80050b2:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	228c      	movs	r2, #140	; 0x8c
 80050b8:	2120      	movs	r1, #32
 80050ba:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	2100      	movs	r1, #0
 80050c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e00f      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	425a      	negs	r2, r3
 80050d8:	4153      	adcs	r3, r2
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	001a      	movs	r2, r3
 80050de:	1dfb      	adds	r3, r7, #7
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d08d      	beq.n	8005002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	fffffe5f 	.word	0xfffffe5f

080050f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	1dbb      	adds	r3, r7, #6
 8005100:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	1dba      	adds	r2, r7, #6
 800510c:	215c      	movs	r1, #92	; 0x5c
 800510e:	8812      	ldrh	r2, [r2, #0]
 8005110:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1dba      	adds	r2, r7, #6
 8005116:	215e      	movs	r1, #94	; 0x5e
 8005118:	8812      	ldrh	r2, [r2, #0]
 800511a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	2380      	movs	r3, #128	; 0x80
 8005128:	015b      	lsls	r3, r3, #5
 800512a:	429a      	cmp	r2, r3
 800512c:	d10d      	bne.n	800514a <UART_Start_Receive_IT+0x56>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d104      	bne.n	8005140 <UART_Start_Receive_IT+0x4c>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2260      	movs	r2, #96	; 0x60
 800513a:	494d      	ldr	r1, [pc, #308]	; (8005270 <UART_Start_Receive_IT+0x17c>)
 800513c:	5299      	strh	r1, [r3, r2]
 800513e:	e02e      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2260      	movs	r2, #96	; 0x60
 8005144:	21ff      	movs	r1, #255	; 0xff
 8005146:	5299      	strh	r1, [r3, r2]
 8005148:	e029      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10d      	bne.n	800516e <UART_Start_Receive_IT+0x7a>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	691b      	ldr	r3, [r3, #16]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <UART_Start_Receive_IT+0x70>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2260      	movs	r2, #96	; 0x60
 800515e:	21ff      	movs	r1, #255	; 0xff
 8005160:	5299      	strh	r1, [r3, r2]
 8005162:	e01c      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2260      	movs	r2, #96	; 0x60
 8005168:	217f      	movs	r1, #127	; 0x7f
 800516a:	5299      	strh	r1, [r3, r2]
 800516c:	e017      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	2380      	movs	r3, #128	; 0x80
 8005174:	055b      	lsls	r3, r3, #21
 8005176:	429a      	cmp	r2, r3
 8005178:	d10d      	bne.n	8005196 <UART_Start_Receive_IT+0xa2>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <UART_Start_Receive_IT+0x98>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2260      	movs	r2, #96	; 0x60
 8005186:	217f      	movs	r1, #127	; 0x7f
 8005188:	5299      	strh	r1, [r3, r2]
 800518a:	e008      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2260      	movs	r2, #96	; 0x60
 8005190:	213f      	movs	r1, #63	; 0x3f
 8005192:	5299      	strh	r1, [r3, r2]
 8005194:	e003      	b.n	800519e <UART_Start_Receive_IT+0xaa>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2260      	movs	r2, #96	; 0x60
 800519a:	2100      	movs	r1, #0
 800519c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	228c      	movs	r2, #140	; 0x8c
 80051a2:	2100      	movs	r1, #0
 80051a4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2288      	movs	r2, #136	; 0x88
 80051aa:	2122      	movs	r1, #34	; 0x22
 80051ac:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2101      	movs	r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	059b      	lsls	r3, r3, #22
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d12e      	bne.n	8005228 <UART_Start_Receive_IT+0x134>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2268      	movs	r2, #104	; 0x68
 80051ce:	5a9b      	ldrh	r3, [r3, r2]
 80051d0:	1dba      	adds	r2, r7, #6
 80051d2:	8812      	ldrh	r2, [r2, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d327      	bcc.n	8005228 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	689a      	ldr	r2, [r3, #8]
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	015b      	lsls	r3, r3, #5
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d107      	bne.n	80051f4 <UART_Start_Receive_IT+0x100>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <UART_Start_Receive_IT+0x180>)
 80051f0:	671a      	str	r2, [r3, #112]	; 0x70
 80051f2:	e002      	b.n	80051fa <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4a20      	ldr	r2, [pc, #128]	; (8005278 <UART_Start_Receive_IT+0x184>)
 80051f8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2280      	movs	r2, #128	; 0x80
 80051fe:	2100      	movs	r1, #0
 8005200:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2180      	movs	r1, #128	; 0x80
 800520e:	0049      	lsls	r1, r1, #1
 8005210:	430a      	orrs	r2, r1
 8005212:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	0549      	lsls	r1, r1, #21
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	e01d      	b.n	8005264 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	2380      	movs	r3, #128	; 0x80
 800522e:	015b      	lsls	r3, r3, #5
 8005230:	429a      	cmp	r2, r3
 8005232:	d107      	bne.n	8005244 <UART_Start_Receive_IT+0x150>
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a0f      	ldr	r2, [pc, #60]	; (800527c <UART_Start_Receive_IT+0x188>)
 8005240:	671a      	str	r2, [r3, #112]	; 0x70
 8005242:	e002      	b.n	800524a <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	4a0e      	ldr	r2, [pc, #56]	; (8005280 <UART_Start_Receive_IT+0x18c>)
 8005248:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	2100      	movs	r1, #0
 8005250:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2190      	movs	r1, #144	; 0x90
 800525e:	0049      	lsls	r1, r1, #1
 8005260:	430a      	orrs	r2, r1
 8005262:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	0018      	movs	r0, r3
 8005268:	46bd      	mov	sp, r7
 800526a:	b004      	add	sp, #16
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	000001ff 	.word	0x000001ff
 8005274:	08005749 	.word	0x08005749
 8005278:	08005525 	.word	0x08005525
 800527c:	08005439 	.word	0x08005439
 8005280:	0800534d 	.word	0x0800534d

08005284 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4912      	ldr	r1, [pc, #72]	; (80052e0 <UART_EndRxTransfer+0x5c>)
 8005298:	400a      	ands	r2, r1
 800529a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	490f      	ldr	r1, [pc, #60]	; (80052e4 <UART_EndRxTransfer+0x60>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2110      	movs	r1, #16
 80052c0:	438a      	bics	r2, r1
 80052c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2288      	movs	r2, #136	; 0x88
 80052c8:	2120      	movs	r1, #32
 80052ca:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80052d8:	46c0      	nop			; (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	fffffedf 	.word	0xfffffedf
 80052e4:	effffffe 	.word	0xeffffffe

080052e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	225e      	movs	r2, #94	; 0x5e
 80052fa:	2100      	movs	r1, #0
 80052fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2256      	movs	r2, #86	; 0x56
 8005302:	2100      	movs	r1, #0
 8005304:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	0018      	movs	r0, r3
 800530a:	f7ff fac9 	bl	80048a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	46bd      	mov	sp, r7
 8005312:	b004      	add	sp, #16
 8005314:	bd80      	pop	{r7, pc}

08005316 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2140      	movs	r1, #64	; 0x40
 800532a:	438a      	bics	r2, r1
 800532c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2284      	movs	r2, #132	; 0x84
 8005332:	2120      	movs	r1, #32
 8005334:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	0018      	movs	r0, r3
 8005340:	f7ff faa6 	bl	8004890 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	46bd      	mov	sp, r7
 8005348:	b002      	add	sp, #8
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005354:	200e      	movs	r0, #14
 8005356:	183b      	adds	r3, r7, r0
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	2160      	movs	r1, #96	; 0x60
 800535c:	5a52      	ldrh	r2, [r2, r1]
 800535e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2288      	movs	r2, #136	; 0x88
 8005364:	589b      	ldr	r3, [r3, r2]
 8005366:	2b22      	cmp	r3, #34	; 0x22
 8005368:	d158      	bne.n	800541c <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005370:	210c      	movs	r1, #12
 8005372:	187b      	adds	r3, r7, r1
 8005374:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005376:	187b      	adds	r3, r7, r1
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	183b      	adds	r3, r7, r0
 800537e:	881b      	ldrh	r3, [r3, #0]
 8005380:	b2d9      	uxtb	r1, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005386:	400a      	ands	r2, r1
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	225e      	movs	r2, #94	; 0x5e
 800539a:	5a9b      	ldrh	r3, [r3, r2]
 800539c:	b29b      	uxth	r3, r3
 800539e:	3b01      	subs	r3, #1
 80053a0:	b299      	uxth	r1, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	225e      	movs	r2, #94	; 0x5e
 80053a6:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	225e      	movs	r2, #94	; 0x5e
 80053ac:	5a9b      	ldrh	r3, [r3, r2]
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d13b      	bne.n	800542c <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	491d      	ldr	r1, [pc, #116]	; (8005434 <UART_RxISR_8BIT+0xe8>)
 80053c0:	400a      	ands	r2, r1
 80053c2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2101      	movs	r1, #1
 80053d0:	438a      	bics	r2, r1
 80053d2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2288      	movs	r2, #136	; 0x88
 80053d8:	2120      	movs	r1, #32
 80053da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d110      	bne.n	800540c <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2110      	movs	r1, #16
 80053f6:	438a      	bics	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	225c      	movs	r2, #92	; 0x5c
 80053fe:	5a9a      	ldrh	r2, [r3, r2]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f7ff fa53 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
 800540a:	e003      	b.n	8005414 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	0018      	movs	r0, r3
 8005410:	f000 fdd4 	bl	8005fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800541a:	e007      	b.n	800542c <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	699a      	ldr	r2, [r3, #24]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2108      	movs	r1, #8
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
}
 800542c:	46c0      	nop			; (mov r8, r8)
 800542e:	46bd      	mov	sp, r7
 8005430:	b004      	add	sp, #16
 8005432:	bd80      	pop	{r7, pc}
 8005434:	fffffedf 	.word	0xfffffedf

08005438 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005440:	200e      	movs	r0, #14
 8005442:	183b      	adds	r3, r7, r0
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	2160      	movs	r1, #96	; 0x60
 8005448:	5a52      	ldrh	r2, [r2, r1]
 800544a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2288      	movs	r2, #136	; 0x88
 8005450:	589b      	ldr	r3, [r3, r2]
 8005452:	2b22      	cmp	r3, #34	; 0x22
 8005454:	d158      	bne.n	8005508 <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800545c:	210c      	movs	r1, #12
 800545e:	187b      	adds	r3, r7, r1
 8005460:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8005468:	187b      	adds	r3, r7, r1
 800546a:	183a      	adds	r2, r7, r0
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	8812      	ldrh	r2, [r2, #0]
 8005470:	4013      	ands	r3, r2
 8005472:	b29a      	uxth	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800547c:	1c9a      	adds	r2, r3, #2
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	225e      	movs	r2, #94	; 0x5e
 8005486:	5a9b      	ldrh	r3, [r3, r2]
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b299      	uxth	r1, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	225e      	movs	r2, #94	; 0x5e
 8005492:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	225e      	movs	r2, #94	; 0x5e
 8005498:	5a9b      	ldrh	r3, [r3, r2]
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d13b      	bne.n	8005518 <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	491d      	ldr	r1, [pc, #116]	; (8005520 <UART_RxISR_16BIT+0xe8>)
 80054ac:	400a      	ands	r2, r1
 80054ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	689a      	ldr	r2, [r3, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2101      	movs	r1, #1
 80054bc:	438a      	bics	r2, r1
 80054be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2288      	movs	r2, #136	; 0x88
 80054c4:	2120      	movs	r1, #32
 80054c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d110      	bne.n	80054f8 <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2110      	movs	r1, #16
 80054e2:	438a      	bics	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	225c      	movs	r2, #92	; 0x5c
 80054ea:	5a9a      	ldrh	r2, [r3, r2]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f7ff f9dd 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
 80054f6:	e003      	b.n	8005500 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	0018      	movs	r0, r3
 80054fc:	f000 fd5e 	bl	8005fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005506:	e007      	b.n	8005518 <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2108      	movs	r1, #8
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
}
 8005518:	46c0      	nop			; (mov r8, r8)
 800551a:	46bd      	mov	sp, r7
 800551c:	b004      	add	sp, #16
 800551e:	bd80      	pop	{r7, pc}
 8005520:	fffffedf 	.word	0xfffffedf

08005524 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800552c:	231a      	movs	r3, #26
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	2160      	movs	r1, #96	; 0x60
 8005534:	5a52      	ldrh	r2, [r2, r1]
 8005536:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2288      	movs	r2, #136	; 0x88
 8005554:	589b      	ldr	r3, [r3, r2]
 8005556:	2b22      	cmp	r3, #34	; 0x22
 8005558:	d000      	beq.n	800555c <UART_RxISR_8BIT_FIFOEN+0x38>
 800555a:	e0e1      	b.n	8005720 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800555c:	230e      	movs	r3, #14
 800555e:	18fb      	adds	r3, r7, r3
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	2168      	movs	r1, #104	; 0x68
 8005564:	5a52      	ldrh	r2, [r2, r1]
 8005566:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005568:	e0aa      	b.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005570:	210c      	movs	r1, #12
 8005572:	187b      	adds	r3, r7, r1
 8005574:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005576:	187b      	adds	r3, r7, r1
 8005578:	881b      	ldrh	r3, [r3, #0]
 800557a:	b2da      	uxtb	r2, r3
 800557c:	231a      	movs	r3, #26
 800557e:	18fb      	adds	r3, r7, r3
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b2d9      	uxtb	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	400a      	ands	r2, r1
 800558a:	b2d2      	uxtb	r2, r2
 800558c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	225e      	movs	r2, #94	; 0x5e
 800559c:	5a9b      	ldrh	r3, [r3, r2]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b299      	uxth	r1, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	225e      	movs	r2, #94	; 0x5e
 80055a8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	2207      	movs	r2, #7
 80055b6:	4013      	ands	r3, r2
 80055b8:	d049      	beq.n	800564e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	2201      	movs	r2, #1
 80055be:	4013      	ands	r3, r2
 80055c0:	d010      	beq.n	80055e4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	2380      	movs	r3, #128	; 0x80
 80055c6:	005b      	lsls	r3, r3, #1
 80055c8:	4013      	ands	r3, r2
 80055ca:	d00b      	beq.n	80055e4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2201      	movs	r2, #1
 80055d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	228c      	movs	r2, #140	; 0x8c
 80055d8:	589b      	ldr	r3, [r3, r2]
 80055da:	2201      	movs	r2, #1
 80055dc:	431a      	orrs	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	218c      	movs	r1, #140	; 0x8c
 80055e2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2202      	movs	r2, #2
 80055e8:	4013      	ands	r3, r2
 80055ea:	d00f      	beq.n	800560c <UART_RxISR_8BIT_FIFOEN+0xe8>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2201      	movs	r2, #1
 80055f0:	4013      	ands	r3, r2
 80055f2:	d00b      	beq.n	800560c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2202      	movs	r2, #2
 80055fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	228c      	movs	r2, #140	; 0x8c
 8005600:	589b      	ldr	r3, [r3, r2]
 8005602:	2204      	movs	r2, #4
 8005604:	431a      	orrs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	218c      	movs	r1, #140	; 0x8c
 800560a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	2204      	movs	r2, #4
 8005610:	4013      	ands	r3, r2
 8005612:	d00f      	beq.n	8005634 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2201      	movs	r2, #1
 8005618:	4013      	ands	r3, r2
 800561a:	d00b      	beq.n	8005634 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2204      	movs	r2, #4
 8005622:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	228c      	movs	r2, #140	; 0x8c
 8005628:	589b      	ldr	r3, [r3, r2]
 800562a:	2202      	movs	r2, #2
 800562c:	431a      	orrs	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	218c      	movs	r1, #140	; 0x8c
 8005632:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	228c      	movs	r2, #140	; 0x8c
 8005638:	589b      	ldr	r3, [r3, r2]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d007      	beq.n	800564e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	0018      	movs	r0, r3
 8005642:	f7ff f92d 	bl	80048a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	228c      	movs	r2, #140	; 0x8c
 800564a:	2100      	movs	r1, #0
 800564c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	225e      	movs	r2, #94	; 0x5e
 8005652:	5a9b      	ldrh	r3, [r3, r2]
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d132      	bne.n	80056c0 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4934      	ldr	r1, [pc, #208]	; (8005738 <UART_RxISR_8BIT_FIFOEN+0x214>)
 8005666:	400a      	ands	r2, r1
 8005668:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4931      	ldr	r1, [pc, #196]	; (800573c <UART_RxISR_8BIT_FIFOEN+0x218>)
 8005676:	400a      	ands	r2, r1
 8005678:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2288      	movs	r2, #136	; 0x88
 800567e:	2120      	movs	r1, #32
 8005680:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800568c:	2b01      	cmp	r3, #1
 800568e:	d110      	bne.n	80056b2 <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2110      	movs	r1, #16
 800569c:	438a      	bics	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	225c      	movs	r2, #92	; 0x5c
 80056a4:	5a9a      	ldrh	r2, [r3, r2]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0011      	movs	r1, r2
 80056aa:	0018      	movs	r0, r3
 80056ac:	f7ff f900 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
 80056b0:	e003      	b.n	80056ba <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f000 fc81 	bl	8005fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80056c0:	230e      	movs	r3, #14
 80056c2:	18fb      	adds	r3, r7, r3
 80056c4:	881b      	ldrh	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d004      	beq.n	80056d4 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	2220      	movs	r2, #32
 80056ce:	4013      	ands	r3, r2
 80056d0:	d000      	beq.n	80056d4 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 80056d2:	e74a      	b.n	800556a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80056d4:	200a      	movs	r0, #10
 80056d6:	183b      	adds	r3, r7, r0
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	215e      	movs	r1, #94	; 0x5e
 80056dc:	5a52      	ldrh	r2, [r2, r1]
 80056de:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80056e0:	0001      	movs	r1, r0
 80056e2:	187b      	adds	r3, r7, r1
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d022      	beq.n	8005730 <UART_RxISR_8BIT_FIFOEN+0x20c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2268      	movs	r2, #104	; 0x68
 80056ee:	5a9b      	ldrh	r3, [r3, r2]
 80056f0:	187a      	adds	r2, r7, r1
 80056f2:	8812      	ldrh	r2, [r2, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d21b      	bcs.n	8005730 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	490f      	ldr	r1, [pc, #60]	; (8005740 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 8005704:	400a      	ands	r2, r1
 8005706:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <UART_RxISR_8BIT_FIFOEN+0x220>)
 800570c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2120      	movs	r1, #32
 800571a:	430a      	orrs	r2, r1
 800571c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800571e:	e007      	b.n	8005730 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2108      	movs	r1, #8
 800572c:	430a      	orrs	r2, r1
 800572e:	619a      	str	r2, [r3, #24]
}
 8005730:	46c0      	nop			; (mov r8, r8)
 8005732:	46bd      	mov	sp, r7
 8005734:	b008      	add	sp, #32
 8005736:	bd80      	pop	{r7, pc}
 8005738:	fffffeff 	.word	0xfffffeff
 800573c:	effffffe 	.word	0xeffffffe
 8005740:	efffffff 	.word	0xefffffff
 8005744:	0800534d 	.word	0x0800534d

08005748 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005750:	2322      	movs	r3, #34	; 0x22
 8005752:	18fb      	adds	r3, r7, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	2160      	movs	r1, #96	; 0x60
 8005758:	5a52      	ldrh	r2, [r2, r1]
 800575a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2288      	movs	r2, #136	; 0x88
 8005778:	589b      	ldr	r3, [r3, r2]
 800577a:	2b22      	cmp	r3, #34	; 0x22
 800577c:	d000      	beq.n	8005780 <UART_RxISR_16BIT_FIFOEN+0x38>
 800577e:	e0e1      	b.n	8005944 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005780:	2316      	movs	r3, #22
 8005782:	18fb      	adds	r3, r7, r3
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	2168      	movs	r1, #104	; 0x68
 8005788:	5a52      	ldrh	r2, [r2, r1]
 800578a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800578c:	e0aa      	b.n	80058e4 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005794:	2114      	movs	r1, #20
 8005796:	187b      	adds	r3, r7, r1
 8005798:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 80057a0:	187b      	adds	r3, r7, r1
 80057a2:	2222      	movs	r2, #34	; 0x22
 80057a4:	18ba      	adds	r2, r7, r2
 80057a6:	881b      	ldrh	r3, [r3, #0]
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	4013      	ands	r3, r2
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	225e      	movs	r2, #94	; 0x5e
 80057c0:	5a9b      	ldrh	r3, [r3, r2]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b01      	subs	r3, #1
 80057c6:	b299      	uxth	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	225e      	movs	r2, #94	; 0x5e
 80057cc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2207      	movs	r2, #7
 80057da:	4013      	ands	r3, r2
 80057dc:	d049      	beq.n	8005872 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e0:	2201      	movs	r2, #1
 80057e2:	4013      	ands	r3, r2
 80057e4:	d010      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	005b      	lsls	r3, r3, #1
 80057ec:	4013      	ands	r3, r2
 80057ee:	d00b      	beq.n	8005808 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	2201      	movs	r2, #1
 80057f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	228c      	movs	r2, #140	; 0x8c
 80057fc:	589b      	ldr	r3, [r3, r2]
 80057fe:	2201      	movs	r2, #1
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	218c      	movs	r1, #140	; 0x8c
 8005806:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	2202      	movs	r2, #2
 800580c:	4013      	ands	r3, r2
 800580e:	d00f      	beq.n	8005830 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2201      	movs	r2, #1
 8005814:	4013      	ands	r3, r2
 8005816:	d00b      	beq.n	8005830 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2202      	movs	r2, #2
 800581e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	228c      	movs	r2, #140	; 0x8c
 8005824:	589b      	ldr	r3, [r3, r2]
 8005826:	2204      	movs	r2, #4
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	218c      	movs	r1, #140	; 0x8c
 800582e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	2204      	movs	r2, #4
 8005834:	4013      	ands	r3, r2
 8005836:	d00f      	beq.n	8005858 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2201      	movs	r2, #1
 800583c:	4013      	ands	r3, r2
 800583e:	d00b      	beq.n	8005858 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2204      	movs	r2, #4
 8005846:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	228c      	movs	r2, #140	; 0x8c
 800584c:	589b      	ldr	r3, [r3, r2]
 800584e:	2202      	movs	r2, #2
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	218c      	movs	r1, #140	; 0x8c
 8005856:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	228c      	movs	r2, #140	; 0x8c
 800585c:	589b      	ldr	r3, [r3, r2]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d007      	beq.n	8005872 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff f81b 	bl	80048a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	228c      	movs	r2, #140	; 0x8c
 800586e:	2100      	movs	r1, #0
 8005870:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	225e      	movs	r2, #94	; 0x5e
 8005876:	5a9b      	ldrh	r3, [r3, r2]
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d132      	bne.n	80058e4 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4934      	ldr	r1, [pc, #208]	; (800595c <UART_RxISR_16BIT_FIFOEN+0x214>)
 800588a:	400a      	ands	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4931      	ldr	r1, [pc, #196]	; (8005960 <UART_RxISR_16BIT_FIFOEN+0x218>)
 800589a:	400a      	ands	r2, r1
 800589c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2288      	movs	r2, #136	; 0x88
 80058a2:	2120      	movs	r1, #32
 80058a4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d110      	bne.n	80058d6 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2110      	movs	r1, #16
 80058c0:	438a      	bics	r2, r1
 80058c2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	225c      	movs	r2, #92	; 0x5c
 80058c8:	5a9a      	ldrh	r2, [r3, r2]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0011      	movs	r1, r2
 80058ce:	0018      	movs	r0, r3
 80058d0:	f7fe ffee 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
 80058d4:	e003      	b.n	80058de <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	0018      	movs	r0, r3
 80058da:	f000 fb6f 	bl	8005fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058e4:	2316      	movs	r3, #22
 80058e6:	18fb      	adds	r3, r7, r3
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d004      	beq.n	80058f8 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	2220      	movs	r2, #32
 80058f2:	4013      	ands	r3, r2
 80058f4:	d000      	beq.n	80058f8 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 80058f6:	e74a      	b.n	800578e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058f8:	200e      	movs	r0, #14
 80058fa:	183b      	adds	r3, r7, r0
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	215e      	movs	r1, #94	; 0x5e
 8005900:	5a52      	ldrh	r2, [r2, r1]
 8005902:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005904:	0001      	movs	r1, r0
 8005906:	187b      	adds	r3, r7, r1
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d022      	beq.n	8005954 <UART_RxISR_16BIT_FIFOEN+0x20c>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2268      	movs	r2, #104	; 0x68
 8005912:	5a9b      	ldrh	r3, [r3, r2]
 8005914:	187a      	adds	r2, r7, r1
 8005916:	8812      	ldrh	r2, [r2, #0]
 8005918:	429a      	cmp	r2, r3
 800591a:	d21b      	bcs.n	8005954 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	490f      	ldr	r1, [pc, #60]	; (8005964 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8005928:	400a      	ands	r2, r1
 800592a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a0e      	ldr	r2, [pc, #56]	; (8005968 <UART_RxISR_16BIT_FIFOEN+0x220>)
 8005930:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2120      	movs	r1, #32
 800593e:	430a      	orrs	r2, r1
 8005940:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005942:	e007      	b.n	8005954 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2108      	movs	r1, #8
 8005950:	430a      	orrs	r2, r1
 8005952:	619a      	str	r2, [r3, #24]
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b00a      	add	sp, #40	; 0x28
 800595a:	bd80      	pop	{r7, pc}
 800595c:	fffffeff 	.word	0xfffffeff
 8005960:	effffffe 	.word	0xeffffffe
 8005964:	efffffff 	.word	0xefffffff
 8005968:	08005439 	.word	0x08005439

0800596c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005974:	46c0      	nop			; (mov r8, r8)
 8005976:	46bd      	mov	sp, r7
 8005978:	b002      	add	sp, #8
 800597a:	bd80      	pop	{r7, pc}

0800597c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b002      	add	sp, #8
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2280      	movs	r2, #128	; 0x80
 80059a8:	5c9b      	ldrb	r3, [r3, r2]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e027      	b.n	8005a02 <HAL_UARTEx_DisableFifoMode+0x66>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2280      	movs	r2, #128	; 0x80
 80059b6:	2101      	movs	r1, #1
 80059b8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2284      	movs	r2, #132	; 0x84
 80059be:	2124      	movs	r1, #36	; 0x24
 80059c0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2101      	movs	r1, #1
 80059d6:	438a      	bics	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <HAL_UARTEx_DisableFifoMode+0x70>)
 80059de:	4013      	ands	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2284      	movs	r2, #132	; 0x84
 80059f4:	2120      	movs	r1, #32
 80059f6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	2100      	movs	r1, #0
 80059fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	0018      	movs	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	b004      	add	sp, #16
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	46c0      	nop			; (mov r8, r8)
 8005a0c:	dfffffff 	.word	0xdfffffff

08005a10 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2280      	movs	r2, #128	; 0x80
 8005a1e:	5c9b      	ldrb	r3, [r3, r2]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d101      	bne.n	8005a28 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a24:	2302      	movs	r3, #2
 8005a26:	e02e      	b.n	8005a86 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2284      	movs	r2, #132	; 0x84
 8005a34:	2124      	movs	r1, #36	; 0x24
 8005a36:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	438a      	bics	r2, r1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	08d9      	lsrs	r1, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	683a      	ldr	r2, [r7, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f000 f854 	bl	8005b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2284      	movs	r2, #132	; 0x84
 8005a78:	2120      	movs	r1, #32
 8005a7a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2280      	movs	r2, #128	; 0x80
 8005a80:	2100      	movs	r1, #0
 8005a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	0018      	movs	r0, r3
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	b004      	add	sp, #16
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2280      	movs	r2, #128	; 0x80
 8005a9e:	5c9b      	ldrb	r3, [r3, r2]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d101      	bne.n	8005aa8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005aa4:	2302      	movs	r3, #2
 8005aa6:	e02f      	b.n	8005b08 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2280      	movs	r2, #128	; 0x80
 8005aac:	2101      	movs	r1, #1
 8005aae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2284      	movs	r2, #132	; 0x84
 8005ab4:	2124      	movs	r1, #36	; 0x24
 8005ab6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2101      	movs	r1, #1
 8005acc:	438a      	bics	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	4a0e      	ldr	r2, [pc, #56]	; (8005b10 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	0019      	movs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	0018      	movs	r0, r3
 8005aea:	f000 f813 	bl	8005b14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2284      	movs	r2, #132	; 0x84
 8005afa:	2120      	movs	r1, #32
 8005afc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2280      	movs	r2, #128	; 0x80
 8005b02:	2100      	movs	r1, #0
 8005b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	0018      	movs	r0, r3
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	f1ffffff 	.word	0xf1ffffff

08005b14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005b1c:	2314      	movs	r3, #20
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	4a2f      	ldr	r2, [pc, #188]	; (8005be0 <UARTEx_SetNbDataToProcess+0xcc>)
 8005b22:	ca03      	ldmia	r2!, {r0, r1}
 8005b24:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005b26:	230c      	movs	r3, #12
 8005b28:	18fb      	adds	r3, r7, r3
 8005b2a:	4a2e      	ldr	r2, [pc, #184]	; (8005be4 <UARTEx_SetNbDataToProcess+0xd0>)
 8005b2c:	ca03      	ldmia	r2!, {r0, r1}
 8005b2e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d108      	bne.n	8005b4a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	226a      	movs	r2, #106	; 0x6a
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2268      	movs	r2, #104	; 0x68
 8005b44:	2101      	movs	r1, #1
 8005b46:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b48:	e046      	b.n	8005bd8 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b4a:	261f      	movs	r6, #31
 8005b4c:	19bb      	adds	r3, r7, r6
 8005b4e:	2208      	movs	r2, #8
 8005b50:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b52:	201e      	movs	r0, #30
 8005b54:	183b      	adds	r3, r7, r0
 8005b56:	2208      	movs	r2, #8
 8005b58:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	0e5b      	lsrs	r3, r3, #25
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	241d      	movs	r4, #29
 8005b66:	193b      	adds	r3, r7, r4
 8005b68:	2107      	movs	r1, #7
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	0f5b      	lsrs	r3, r3, #29
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	251c      	movs	r5, #28
 8005b7a:	197b      	adds	r3, r7, r5
 8005b7c:	2107      	movs	r1, #7
 8005b7e:	400a      	ands	r2, r1
 8005b80:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b82:	183b      	adds	r3, r7, r0
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	197a      	adds	r2, r7, r5
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	2114      	movs	r1, #20
 8005b8c:	1879      	adds	r1, r7, r1
 8005b8e:	5c8a      	ldrb	r2, [r1, r2]
 8005b90:	435a      	muls	r2, r3
 8005b92:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b94:	197b      	adds	r3, r7, r5
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	250c      	movs	r5, #12
 8005b9a:	197a      	adds	r2, r7, r5
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	f7fa fb3a 	bl	8000218 <__divsi3>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	b299      	uxth	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	226a      	movs	r2, #106	; 0x6a
 8005bac:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bae:	19bb      	adds	r3, r7, r6
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	193a      	adds	r2, r7, r4
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	2114      	movs	r1, #20
 8005bb8:	1879      	adds	r1, r7, r1
 8005bba:	5c8a      	ldrb	r2, [r1, r2]
 8005bbc:	435a      	muls	r2, r3
 8005bbe:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	197a      	adds	r2, r7, r5
 8005bc6:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bc8:	0019      	movs	r1, r3
 8005bca:	f7fa fb25 	bl	8000218 <__divsi3>
 8005bce:	0003      	movs	r3, r0
 8005bd0:	b299      	uxth	r1, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2268      	movs	r2, #104	; 0x68
 8005bd6:	5299      	strh	r1, [r3, r2]
}
 8005bd8:	46c0      	nop			; (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	b009      	add	sp, #36	; 0x24
 8005bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be0:	08006e40 	.word	0x08006e40
 8005be4:	08006e48 	.word	0x08006e48

08005be8 <key_process>:
 * @brief: 按键处理函数
 * @note:  切换四次状态
 * @detail: key_value 状态不会保持保存
 */
void key_process(void)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
	uint8_t mode_key_value =mode_button_tick();
 8005bee:	1dfc      	adds	r4, r7, #7
 8005bf0:	f000 f8e8 	bl	8005dc4 <mode_button_tick>
 8005bf4:	0003      	movs	r3, r0
 8005bf6:	7023      	strb	r3, [r4, #0]
	uint8_t shot_key_value =shot_button_tick();
 8005bf8:	1dbc      	adds	r4, r7, #6
 8005bfa:	f000 f94d 	bl	8005e98 <shot_button_tick>
 8005bfe:	0003      	movs	r3, r0
 8005c00:	7023      	strb	r3, [r4, #0]
    if(mode_key_value == SINGLE_CLICK){
 8005c02:	1dfb      	adds	r3, r7, #7
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d134      	bne.n	8005c74 <key_process+0x8c>
    	if(shot_status == SHOT_BLUE){  // 橙色射击模式
 8005c0a:	4b44      	ldr	r3, [pc, #272]	; (8005d1c <key_process+0x134>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d107      	bne.n	8005c22 <key_process+0x3a>
    		printf("1\r\n");
 8005c12:	4b43      	ldr	r3, [pc, #268]	; (8005d20 <key_process+0x138>)
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fc69 	bl	80064ec <puts>
    		shot_status = SHOT_ORG;
 8005c1a:	4b40      	ldr	r3, [pc, #256]	; (8005d1c <key_process+0x134>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e028      	b.n	8005c74 <key_process+0x8c>
    	}
    	else if(shot_status == SHOT_ORG){   // 蓝色常量
 8005c22:	4b3e      	ldr	r3, [pc, #248]	; (8005d1c <key_process+0x134>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d109      	bne.n	8005c3e <key_process+0x56>
    		printf("2\r\n");
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	; (8005d24 <key_process+0x13c>)
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 fc5d 	bl	80064ec <puts>
    		ws2812_blu_style();
 8005c32:	f000 fb57 	bl	80062e4 <ws2812_blu_style>
    	    shot_status = NO_BLU;
 8005c36:	4b39      	ldr	r3, [pc, #228]	; (8005d1c <key_process+0x134>)
 8005c38:	2202      	movs	r2, #2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	e01a      	b.n	8005c74 <key_process+0x8c>
    	 }
    	else if(shot_status == NO_BLU){   // 橙色常量
 8005c3e:	4b37      	ldr	r3, [pc, #220]	; (8005d1c <key_process+0x134>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d109      	bne.n	8005c5a <key_process+0x72>
    		printf("3\r\n");
 8005c46:	4b38      	ldr	r3, [pc, #224]	; (8005d28 <key_process+0x140>)
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 fc4f 	bl	80064ec <puts>
    		ws2812_org_style();
 8005c4e:	f000 fb56 	bl	80062fe <ws2812_org_style>
    	    shot_status = NO_ORG;
 8005c52:	4b32      	ldr	r3, [pc, #200]	; (8005d1c <key_process+0x134>)
 8005c54:	2203      	movs	r2, #3
 8005c56:	701a      	strb	r2, [r3, #0]
 8005c58:	e00c      	b.n	8005c74 <key_process+0x8c>
    	}

    	else if(shot_status == NO_ORG){   // 蓝色射击模式
 8005c5a:	4b30      	ldr	r3, [pc, #192]	; (8005d1c <key_process+0x134>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d108      	bne.n	8005c74 <key_process+0x8c>
    		ws281x_close_all();
 8005c62:	f000 fa23 	bl	80060ac <ws281x_close_all>
    		printf("0\r\n");
 8005c66:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <key_process+0x144>)
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 fc3f 	bl	80064ec <puts>
    	    shot_status = SHOT_BLUE;
 8005c6e:	4b2b      	ldr	r3, [pc, #172]	; (8005d1c <key_process+0x134>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
    	 }
    }
    if(shot_key_value == SINGLE_CLICK){  // 射击
 8005c74:	1dbb      	adds	r3, r7, #6
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d14a      	bne.n	8005d12 <key_process+0x12a>

        if(shot_status == NO_BLU || shot_status == NO_ORG){  // 射击
 8005c7c:	4b27      	ldr	r3, [pc, #156]	; (8005d1c <key_process+0x134>)
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d003      	beq.n	8005c8c <key_process+0xa4>
 8005c84:	4b25      	ldr	r3, [pc, #148]	; (8005d1c <key_process+0x134>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d118      	bne.n	8005cbe <key_process+0xd6>
    		// 发送没电测试信号
        	printf("8\r\n");
 8005c8c:	4b28      	ldr	r3, [pc, #160]	; (8005d30 <key_process+0x148>)
 8005c8e:	0018      	movs	r0, r3
 8005c90:	f000 fc2c 	bl	80064ec <puts>

    		servo_set_angle(CLOSE_ANGLE);
 8005c94:	2000      	movs	r0, #0
 8005c96:	f000 f967 	bl	8005f68 <servo_set_angle>
    		ws281x_close_all();
 8005c9a:	f000 fa07 	bl	80060ac <ws281x_close_all>
    		HAL_UART_Transmit(&huart2,&Buffer2,6,1000);  // 语音
 8005c9e:	23fa      	movs	r3, #250	; 0xfa
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4924      	ldr	r1, [pc, #144]	; (8005d34 <key_process+0x14c>)
 8005ca4:	4824      	ldr	r0, [pc, #144]	; (8005d38 <key_process+0x150>)
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	f7fe face 	bl	8004248 <HAL_UART_Transmit>

    		HAL_Delay(2000);
 8005cac:	23fa      	movs	r3, #250	; 0xfa
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	0018      	movs	r0, r3
 8005cb2:	f7fb fa93 	bl	80011dc <HAL_Delay>
    	    shot_status = SHOT_BLUE;
 8005cb6:	4b19      	ldr	r3, [pc, #100]	; (8005d1c <key_process+0x134>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
				HAL_Delay(200);
			}
			servo_set_angle(CLOSE_ANGLE);
        }
    }
}
 8005cbc:	e029      	b.n	8005d12 <key_process+0x12a>
        else if(shot_status == SHOT_BLUE|| shot_status == SHOT_ORG){
 8005cbe:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <key_process+0x134>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <key_process+0xe6>
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <key_process+0x134>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d121      	bne.n	8005d12 <key_process+0x12a>
			servo_set_angle(OPEN_ANGLE);
 8005cce:	2078      	movs	r0, #120	; 0x78
 8005cd0:	f000 f94a 	bl	8005f68 <servo_set_angle>
			HAL_UART_Transmit(&huart2,&Buffer1,6,1000);  // 发送10个数据
 8005cd4:	23fa      	movs	r3, #250	; 0xfa
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4918      	ldr	r1, [pc, #96]	; (8005d3c <key_process+0x154>)
 8005cda:	4817      	ldr	r0, [pc, #92]	; (8005d38 <key_process+0x150>)
 8005cdc:	2206      	movs	r2, #6
 8005cde:	f7fe fab3 	bl	8004248 <HAL_UART_Transmit>
			if(shot_status == SHOT_BLUE){
 8005ce2:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <key_process+0x134>)
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <key_process+0x112>
				ws2812_shot_blu_style();
 8005cea:	f000 fb15 	bl	8006318 <ws2812_shot_blu_style>
				HAL_Delay(300);
 8005cee:	2396      	movs	r3, #150	; 0x96
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	0018      	movs	r0, r3
 8005cf4:	f7fb fa72 	bl	80011dc <HAL_Delay>
 8005cf8:	e008      	b.n	8005d0c <key_process+0x124>
			else if(shot_status == SHOT_ORG){
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <key_process+0x134>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d104      	bne.n	8005d0c <key_process+0x124>
				ws2812_shot_org_style();
 8005d02:	f000 fb2c 	bl	800635e <ws2812_shot_org_style>
				HAL_Delay(200);
 8005d06:	20c8      	movs	r0, #200	; 0xc8
 8005d08:	f7fb fa68 	bl	80011dc <HAL_Delay>
			servo_set_angle(CLOSE_ANGLE);
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f000 f92b 	bl	8005f68 <servo_set_angle>
}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	46bd      	mov	sp, r7
 8005d16:	b003      	add	sp, #12
 8005d18:	bd90      	pop	{r4, r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	200000a0 	.word	0x200000a0
 8005d20:	08006e50 	.word	0x08006e50
 8005d24:	08006e54 	.word	0x08006e54
 8005d28:	08006e58 	.word	0x08006e58
 8005d2c:	08006e5c 	.word	0x08006e5c
 8005d30:	08006e60 	.word	0x08006e60
 8005d34:	20000014 	.word	0x20000014
 8005d38:	20001380 	.word	0x20001380
 8005d3c:	2000000c 	.word	0x2000000c

08005d40 <idle>:

/**
 * @brief  标准闲置程序使机器保持活动状态
 */

void idle(){
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	if(USART_RX_STA&0x8000){
 8005d44:	4b0d      	ldr	r3, [pc, #52]	; (8005d7c <idle+0x3c>)
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b21b      	sxth	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	da13      	bge.n	8005d76 <idle+0x36>
		if(USART_RX_BUF[0] == '9'){
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <idle+0x40>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b39      	cmp	r3, #57	; 0x39
 8005d54:	d10c      	bne.n	8005d70 <idle+0x30>
			servo_set_angle(CLOSE_ANGLE);
 8005d56:	2000      	movs	r0, #0
 8005d58:	f000 f906 	bl	8005f68 <servo_set_angle>
			ws281x_close_all();
 8005d5c:	f000 f9a6 	bl	80060ac <ws281x_close_all>
			HAL_UART_Transmit(&huart2,&Buffer2,6,1000);  // 发送10个数据
 8005d60:	23fa      	movs	r3, #250	; 0xfa
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4907      	ldr	r1, [pc, #28]	; (8005d84 <idle+0x44>)
 8005d66:	4808      	ldr	r0, [pc, #32]	; (8005d88 <idle+0x48>)
 8005d68:	2206      	movs	r2, #6
 8005d6a:	f7fe fa6d 	bl	8004248 <HAL_UART_Transmit>
			while(1);
 8005d6e:	e7fe      	b.n	8005d6e <idle+0x2e>
		}
		USART_RX_STA=0;
 8005d70:	4b02      	ldr	r3, [pc, #8]	; (8005d7c <idle+0x3c>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	801a      	strh	r2, [r3, #0]
	}
}
 8005d76:	46c0      	nop			; (mov r8, r8)
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200000b0 	.word	0x200000b0
 8005d80:	20001418 	.word	0x20001418
 8005d84:	20000014 	.word	0x20000014
 8005d88:	20001380 	.word	0x20001380

08005d8c <setup>:
 * @brief  定时器初始化
 *         PWM初始化
  *                开机检测
 */
void setup(void)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	af00      	add	r7, sp, #0
	uart_init();
 8005d90:	f000 f904 	bl	8005f9c <uart_init>

	ws281x_init();
 8005d94:	f000 f982 	bl	800609c <ws281x_init>

	servo_init();   /* 舵机初始化 */
 8005d98:	f000 f8d0 	bl	8005f3c <servo_init>

	ws2812_shot_blu_style();
 8005d9c:	f000 fabc 	bl	8006318 <ws2812_shot_blu_style>
	//HAL_UART_Transmit(&huart2,&Buffer3,5,1000);  // 发送10个数据
 	HAL_Delay(1000);
 8005da0:	23fa      	movs	r3, #250	; 0xfa
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	0018      	movs	r0, r3
 8005da6:	f7fb fa19 	bl	80011dc <HAL_Delay>

}
 8005daa:	46c0      	nop			; (mov r8, r8)
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <loop>:

void loop(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
	idle();
 8005db4:	f7ff ffc4 	bl	8005d40 <idle>

	key_process();
 8005db8:	f7ff ff16 	bl	8005be8 <key_process>

}
 8005dbc:	46c0      	nop			; (mov r8, r8)
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <mode_button_tick>:
/**
 * @brief: 按键无阻塞检测程序
 * @note: 只有单击检测，且必须 按下+释放 才视为一次有效动作
 */
u8 mode_button_tick(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
	u8 key_status = 0;
 8005dca:	1dfb      	adds	r3, r7, #7
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
    millis_t now = millis(); // current time in ms.
 8005dd0:	f7fb f9fa 	bl	80011c8 <HAL_GetTick>
 8005dd4:	0003      	movs	r3, r0
 8005dd6:	603b      	str	r3, [r7, #0]

    if (mode_state == 0) { // waiting for pin being pressed.
 8005dd8:	4b2d      	ldr	r3, [pc, #180]	; (8005e90 <mode_button_tick+0xcc>)
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d113      	bne.n	8005e08 <mode_button_tick+0x44>
        if (MODE_BUTTON_PRESSED) {
 8005de0:	23a0      	movs	r3, #160	; 0xa0
 8005de2:	05db      	lsls	r3, r3, #23
 8005de4:	2101      	movs	r1, #1
 8005de6:	0018      	movs	r0, r3
 8005de8:	f7fb ff7c 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005dec:	0003      	movs	r3, r0
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d006      	beq.n	8005e00 <mode_button_tick+0x3c>
        	mode_state = 1; // step to state 1
 8005df2:	4b27      	ldr	r3, [pc, #156]	; (8005e90 <mode_button_tick+0xcc>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
        	mode_startTime = now; // remember starting time
 8005df8:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <mode_button_tick+0xd0>)
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e041      	b.n	8005e84 <mode_button_tick+0xc0>
        }
        else
        	key_status = NO_CLICK;
 8005e00:	1dfb      	adds	r3, r7, #7
 8005e02:	2200      	movs	r2, #0
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	e03d      	b.n	8005e84 <mode_button_tick+0xc0>
    }
    else if (mode_state == 1) {  // waiting to get
 8005e08:	4b21      	ldr	r3, [pc, #132]	; (8005e90 <mode_button_tick+0xcc>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d126      	bne.n	8005e5e <mode_button_tick+0x9a>

        if ((MODE_BUTTON_PRESSED) && ((unsigned long)(now - mode_startTime) > LONGTIME)) {
 8005e10:	23a0      	movs	r3, #160	; 0xa0
 8005e12:	05db      	lsls	r3, r3, #23
 8005e14:	2101      	movs	r1, #1
 8005e16:	0018      	movs	r0, r3
 8005e18:	f7fb ff64 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005e1c:	0003      	movs	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d010      	beq.n	8005e44 <mode_button_tick+0x80>
 8005e22:	4b1c      	ldr	r3, [pc, #112]	; (8005e94 <mode_button_tick+0xd0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	1ad2      	subs	r2, r2, r3
 8005e2a:	23fa      	movs	r3, #250	; 0xfa
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d908      	bls.n	8005e44 <mode_button_tick+0x80>
        	mode_state = 2;
 8005e32:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <mode_button_tick+0xcc>)
 8005e34:	2202      	movs	r2, #2
 8005e36:	701a      	strb	r2, [r3, #0]
        	key_status =  SINGLE_CLICK;
 8005e38:	1dfb      	adds	r3, r7, #7
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
        	return key_status;
 8005e3e:	1dfb      	adds	r3, r7, #7
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	e021      	b.n	8005e88 <mode_button_tick+0xc4>
        }
        else if ((!MODE_BUTTON_PRESSED)) {
 8005e44:	23a0      	movs	r3, #160	; 0xa0
 8005e46:	05db      	lsls	r3, r3, #23
 8005e48:	2101      	movs	r1, #1
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f7fb ff4a 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005e50:	0003      	movs	r3, r0
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d116      	bne.n	8005e84 <mode_button_tick+0xc0>
            // 期间只要按键释放，返回状态0，无任何动作
        	mode_state = 0;
 8005e56:	4b0e      	ldr	r3, [pc, #56]	; (8005e90 <mode_button_tick+0xcc>)
 8005e58:	2200      	movs	r2, #0
 8005e5a:	701a      	strb	r2, [r3, #0]
 8005e5c:	e012      	b.n	8005e84 <mode_button_tick+0xc0>
        }
    }
    else if (mode_state == 2) {  // waiting to get
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <mode_button_tick+0xcc>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d10e      	bne.n	8005e84 <mode_button_tick+0xc0>
    	key_status =  NO_CLICK;
 8005e66:	1dfb      	adds	r3, r7, #7
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
        if ((!MODE_BUTTON_PRESSED)) {  // 此处等待按键释放，连续触发
 8005e6c:	23a0      	movs	r3, #160	; 0xa0
 8005e6e:	05db      	lsls	r3, r3, #23
 8005e70:	2101      	movs	r1, #1
 8005e72:	0018      	movs	r0, r3
 8005e74:	f7fb ff36 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005e78:	0003      	movs	r3, r0
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d102      	bne.n	8005e84 <mode_button_tick+0xc0>
        	mode_state = 0;
 8005e7e:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <mode_button_tick+0xcc>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
        }
    }
    return key_status;
 8005e84:	1dfb      	adds	r3, r7, #7
 8005e86:	781b      	ldrb	r3, [r3, #0]

} // OneButton.tick()
 8005e88:	0018      	movs	r0, r3
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	b002      	add	sp, #8
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	200000a1 	.word	0x200000a1
 8005e94:	200000a4 	.word	0x200000a4

08005e98 <shot_button_tick>:
/**
 * @brief: 按键无阻塞检测程序
 * @note: 只有单击检测，且必须 按下+释放 才视为一次有效动作
 */
u8 shot_button_tick(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
    u8 key_status = 0;
 8005e9e:	1dfb      	adds	r3, r7, #7
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
    millis_t now = millis(); // current time in ms.
 8005ea4:	f7fb f990 	bl	80011c8 <HAL_GetTick>
 8005ea8:	0003      	movs	r3, r0
 8005eaa:	603b      	str	r3, [r7, #0]

    if (shot_state == 0) { // waiting for pin being pressed.
 8005eac:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <shot_button_tick+0x9c>)
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d113      	bne.n	8005edc <shot_button_tick+0x44>
        if (SHOT_BUTTON_PRESSED) {
 8005eb4:	23a0      	movs	r3, #160	; 0xa0
 8005eb6:	05db      	lsls	r3, r3, #23
 8005eb8:	2102      	movs	r1, #2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f7fb ff12 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005ec0:	0003      	movs	r3, r0
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d006      	beq.n	8005ed4 <shot_button_tick+0x3c>
            shot_state = 1; // step to state 1
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <shot_button_tick+0x9c>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
            shot_startTime = now; // remember starting time
 8005ecc:	4b1a      	ldr	r3, [pc, #104]	; (8005f38 <shot_button_tick+0xa0>)
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e029      	b.n	8005f28 <shot_button_tick+0x90>
        }
        else
            key_status = NO_CLICK;
 8005ed4:	1dfb      	adds	r3, r7, #7
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
 8005eda:	e025      	b.n	8005f28 <shot_button_tick+0x90>
    }
    else if (shot_state == 1) { // waiting for pin being released.
 8005edc:	4b15      	ldr	r3, [pc, #84]	; (8005f34 <shot_button_tick+0x9c>)
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d121      	bne.n	8005f28 <shot_button_tick+0x90>

        if ((!SHOT_BUTTON_PRESSED) && ((unsigned long)(now - shot_startTime) < DEBOUNCETIME)) {
 8005ee4:	23a0      	movs	r3, #160	; 0xa0
 8005ee6:	05db      	lsls	r3, r3, #23
 8005ee8:	2102      	movs	r1, #2
 8005eea:	0018      	movs	r0, r3
 8005eec:	f7fb fefa 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005ef0:	0003      	movs	r3, r0
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d109      	bne.n	8005f0a <shot_button_tick+0x72>
 8005ef6:	4b10      	ldr	r3, [pc, #64]	; (8005f38 <shot_button_tick+0xa0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	2b63      	cmp	r3, #99	; 0x63
 8005f00:	d803      	bhi.n	8005f0a <shot_button_tick+0x72>
            // 按键释放太快，认为事抖动，返回状态0，不任何动作
            shot_state = 0;
 8005f02:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <shot_button_tick+0x9c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e00e      	b.n	8005f28 <shot_button_tick+0x90>
        }
        else if (!SHOT_BUTTON_PRESSED) {
 8005f0a:	23a0      	movs	r3, #160	; 0xa0
 8005f0c:	05db      	lsls	r3, r3, #23
 8005f0e:	2102      	movs	r1, #2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7fb fee7 	bl	8001ce4 <HAL_GPIO_ReadPin>
 8005f16:	0003      	movs	r3, r0
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d105      	bne.n	8005f28 <shot_button_tick+0x90>
            // this was only a single short click
            key_status = SINGLE_CLICK;
 8005f1c:	1dfb      	adds	r3, r7, #7
 8005f1e:	2201      	movs	r2, #1
 8005f20:	701a      	strb	r2, [r3, #0]
            shot_state = 0; // restart.
 8005f22:	4b04      	ldr	r3, [pc, #16]	; (8005f34 <shot_button_tick+0x9c>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
        }
    }
    return key_status;
 8005f28:	1dfb      	adds	r3, r7, #7
 8005f2a:	781b      	ldrb	r3, [r3, #0]
} // OneButton.tick()
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	200000a8 	.word	0x200000a8
 8005f38:	200000ac 	.word	0x200000ac

08005f3c <servo_init>:
 * @brief     舵机初始化
 * @note      具体配置见 Core->Src->tim.c
 * @attention 定时器自动重装载值 20000，对应脉冲周期 20ms
 */
void servo_init(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
    TIM3->CCR2=1500;   /* 比较值对应1.5ms高电平，对应角度为90度（0-180），在使能PWM输出之前配置 */
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <servo_init+0x20>)
 8005f42:	4a07      	ldr	r2, [pc, #28]	; (8005f60 <servo_init+0x24>)
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
    servo_set_angle(CLOSE_ANGLE);
 8005f46:	2000      	movs	r0, #0
 8005f48:	f000 f80e 	bl	8005f68 <servo_set_angle>
    HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);  /* 打开PWM输出 */
 8005f4c:	4b05      	ldr	r3, [pc, #20]	; (8005f64 <servo_init+0x28>)
 8005f4e:	2104      	movs	r1, #4
 8005f50:	0018      	movs	r0, r3
 8005f52:	f7fc fe41 	bl	8002bd8 <HAL_TIM_PWM_Start>
}
 8005f56:	46c0      	nop			; (mov r8, r8)
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40000400 	.word	0x40000400
 8005f60:	000005dc 	.word	0x000005dc
 8005f64:	200011fc 	.word	0x200011fc

08005f68 <servo_set_angle>:
 * @brief     设定舵机角度
 * @note      0-180度对应比较值 500-2500
 * @attention 定时器自动重装载值 20000，对应脉冲周期 20ms
 */
void servo_set_angle(u16 angle)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	0002      	movs	r2, r0
 8005f70:	1dbb      	adds	r3, r7, #6
 8005f72:	801a      	strh	r2, [r3, #0]
	TIM3->CCR2=(u16)angle*200/18+500;  /* 角度换算 */
 8005f74:	1dbb      	adds	r3, r7, #6
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	22c8      	movs	r2, #200	; 0xc8
 8005f7a:	4353      	muls	r3, r2
 8005f7c:	2112      	movs	r1, #18
 8005f7e:	0018      	movs	r0, r3
 8005f80:	f7fa f94a 	bl	8000218 <__divsi3>
 8005f84:	0003      	movs	r3, r0
 8005f86:	33f5      	adds	r3, #245	; 0xf5
 8005f88:	33ff      	adds	r3, #255	; 0xff
 8005f8a:	001a      	movs	r2, r3
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <servo_set_angle+0x30>)
 8005f8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40000400 	.word	0x40000400

08005f9c <uart_init>:

/**
  * @brief 串口初始化，启动接收中断
  */
void uart_init()
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1,(uint8_t *)aRxBuffer,1);  //开启中断
 8005fa0:	4904      	ldr	r1, [pc, #16]	; (8005fb4 <uart_init+0x18>)
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <uart_init+0x1c>)
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	f7fe f9f9 	bl	800439e <HAL_UART_Receive_IT>
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	20001414 	.word	0x20001414
 8005fb8:	200012f0 	.word	0x200012f0

08005fbc <HAL_UART_RxCpltCallback>:

/**
  * @brief 串口接收中断，每接收一个字节中断一次
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	if(UartHandle->Instance == USART1){   //判断时那种中断
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_UART_RxCpltCallback+0xa4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d13d      	bne.n	800604a <HAL_UART_RxCpltCallback+0x8e>

		if((USART_RX_STA&0x8000)==0)//接收未完成
 8005fce:	4b25      	ldr	r3, [pc, #148]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	b21b      	sxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	db38      	blt.n	800604a <HAL_UART_RxCpltCallback+0x8e>
		{
			if(USART_RX_STA&0x4000)//接收到了0x0d
 8005fd8:	4b22      	ldr	r3, [pc, #136]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	001a      	movs	r2, r3
 8005fde:	2380      	movs	r3, #128	; 0x80
 8005fe0:	01db      	lsls	r3, r3, #7
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d00f      	beq.n	8006006 <HAL_UART_RxCpltCallback+0x4a>
			{
				if(aRxBuffer[0]!=0x0a)USART_RX_STA=0;//接收错误,重新开始
 8005fe6:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_UART_RxCpltCallback+0xac>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b0a      	cmp	r3, #10
 8005fec:	d003      	beq.n	8005ff6 <HAL_UART_RxCpltCallback+0x3a>
 8005fee:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e029      	b.n	800604a <HAL_UART_RxCpltCallback+0x8e>
				else USART_RX_STA|=0x8000;	//接收完成了
 8005ff6:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	4a1c      	ldr	r2, [pc, #112]	; (800606c <HAL_UART_RxCpltCallback+0xb0>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	4b18      	ldr	r3, [pc, #96]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	e021      	b.n	800604a <HAL_UART_RxCpltCallback+0x8e>
			}
			else //还没收到0X0D
			{
				if(aRxBuffer[0]==0x0d)USART_RX_STA|=0x4000;
 8006006:	4b18      	ldr	r3, [pc, #96]	; (8006068 <HAL_UART_RxCpltCallback+0xac>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b0d      	cmp	r3, #13
 800600c:	d108      	bne.n	8006020 <HAL_UART_RxCpltCallback+0x64>
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	2280      	movs	r2, #128	; 0x80
 8006014:	01d2      	lsls	r2, r2, #7
 8006016:	4313      	orrs	r3, r2
 8006018:	b29a      	uxth	r2, r3
 800601a:	4b12      	ldr	r3, [pc, #72]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	e014      	b.n	800604a <HAL_UART_RxCpltCallback+0x8e>
				else
				{
					USART_RX_BUF[USART_RX_STA&0X3FFF]=aRxBuffer[0] ;
 8006020:	4b10      	ldr	r3, [pc, #64]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	049b      	lsls	r3, r3, #18
 8006026:	0c9b      	lsrs	r3, r3, #18
 8006028:	4a0f      	ldr	r2, [pc, #60]	; (8006068 <HAL_UART_RxCpltCallback+0xac>)
 800602a:	7811      	ldrb	r1, [r2, #0]
 800602c:	4a10      	ldr	r2, [pc, #64]	; (8006070 <HAL_UART_RxCpltCallback+0xb4>)
 800602e:	54d1      	strb	r1, [r2, r3]
					USART_RX_STA++;
 8006030:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	3301      	adds	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 800603a:	801a      	strh	r2, [r3, #0]
					if(USART_RX_STA>(USART_REC_LEN-1))USART_RX_STA=0;//接收数据错误,重新开始接收
 800603c:	4b09      	ldr	r3, [pc, #36]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 800603e:	881b      	ldrh	r3, [r3, #0]
 8006040:	2bc7      	cmp	r3, #199	; 0xc7
 8006042:	d902      	bls.n	800604a <HAL_UART_RxCpltCallback+0x8e>
 8006044:	4b07      	ldr	r3, [pc, #28]	; (8006064 <HAL_UART_RxCpltCallback+0xa8>)
 8006046:	2200      	movs	r2, #0
 8006048:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	}
	HAL_UART_Receive_IT(&huart1,(uint8_t *)aRxBuffer,1); // 再次开启中断
 800604a:	4907      	ldr	r1, [pc, #28]	; (8006068 <HAL_UART_RxCpltCallback+0xac>)
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_UART_RxCpltCallback+0xb8>)
 800604e:	2201      	movs	r2, #1
 8006050:	0018      	movs	r0, r3
 8006052:	f7fe f9a4 	bl	800439e <HAL_UART_Receive_IT>
}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	46bd      	mov	sp, r7
 800605a:	b002      	add	sp, #8
 800605c:	bd80      	pop	{r7, pc}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	40013800 	.word	0x40013800
 8006064:	200000b0 	.word	0x200000b0
 8006068:	20001414 	.word	0x20001414
 800606c:	ffff8000 	.word	0xffff8000
 8006070:	20001418 	.word	0x20001418
 8006074:	200012f0 	.word	0x200012f0

08006078 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)  /* 防止重定义，具体为什么会用到GNUC我以为不知道*/
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,1000);
 8006080:	23fa      	movs	r3, #250	; 0xfa
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	1d39      	adds	r1, r7, #4
 8006086:	4804      	ldr	r0, [pc, #16]	; (8006098 <__io_putchar+0x20>)
 8006088:	2201      	movs	r2, #1
 800608a:	f7fe f8dd 	bl	8004248 <HAL_UART_Transmit>
     return ch;
 800608e:	687b      	ldr	r3, [r7, #4]
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}
 8006098:	200012f0 	.word	0x200012f0

0800609c <ws281x_init>:
/**
 * @brief: 初始化函数，所有灯熄灭
 * @note: 上电瞬间、灯带会显示紊乱，需要先主动熄灭
 */
void ws281x_init(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	af00      	add	r7, sp, #0
	ws281x_close_all();
 80060a0:	f000 f804 	bl	80060ac <ws281x_close_all>
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <ws281x_close_all>:
/**
 * @brief: 所有灯熄灭
 * @note: 
 */
void ws281x_close_all()
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0

	for(int j=DELAY_LEN;j<ARRAY_LEN;j++)
 80060b2:	23f0      	movs	r3, #240	; 0xf0
 80060b4:	607b      	str	r3, [r7, #4]
 80060b6:	e007      	b.n	80060c8 <ws281x_close_all+0x1c>
		BUF_DMA[j] = LED_0_PULSE;
 80060b8:	4b0d      	ldr	r3, [pc, #52]	; (80060f0 <ws281x_close_all+0x44>)
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	0092      	lsls	r2, r2, #2
 80060be:	2119      	movs	r1, #25
 80060c0:	50d1      	str	r1, [r2, r3]
	for(int j=DELAY_LEN;j<ARRAY_LEN;j++)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3301      	adds	r3, #1
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	238a      	movs	r3, #138	; 0x8a
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	429a      	cmp	r2, r3
 80060d0:	dbf2      	blt.n	80060b8 <ws281x_close_all+0xc>

	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t *)BUF_DMA,ARRAY_LEN);
 80060d2:	238a      	movs	r3, #138	; 0x8a
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4a06      	ldr	r2, [pc, #24]	; (80060f0 <ws281x_close_all+0x44>)
 80060d8:	4806      	ldr	r0, [pc, #24]	; (80060f4 <ws281x_close_all+0x48>)
 80060da:	210c      	movs	r1, #12
 80060dc:	f7fc fe5a 	bl	8002d94 <HAL_TIM_PWM_Start_DMA>
	HAL_Delay(10);
 80060e0:	200a      	movs	r0, #10
 80060e2:	f7fb f87b 	bl	80011dc <HAL_Delay>
}
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	46bd      	mov	sp, r7
 80060ea:	b002      	add	sp, #8
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	200000b4 	.word	0x200000b4
 80060f4:	200012a4 	.word	0x200012a4

080060f8 <ws281x_set_Pixe_rgb_buf>:
 * @note: 仅设置到buf缓存中，并不立即生效
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @param {uint16_t} posX 灯编号
 */
void ws281x_set_Pixe_rgb_buf(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 80060f8:	b5b0      	push	{r4, r5, r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	0005      	movs	r5, r0
 8006100:	000c      	movs	r4, r1
 8006102:	0010      	movs	r0, r2
 8006104:	0019      	movs	r1, r3
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	1c2a      	adds	r2, r5, #0
 800610a:	701a      	strb	r2, [r3, #0]
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	1c22      	adds	r2, r4, #0
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	1d7b      	adds	r3, r7, #5
 8006114:	1c02      	adds	r2, r0, #0
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	1cbb      	adds	r3, r7, #2
 800611a:	1c0a      	adds	r2, r1, #0
 800611c:	801a      	strh	r2, [r3, #0]
	uint32_t GRBcolor = Gpixel << 16 | Rpixel << 8 | Bpixel;
 800611e:	1dbb      	adds	r3, r7, #6
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	041a      	lsls	r2, r3, #16
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	021b      	lsls	r3, r3, #8
 800612a:	431a      	orrs	r2, r3
 800612c:	1d7b      	adds	r3, r7, #5
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	4313      	orrs	r3, r2
 8006132:	60bb      	str	r3, [r7, #8]
	for(u8 i=0;i<24;i++)
 8006134:	230f      	movs	r3, #15
 8006136:	18fb      	adds	r3, r7, r3
 8006138:	2200      	movs	r2, #0
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	e01f      	b.n	800617e <ws281x_set_Pixe_rgb_buf+0x86>
	{
		BUF_DMA[DELAY_LEN+24 * posX + i] = (((GRBcolor << i) & 0X800000) ? LED_1_PULSE : LED_0_PULSE);
 800613e:	230f      	movs	r3, #15
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	409a      	lsls	r2, r3
 8006148:	2380      	movs	r3, #128	; 0x80
 800614a:	041b      	lsls	r3, r3, #16
 800614c:	4013      	ands	r3, r2
 800614e:	d001      	beq.n	8006154 <ws281x_set_Pixe_rgb_buf+0x5c>
 8006150:	2236      	movs	r2, #54	; 0x36
 8006152:	e000      	b.n	8006156 <ws281x_set_Pixe_rgb_buf+0x5e>
 8006154:	2219      	movs	r2, #25
 8006156:	1cbb      	adds	r3, r7, #2
 8006158:	8819      	ldrh	r1, [r3, #0]
 800615a:	000b      	movs	r3, r1
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	185b      	adds	r3, r3, r1
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	33f0      	adds	r3, #240	; 0xf0
 8006164:	0019      	movs	r1, r3
 8006166:	200f      	movs	r0, #15
 8006168:	183b      	adds	r3, r7, r0
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	18c9      	adds	r1, r1, r3
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <ws281x_set_Pixe_rgb_buf+0x9c>)
 8006170:	0089      	lsls	r1, r1, #2
 8006172:	50ca      	str	r2, [r1, r3]
	for(u8 i=0;i<24;i++)
 8006174:	183b      	adds	r3, r7, r0
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	183b      	adds	r3, r7, r0
 800617a:	3201      	adds	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	230f      	movs	r3, #15
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b17      	cmp	r3, #23
 8006186:	d9da      	bls.n	800613e <ws281x_set_Pixe_rgb_buf+0x46>
	}
}
 8006188:	46c0      	nop			; (mov r8, r8)
 800618a:	46c0      	nop			; (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	b004      	add	sp, #16
 8006190:	bdb0      	pop	{r4, r5, r7, pc}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	200000b4 	.word	0x200000b4

08006198 <ws281x_set_group_all_rgb_buf>:
 * @note: 仅设置到buf缓存中，并不立即生效
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @detail:
 */
void ws281x_set_group_all_rgb_buf(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel)
{
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b09d      	sub	sp, #116	; 0x74
 800619c:	af00      	add	r7, sp, #0
 800619e:	0004      	movs	r4, r0
 80061a0:	0008      	movs	r0, r1
 80061a2:	0011      	movs	r1, r2
 80061a4:	1dfb      	adds	r3, r7, #7
 80061a6:	1c22      	adds	r2, r4, #0
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	1dbb      	adds	r3, r7, #6
 80061ac:	1c02      	adds	r2, r0, #0
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	1d7b      	adds	r3, r7, #5
 80061b2:	1c0a      	adds	r2, r1, #0
 80061b4:	701a      	strb	r2, [r3, #0]
	uint32_t BUF_DMA_TEMP[24];
	uint32_t GRBcolor = Gpixel << 16 | Rpixel << 8 | Bpixel;
 80061b6:	1dbb      	adds	r3, r7, #6
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	041a      	lsls	r2, r3, #16
 80061bc:	1dfb      	adds	r3, r7, #7
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	431a      	orrs	r2, r3
 80061c4:	1d7b      	adds	r3, r7, #5
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	66bb      	str	r3, [r7, #104]	; 0x68
	for(u8 i=0;i<24;i++)
 80061cc:	236f      	movs	r3, #111	; 0x6f
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	2200      	movs	r2, #0
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e017      	b.n	8006206 <ws281x_set_group_all_rgb_buf+0x6e>
	{
		BUF_DMA_TEMP[i] = (((GRBcolor << i) & 0X800000) ? LED_1_PULSE : LED_0_PULSE);
 80061d6:	236f      	movs	r3, #111	; 0x6f
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061de:	409a      	lsls	r2, r3
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	4013      	ands	r3, r2
 80061e6:	d001      	beq.n	80061ec <ws281x_set_group_all_rgb_buf+0x54>
 80061e8:	2336      	movs	r3, #54	; 0x36
 80061ea:	e000      	b.n	80061ee <ws281x_set_group_all_rgb_buf+0x56>
 80061ec:	2319      	movs	r3, #25
 80061ee:	206f      	movs	r0, #111	; 0x6f
 80061f0:	183a      	adds	r2, r7, r0
 80061f2:	7811      	ldrb	r1, [r2, #0]
 80061f4:	2208      	movs	r2, #8
 80061f6:	18ba      	adds	r2, r7, r2
 80061f8:	0089      	lsls	r1, r1, #2
 80061fa:	508b      	str	r3, [r1, r2]
	for(u8 i=0;i<24;i++)
 80061fc:	183b      	adds	r3, r7, r0
 80061fe:	781a      	ldrb	r2, [r3, #0]
 8006200:	183b      	adds	r3, r7, r0
 8006202:	3201      	adds	r2, #1
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	236f      	movs	r3, #111	; 0x6f
 8006208:	18fb      	adds	r3, r7, r3
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b17      	cmp	r3, #23
 800620e:	d9e2      	bls.n	80061d6 <ws281x_set_group_all_rgb_buf+0x3e>
	}

	for(u8 i=0;i<LED_NUM;i++){
 8006210:	236e      	movs	r3, #110	; 0x6e
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	e02a      	b.n	8006270 <ws281x_set_group_all_rgb_buf+0xd8>
		for (u8 j = 0; j < 24; j++){
 800621a:	236d      	movs	r3, #109	; 0x6d
 800621c:	18fb      	adds	r3, r7, r3
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e01a      	b.n	800625a <ws281x_set_group_all_rgb_buf+0xc2>
			BUF_DMA[DELAY_LEN+i * 24 + j] = BUF_DMA_TEMP[j];
 8006224:	206d      	movs	r0, #109	; 0x6d
 8006226:	183b      	adds	r3, r7, r0
 8006228:	7819      	ldrb	r1, [r3, #0]
 800622a:	236e      	movs	r3, #110	; 0x6e
 800622c:	18fb      	adds	r3, r7, r3
 800622e:	781a      	ldrb	r2, [r3, #0]
 8006230:	0013      	movs	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	189b      	adds	r3, r3, r2
 8006236:	00db      	lsls	r3, r3, #3
 8006238:	33f0      	adds	r3, #240	; 0xf0
 800623a:	001a      	movs	r2, r3
 800623c:	183b      	adds	r3, r7, r0
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	18d2      	adds	r2, r2, r3
 8006242:	2308      	movs	r3, #8
 8006244:	18fb      	adds	r3, r7, r3
 8006246:	0089      	lsls	r1, r1, #2
 8006248:	58c9      	ldr	r1, [r1, r3]
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <ws281x_set_group_all_rgb_buf+0xec>)
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	50d1      	str	r1, [r2, r3]
		for (u8 j = 0; j < 24; j++){
 8006250:	183b      	adds	r3, r7, r0
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	183b      	adds	r3, r7, r0
 8006256:	3201      	adds	r2, #1
 8006258:	701a      	strb	r2, [r3, #0]
 800625a:	236d      	movs	r3, #109	; 0x6d
 800625c:	18fb      	adds	r3, r7, r3
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b17      	cmp	r3, #23
 8006262:	d9df      	bls.n	8006224 <ws281x_set_group_all_rgb_buf+0x8c>
	for(u8 i=0;i<LED_NUM;i++){
 8006264:	216e      	movs	r1, #110	; 0x6e
 8006266:	187b      	adds	r3, r7, r1
 8006268:	781a      	ldrb	r2, [r3, #0]
 800626a:	187b      	adds	r3, r7, r1
 800626c:	3201      	adds	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	236e      	movs	r3, #110	; 0x6e
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b23      	cmp	r3, #35	; 0x23
 8006278:	d9cf      	bls.n	800621a <ws281x_set_group_all_rgb_buf+0x82>
		}
	}
}
 800627a:	46c0      	nop			; (mov r8, r8)
 800627c:	46c0      	nop			; (mov r8, r8)
 800627e:	46bd      	mov	sp, r7
 8006280:	b01d      	add	sp, #116	; 0x74
 8006282:	bd90      	pop	{r4, r7, pc}
 8006284:	200000b4 	.word	0x200000b4

08006288 <ws281x_light>:
 * @note:
 * @detail:
 */

void ws281x_light()
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t *)BUF_DMA,ARRAY_LEN);
 800628c:	238a      	movs	r3, #138	; 0x8a
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4a03      	ldr	r2, [pc, #12]	; (80062a0 <ws281x_light+0x18>)
 8006292:	4804      	ldr	r0, [pc, #16]	; (80062a4 <ws281x_light+0x1c>)
 8006294:	210c      	movs	r1, #12
 8006296:	f7fc fd7d 	bl	8002d94 <HAL_TIM_PWM_Start_DMA>
	//HAL_Delay(10);
}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	200000b4 	.word	0x200000b4
 80062a4:	200012a4 	.word	0x200012a4

080062a8 <ws281x_set_all_rgb_buf_light>:
 * @note:
 * @param {uint8_t} Rpixel、Gpixel、Bpixel RGB值 0-255
 * @detail:
 */
void ws281x_set_all_rgb_buf_light(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel)
{
 80062a8:	b590      	push	{r4, r7, lr}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	0004      	movs	r4, r0
 80062b0:	0008      	movs	r0, r1
 80062b2:	0011      	movs	r1, r2
 80062b4:	1dfb      	adds	r3, r7, #7
 80062b6:	1c22      	adds	r2, r4, #0
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	1dbb      	adds	r3, r7, #6
 80062bc:	1c02      	adds	r2, r0, #0
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	1d7b      	adds	r3, r7, #5
 80062c2:	1c0a      	adds	r2, r1, #0
 80062c4:	701a      	strb	r2, [r3, #0]
	ws281x_set_group_all_rgb_buf(Rpixel , Gpixel, Bpixel);
 80062c6:	1d7b      	adds	r3, r7, #5
 80062c8:	781a      	ldrb	r2, [r3, #0]
 80062ca:	1dbb      	adds	r3, r7, #6
 80062cc:	7819      	ldrb	r1, [r3, #0]
 80062ce:	1dfb      	adds	r3, r7, #7
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	0018      	movs	r0, r3
 80062d4:	f7ff ff60 	bl	8006198 <ws281x_set_group_all_rgb_buf>
	ws281x_light();
 80062d8:	f7ff ffd6 	bl	8006288 <ws281x_light>
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	b003      	add	sp, #12
 80062e2:	bd90      	pop	{r4, r7, pc}

080062e4 <ws2812_blu_style>:
 * @brief: 灯带全为蓝色，对应动作：远程模式
 * @note:
 * @detail:
 */
void ws2812_blu_style()
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
	ws281x_set_all_rgb_buf_light(BLU_COLOR_R, BLU_COLOR_G, BLU_COLOR_B);
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	2100      	movs	r1, #0
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7ff ffdb 	bl	80062a8 <ws281x_set_all_rgb_buf_light>
	HAL_Delay(10);
 80062f2:	200a      	movs	r0, #10
 80062f4:	f7fa ff72 	bl	80011dc <HAL_Delay>
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <ws2812_org_style>:
 * @brief: 灯带全为橙色，对应动作：近程模式
 * @note:
 * @detail:
 */
void ws2812_org_style()
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	af00      	add	r7, sp, #0
	ws281x_set_all_rgb_buf_light(ORG_COLOR_R, ORG_COLOR_G, ORG_COLOR_B);
 8006302:	2200      	movs	r2, #0
 8006304:	2150      	movs	r1, #80	; 0x50
 8006306:	20ff      	movs	r0, #255	; 0xff
 8006308:	f7ff ffce 	bl	80062a8 <ws281x_set_all_rgb_buf_light>
	HAL_Delay(10);
 800630c:	200a      	movs	r0, #10
 800630e:	f7fa ff65 	bl	80011dc <HAL_Delay>
}
 8006312:	46c0      	nop			; (mov r8, r8)
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <ws2812_shot_blu_style>:
 * @brief: 灯带从首到尾逐个变色，对应动作：开枪
 * @note:
 * @detail:
 */
void ws2812_shot_blu_style()
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	for(u8 i=0;i<LED_NUM;i++){
 800631e:	1dfb      	adds	r3, r7, #7
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e011      	b.n	800634a <ws2812_shot_blu_style+0x32>
		ws281x_set_Pixe_rgb_buf(BLU_COLOR_R,BLU_COLOR_G,BLU_COLOR_B,i);
 8006326:	1dfb      	adds	r3, r7, #7
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	22ff      	movs	r2, #255	; 0xff
 800632e:	2100      	movs	r1, #0
 8006330:	2000      	movs	r0, #0
 8006332:	f7ff fee1 	bl	80060f8 <ws281x_set_Pixe_rgb_buf>
		ws281x_light();
 8006336:	f7ff ffa7 	bl	8006288 <ws281x_light>
		HAL_Delay(5);
 800633a:	2005      	movs	r0, #5
 800633c:	f7fa ff4e 	bl	80011dc <HAL_Delay>
	for(u8 i=0;i<LED_NUM;i++){
 8006340:	1dfb      	adds	r3, r7, #7
 8006342:	781a      	ldrb	r2, [r3, #0]
 8006344:	1dfb      	adds	r3, r7, #7
 8006346:	3201      	adds	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	1dfb      	adds	r3, r7, #7
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	2b23      	cmp	r3, #35	; 0x23
 8006350:	d9e9      	bls.n	8006326 <ws2812_shot_blu_style+0xe>
	}
	ws281x_close_all();
 8006352:	f7ff feab 	bl	80060ac <ws281x_close_all>
}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	46bd      	mov	sp, r7
 800635a:	b002      	add	sp, #8
 800635c:	bd80      	pop	{r7, pc}

0800635e <ws2812_shot_org_style>:
void ws2812_shot_org_style()
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b082      	sub	sp, #8
 8006362:	af00      	add	r7, sp, #0
	for(u8 i=0;i<LED_NUM;i++){
 8006364:	1dfb      	adds	r3, r7, #7
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e011      	b.n	8006390 <ws2812_shot_org_style+0x32>
		ws281x_set_Pixe_rgb_buf(ORG_COLOR_R,ORG_COLOR_G,ORG_COLOR_B,i);
 800636c:	1dfb      	adds	r3, r7, #7
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	b29b      	uxth	r3, r3
 8006372:	2200      	movs	r2, #0
 8006374:	2150      	movs	r1, #80	; 0x50
 8006376:	20ff      	movs	r0, #255	; 0xff
 8006378:	f7ff febe 	bl	80060f8 <ws281x_set_Pixe_rgb_buf>
		ws281x_light();
 800637c:	f7ff ff84 	bl	8006288 <ws281x_light>
		HAL_Delay(5);
 8006380:	2005      	movs	r0, #5
 8006382:	f7fa ff2b 	bl	80011dc <HAL_Delay>
	for(u8 i=0;i<LED_NUM;i++){
 8006386:	1dfb      	adds	r3, r7, #7
 8006388:	781a      	ldrb	r2, [r3, #0]
 800638a:	1dfb      	adds	r3, r7, #7
 800638c:	3201      	adds	r2, #1
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b23      	cmp	r3, #35	; 0x23
 8006396:	d9e9      	bls.n	800636c <ws2812_shot_org_style+0xe>
	}
	ws281x_close_all();
 8006398:	f7ff fe88 	bl	80060ac <ws281x_close_all>
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b002      	add	sp, #8
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <__errno>:
 80063a4:	4b01      	ldr	r3, [pc, #4]	; (80063ac <__errno+0x8>)
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	4770      	bx	lr
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	2000001c 	.word	0x2000001c

080063b0 <__libc_init_array>:
 80063b0:	b570      	push	{r4, r5, r6, lr}
 80063b2:	2600      	movs	r6, #0
 80063b4:	4d0c      	ldr	r5, [pc, #48]	; (80063e8 <__libc_init_array+0x38>)
 80063b6:	4c0d      	ldr	r4, [pc, #52]	; (80063ec <__libc_init_array+0x3c>)
 80063b8:	1b64      	subs	r4, r4, r5
 80063ba:	10a4      	asrs	r4, r4, #2
 80063bc:	42a6      	cmp	r6, r4
 80063be:	d109      	bne.n	80063d4 <__libc_init_array+0x24>
 80063c0:	2600      	movs	r6, #0
 80063c2:	f000 fd31 	bl	8006e28 <_init>
 80063c6:	4d0a      	ldr	r5, [pc, #40]	; (80063f0 <__libc_init_array+0x40>)
 80063c8:	4c0a      	ldr	r4, [pc, #40]	; (80063f4 <__libc_init_array+0x44>)
 80063ca:	1b64      	subs	r4, r4, r5
 80063cc:	10a4      	asrs	r4, r4, #2
 80063ce:	42a6      	cmp	r6, r4
 80063d0:	d105      	bne.n	80063de <__libc_init_array+0x2e>
 80063d2:	bd70      	pop	{r4, r5, r6, pc}
 80063d4:	00b3      	lsls	r3, r6, #2
 80063d6:	58eb      	ldr	r3, [r5, r3]
 80063d8:	4798      	blx	r3
 80063da:	3601      	adds	r6, #1
 80063dc:	e7ee      	b.n	80063bc <__libc_init_array+0xc>
 80063de:	00b3      	lsls	r3, r6, #2
 80063e0:	58eb      	ldr	r3, [r5, r3]
 80063e2:	4798      	blx	r3
 80063e4:	3601      	adds	r6, #1
 80063e6:	e7f2      	b.n	80063ce <__libc_init_array+0x1e>
 80063e8:	08006f9c 	.word	0x08006f9c
 80063ec:	08006f9c 	.word	0x08006f9c
 80063f0:	08006f9c 	.word	0x08006f9c
 80063f4:	08006fa0 	.word	0x08006fa0

080063f8 <memset>:
 80063f8:	0003      	movs	r3, r0
 80063fa:	1882      	adds	r2, r0, r2
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d100      	bne.n	8006402 <memset+0xa>
 8006400:	4770      	bx	lr
 8006402:	7019      	strb	r1, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	e7f9      	b.n	80063fc <memset+0x4>

08006408 <_puts_r>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	0005      	movs	r5, r0
 800640c:	000e      	movs	r6, r1
 800640e:	2800      	cmp	r0, #0
 8006410:	d004      	beq.n	800641c <_puts_r+0x14>
 8006412:	6983      	ldr	r3, [r0, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d101      	bne.n	800641c <_puts_r+0x14>
 8006418:	f000 fa6e 	bl	80068f8 <__sinit>
 800641c:	69ab      	ldr	r3, [r5, #24]
 800641e:	68ac      	ldr	r4, [r5, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <_puts_r+0x22>
 8006424:	0028      	movs	r0, r5
 8006426:	f000 fa67 	bl	80068f8 <__sinit>
 800642a:	4b2d      	ldr	r3, [pc, #180]	; (80064e0 <_puts_r+0xd8>)
 800642c:	429c      	cmp	r4, r3
 800642e:	d122      	bne.n	8006476 <_puts_r+0x6e>
 8006430:	686c      	ldr	r4, [r5, #4]
 8006432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006434:	07db      	lsls	r3, r3, #31
 8006436:	d405      	bmi.n	8006444 <_puts_r+0x3c>
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	059b      	lsls	r3, r3, #22
 800643c:	d402      	bmi.n	8006444 <_puts_r+0x3c>
 800643e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006440:	f000 fafb 	bl	8006a3a <__retarget_lock_acquire_recursive>
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	d502      	bpl.n	8006450 <_puts_r+0x48>
 800644a:	6923      	ldr	r3, [r4, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d129      	bne.n	80064a4 <_puts_r+0x9c>
 8006450:	0021      	movs	r1, r4
 8006452:	0028      	movs	r0, r5
 8006454:	f000 f8aa 	bl	80065ac <__swsetup_r>
 8006458:	2800      	cmp	r0, #0
 800645a:	d023      	beq.n	80064a4 <_puts_r+0x9c>
 800645c:	2501      	movs	r5, #1
 800645e:	426d      	negs	r5, r5
 8006460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006462:	07db      	lsls	r3, r3, #31
 8006464:	d405      	bmi.n	8006472 <_puts_r+0x6a>
 8006466:	89a3      	ldrh	r3, [r4, #12]
 8006468:	059b      	lsls	r3, r3, #22
 800646a:	d402      	bmi.n	8006472 <_puts_r+0x6a>
 800646c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800646e:	f000 fae5 	bl	8006a3c <__retarget_lock_release_recursive>
 8006472:	0028      	movs	r0, r5
 8006474:	bd70      	pop	{r4, r5, r6, pc}
 8006476:	4b1b      	ldr	r3, [pc, #108]	; (80064e4 <_puts_r+0xdc>)
 8006478:	429c      	cmp	r4, r3
 800647a:	d101      	bne.n	8006480 <_puts_r+0x78>
 800647c:	68ac      	ldr	r4, [r5, #8]
 800647e:	e7d8      	b.n	8006432 <_puts_r+0x2a>
 8006480:	4b19      	ldr	r3, [pc, #100]	; (80064e8 <_puts_r+0xe0>)
 8006482:	429c      	cmp	r4, r3
 8006484:	d1d5      	bne.n	8006432 <_puts_r+0x2a>
 8006486:	68ec      	ldr	r4, [r5, #12]
 8006488:	e7d3      	b.n	8006432 <_puts_r+0x2a>
 800648a:	3601      	adds	r6, #1
 800648c:	60a3      	str	r3, [r4, #8]
 800648e:	2b00      	cmp	r3, #0
 8006490:	da04      	bge.n	800649c <_puts_r+0x94>
 8006492:	69a2      	ldr	r2, [r4, #24]
 8006494:	429a      	cmp	r2, r3
 8006496:	dc16      	bgt.n	80064c6 <_puts_r+0xbe>
 8006498:	290a      	cmp	r1, #10
 800649a:	d014      	beq.n	80064c6 <_puts_r+0xbe>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	1c5a      	adds	r2, r3, #1
 80064a0:	6022      	str	r2, [r4, #0]
 80064a2:	7019      	strb	r1, [r3, #0]
 80064a4:	68a3      	ldr	r3, [r4, #8]
 80064a6:	7831      	ldrb	r1, [r6, #0]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	2900      	cmp	r1, #0
 80064ac:	d1ed      	bne.n	800648a <_puts_r+0x82>
 80064ae:	60a3      	str	r3, [r4, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da0f      	bge.n	80064d4 <_puts_r+0xcc>
 80064b4:	0028      	movs	r0, r5
 80064b6:	0022      	movs	r2, r4
 80064b8:	310a      	adds	r1, #10
 80064ba:	f000 f821 	bl	8006500 <__swbuf_r>
 80064be:	250a      	movs	r5, #10
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d1cd      	bne.n	8006460 <_puts_r+0x58>
 80064c4:	e7ca      	b.n	800645c <_puts_r+0x54>
 80064c6:	0022      	movs	r2, r4
 80064c8:	0028      	movs	r0, r5
 80064ca:	f000 f819 	bl	8006500 <__swbuf_r>
 80064ce:	1c43      	adds	r3, r0, #1
 80064d0:	d1e8      	bne.n	80064a4 <_puts_r+0x9c>
 80064d2:	e7c3      	b.n	800645c <_puts_r+0x54>
 80064d4:	250a      	movs	r5, #10
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	6022      	str	r2, [r4, #0]
 80064dc:	701d      	strb	r5, [r3, #0]
 80064de:	e7bf      	b.n	8006460 <_puts_r+0x58>
 80064e0:	08006f54 	.word	0x08006f54
 80064e4:	08006f74 	.word	0x08006f74
 80064e8:	08006f34 	.word	0x08006f34

080064ec <puts>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4b03      	ldr	r3, [pc, #12]	; (80064fc <puts+0x10>)
 80064f0:	0001      	movs	r1, r0
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	f7ff ff88 	bl	8006408 <_puts_r>
 80064f8:	bd10      	pop	{r4, pc}
 80064fa:	46c0      	nop			; (mov r8, r8)
 80064fc:	2000001c 	.word	0x2000001c

08006500 <__swbuf_r>:
 8006500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006502:	0005      	movs	r5, r0
 8006504:	000e      	movs	r6, r1
 8006506:	0014      	movs	r4, r2
 8006508:	2800      	cmp	r0, #0
 800650a:	d004      	beq.n	8006516 <__swbuf_r+0x16>
 800650c:	6983      	ldr	r3, [r0, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <__swbuf_r+0x16>
 8006512:	f000 f9f1 	bl	80068f8 <__sinit>
 8006516:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <__swbuf_r+0xa0>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d12e      	bne.n	800657a <__swbuf_r+0x7a>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	69a3      	ldr	r3, [r4, #24]
 8006520:	60a3      	str	r3, [r4, #8]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	071b      	lsls	r3, r3, #28
 8006526:	d532      	bpl.n	800658e <__swbuf_r+0x8e>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d02f      	beq.n	800658e <__swbuf_r+0x8e>
 800652e:	6823      	ldr	r3, [r4, #0]
 8006530:	6922      	ldr	r2, [r4, #16]
 8006532:	b2f7      	uxtb	r7, r6
 8006534:	1a98      	subs	r0, r3, r2
 8006536:	6963      	ldr	r3, [r4, #20]
 8006538:	b2f6      	uxtb	r6, r6
 800653a:	4283      	cmp	r3, r0
 800653c:	dc05      	bgt.n	800654a <__swbuf_r+0x4a>
 800653e:	0021      	movs	r1, r4
 8006540:	0028      	movs	r0, r5
 8006542:	f000 f937 	bl	80067b4 <_fflush_r>
 8006546:	2800      	cmp	r0, #0
 8006548:	d127      	bne.n	800659a <__swbuf_r+0x9a>
 800654a:	68a3      	ldr	r3, [r4, #8]
 800654c:	3001      	adds	r0, #1
 800654e:	3b01      	subs	r3, #1
 8006550:	60a3      	str	r3, [r4, #8]
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	6022      	str	r2, [r4, #0]
 8006558:	701f      	strb	r7, [r3, #0]
 800655a:	6963      	ldr	r3, [r4, #20]
 800655c:	4283      	cmp	r3, r0
 800655e:	d004      	beq.n	800656a <__swbuf_r+0x6a>
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d507      	bpl.n	8006576 <__swbuf_r+0x76>
 8006566:	2e0a      	cmp	r6, #10
 8006568:	d105      	bne.n	8006576 <__swbuf_r+0x76>
 800656a:	0021      	movs	r1, r4
 800656c:	0028      	movs	r0, r5
 800656e:	f000 f921 	bl	80067b4 <_fflush_r>
 8006572:	2800      	cmp	r0, #0
 8006574:	d111      	bne.n	800659a <__swbuf_r+0x9a>
 8006576:	0030      	movs	r0, r6
 8006578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800657a:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <__swbuf_r+0xa4>)
 800657c:	429c      	cmp	r4, r3
 800657e:	d101      	bne.n	8006584 <__swbuf_r+0x84>
 8006580:	68ac      	ldr	r4, [r5, #8]
 8006582:	e7cc      	b.n	800651e <__swbuf_r+0x1e>
 8006584:	4b08      	ldr	r3, [pc, #32]	; (80065a8 <__swbuf_r+0xa8>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d1c9      	bne.n	800651e <__swbuf_r+0x1e>
 800658a:	68ec      	ldr	r4, [r5, #12]
 800658c:	e7c7      	b.n	800651e <__swbuf_r+0x1e>
 800658e:	0021      	movs	r1, r4
 8006590:	0028      	movs	r0, r5
 8006592:	f000 f80b 	bl	80065ac <__swsetup_r>
 8006596:	2800      	cmp	r0, #0
 8006598:	d0c9      	beq.n	800652e <__swbuf_r+0x2e>
 800659a:	2601      	movs	r6, #1
 800659c:	4276      	negs	r6, r6
 800659e:	e7ea      	b.n	8006576 <__swbuf_r+0x76>
 80065a0:	08006f54 	.word	0x08006f54
 80065a4:	08006f74 	.word	0x08006f74
 80065a8:	08006f34 	.word	0x08006f34

080065ac <__swsetup_r>:
 80065ac:	4b37      	ldr	r3, [pc, #220]	; (800668c <__swsetup_r+0xe0>)
 80065ae:	b570      	push	{r4, r5, r6, lr}
 80065b0:	681d      	ldr	r5, [r3, #0]
 80065b2:	0006      	movs	r6, r0
 80065b4:	000c      	movs	r4, r1
 80065b6:	2d00      	cmp	r5, #0
 80065b8:	d005      	beq.n	80065c6 <__swsetup_r+0x1a>
 80065ba:	69ab      	ldr	r3, [r5, #24]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d102      	bne.n	80065c6 <__swsetup_r+0x1a>
 80065c0:	0028      	movs	r0, r5
 80065c2:	f000 f999 	bl	80068f8 <__sinit>
 80065c6:	4b32      	ldr	r3, [pc, #200]	; (8006690 <__swsetup_r+0xe4>)
 80065c8:	429c      	cmp	r4, r3
 80065ca:	d10f      	bne.n	80065ec <__swsetup_r+0x40>
 80065cc:	686c      	ldr	r4, [r5, #4]
 80065ce:	230c      	movs	r3, #12
 80065d0:	5ee2      	ldrsh	r2, [r4, r3]
 80065d2:	b293      	uxth	r3, r2
 80065d4:	0711      	lsls	r1, r2, #28
 80065d6:	d42d      	bmi.n	8006634 <__swsetup_r+0x88>
 80065d8:	06d9      	lsls	r1, r3, #27
 80065da:	d411      	bmi.n	8006600 <__swsetup_r+0x54>
 80065dc:	2309      	movs	r3, #9
 80065de:	2001      	movs	r0, #1
 80065e0:	6033      	str	r3, [r6, #0]
 80065e2:	3337      	adds	r3, #55	; 0x37
 80065e4:	4313      	orrs	r3, r2
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	4240      	negs	r0, r0
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	4b29      	ldr	r3, [pc, #164]	; (8006694 <__swsetup_r+0xe8>)
 80065ee:	429c      	cmp	r4, r3
 80065f0:	d101      	bne.n	80065f6 <__swsetup_r+0x4a>
 80065f2:	68ac      	ldr	r4, [r5, #8]
 80065f4:	e7eb      	b.n	80065ce <__swsetup_r+0x22>
 80065f6:	4b28      	ldr	r3, [pc, #160]	; (8006698 <__swsetup_r+0xec>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d1e8      	bne.n	80065ce <__swsetup_r+0x22>
 80065fc:	68ec      	ldr	r4, [r5, #12]
 80065fe:	e7e6      	b.n	80065ce <__swsetup_r+0x22>
 8006600:	075b      	lsls	r3, r3, #29
 8006602:	d513      	bpl.n	800662c <__swsetup_r+0x80>
 8006604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006606:	2900      	cmp	r1, #0
 8006608:	d008      	beq.n	800661c <__swsetup_r+0x70>
 800660a:	0023      	movs	r3, r4
 800660c:	3344      	adds	r3, #68	; 0x44
 800660e:	4299      	cmp	r1, r3
 8006610:	d002      	beq.n	8006618 <__swsetup_r+0x6c>
 8006612:	0030      	movs	r0, r6
 8006614:	f000 fa80 	bl	8006b18 <_free_r>
 8006618:	2300      	movs	r3, #0
 800661a:	6363      	str	r3, [r4, #52]	; 0x34
 800661c:	2224      	movs	r2, #36	; 0x24
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	4393      	bics	r3, r2
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	2300      	movs	r3, #0
 8006626:	6063      	str	r3, [r4, #4]
 8006628:	6923      	ldr	r3, [r4, #16]
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	2308      	movs	r3, #8
 800662e:	89a2      	ldrh	r2, [r4, #12]
 8006630:	4313      	orrs	r3, r2
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	6923      	ldr	r3, [r4, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <__swsetup_r+0xa6>
 800663a:	21a0      	movs	r1, #160	; 0xa0
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	0089      	lsls	r1, r1, #2
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	400b      	ands	r3, r1
 8006646:	4293      	cmp	r3, r2
 8006648:	d003      	beq.n	8006652 <__swsetup_r+0xa6>
 800664a:	0021      	movs	r1, r4
 800664c:	0030      	movs	r0, r6
 800664e:	f000 fa1f 	bl	8006a90 <__smakebuf_r>
 8006652:	220c      	movs	r2, #12
 8006654:	5ea3      	ldrsh	r3, [r4, r2]
 8006656:	2001      	movs	r0, #1
 8006658:	001a      	movs	r2, r3
 800665a:	b299      	uxth	r1, r3
 800665c:	4002      	ands	r2, r0
 800665e:	4203      	tst	r3, r0
 8006660:	d00f      	beq.n	8006682 <__swsetup_r+0xd6>
 8006662:	2200      	movs	r2, #0
 8006664:	60a2      	str	r2, [r4, #8]
 8006666:	6962      	ldr	r2, [r4, #20]
 8006668:	4252      	negs	r2, r2
 800666a:	61a2      	str	r2, [r4, #24]
 800666c:	2000      	movs	r0, #0
 800666e:	6922      	ldr	r2, [r4, #16]
 8006670:	4282      	cmp	r2, r0
 8006672:	d1ba      	bne.n	80065ea <__swsetup_r+0x3e>
 8006674:	060a      	lsls	r2, r1, #24
 8006676:	d5b8      	bpl.n	80065ea <__swsetup_r+0x3e>
 8006678:	2240      	movs	r2, #64	; 0x40
 800667a:	4313      	orrs	r3, r2
 800667c:	81a3      	strh	r3, [r4, #12]
 800667e:	3801      	subs	r0, #1
 8006680:	e7b3      	b.n	80065ea <__swsetup_r+0x3e>
 8006682:	0788      	lsls	r0, r1, #30
 8006684:	d400      	bmi.n	8006688 <__swsetup_r+0xdc>
 8006686:	6962      	ldr	r2, [r4, #20]
 8006688:	60a2      	str	r2, [r4, #8]
 800668a:	e7ef      	b.n	800666c <__swsetup_r+0xc0>
 800668c:	2000001c 	.word	0x2000001c
 8006690:	08006f54 	.word	0x08006f54
 8006694:	08006f74 	.word	0x08006f74
 8006698:	08006f34 	.word	0x08006f34

0800669c <__sflush_r>:
 800669c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800669e:	898b      	ldrh	r3, [r1, #12]
 80066a0:	0005      	movs	r5, r0
 80066a2:	000c      	movs	r4, r1
 80066a4:	071a      	lsls	r2, r3, #28
 80066a6:	d45f      	bmi.n	8006768 <__sflush_r+0xcc>
 80066a8:	684a      	ldr	r2, [r1, #4]
 80066aa:	2a00      	cmp	r2, #0
 80066ac:	dc04      	bgt.n	80066b8 <__sflush_r+0x1c>
 80066ae:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80066b0:	2a00      	cmp	r2, #0
 80066b2:	dc01      	bgt.n	80066b8 <__sflush_r+0x1c>
 80066b4:	2000      	movs	r0, #0
 80066b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066b8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	d0fa      	beq.n	80066b4 <__sflush_r+0x18>
 80066be:	2200      	movs	r2, #0
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	682e      	ldr	r6, [r5, #0]
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	001a      	movs	r2, r3
 80066c8:	0149      	lsls	r1, r1, #5
 80066ca:	400a      	ands	r2, r1
 80066cc:	420b      	tst	r3, r1
 80066ce:	d034      	beq.n	800673a <__sflush_r+0x9e>
 80066d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066d2:	89a3      	ldrh	r3, [r4, #12]
 80066d4:	075b      	lsls	r3, r3, #29
 80066d6:	d506      	bpl.n	80066e6 <__sflush_r+0x4a>
 80066d8:	6863      	ldr	r3, [r4, #4]
 80066da:	1ac0      	subs	r0, r0, r3
 80066dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <__sflush_r+0x4a>
 80066e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066e4:	1ac0      	subs	r0, r0, r3
 80066e6:	0002      	movs	r2, r0
 80066e8:	6a21      	ldr	r1, [r4, #32]
 80066ea:	2300      	movs	r3, #0
 80066ec:	0028      	movs	r0, r5
 80066ee:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80066f0:	47b8      	blx	r7
 80066f2:	89a1      	ldrh	r1, [r4, #12]
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d106      	bne.n	8006706 <__sflush_r+0x6a>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	2b1d      	cmp	r3, #29
 80066fc:	d831      	bhi.n	8006762 <__sflush_r+0xc6>
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <__sflush_r+0x114>)
 8006700:	40da      	lsrs	r2, r3
 8006702:	07d3      	lsls	r3, r2, #31
 8006704:	d52d      	bpl.n	8006762 <__sflush_r+0xc6>
 8006706:	2300      	movs	r3, #0
 8006708:	6063      	str	r3, [r4, #4]
 800670a:	6923      	ldr	r3, [r4, #16]
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	04cb      	lsls	r3, r1, #19
 8006710:	d505      	bpl.n	800671e <__sflush_r+0x82>
 8006712:	1c43      	adds	r3, r0, #1
 8006714:	d102      	bne.n	800671c <__sflush_r+0x80>
 8006716:	682b      	ldr	r3, [r5, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d100      	bne.n	800671e <__sflush_r+0x82>
 800671c:	6560      	str	r0, [r4, #84]	; 0x54
 800671e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006720:	602e      	str	r6, [r5, #0]
 8006722:	2900      	cmp	r1, #0
 8006724:	d0c6      	beq.n	80066b4 <__sflush_r+0x18>
 8006726:	0023      	movs	r3, r4
 8006728:	3344      	adds	r3, #68	; 0x44
 800672a:	4299      	cmp	r1, r3
 800672c:	d002      	beq.n	8006734 <__sflush_r+0x98>
 800672e:	0028      	movs	r0, r5
 8006730:	f000 f9f2 	bl	8006b18 <_free_r>
 8006734:	2000      	movs	r0, #0
 8006736:	6360      	str	r0, [r4, #52]	; 0x34
 8006738:	e7bd      	b.n	80066b6 <__sflush_r+0x1a>
 800673a:	2301      	movs	r3, #1
 800673c:	0028      	movs	r0, r5
 800673e:	6a21      	ldr	r1, [r4, #32]
 8006740:	47b8      	blx	r7
 8006742:	1c43      	adds	r3, r0, #1
 8006744:	d1c5      	bne.n	80066d2 <__sflush_r+0x36>
 8006746:	682b      	ldr	r3, [r5, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0c2      	beq.n	80066d2 <__sflush_r+0x36>
 800674c:	2b1d      	cmp	r3, #29
 800674e:	d001      	beq.n	8006754 <__sflush_r+0xb8>
 8006750:	2b16      	cmp	r3, #22
 8006752:	d101      	bne.n	8006758 <__sflush_r+0xbc>
 8006754:	602e      	str	r6, [r5, #0]
 8006756:	e7ad      	b.n	80066b4 <__sflush_r+0x18>
 8006758:	2340      	movs	r3, #64	; 0x40
 800675a:	89a2      	ldrh	r2, [r4, #12]
 800675c:	4313      	orrs	r3, r2
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	e7a9      	b.n	80066b6 <__sflush_r+0x1a>
 8006762:	2340      	movs	r3, #64	; 0x40
 8006764:	430b      	orrs	r3, r1
 8006766:	e7fa      	b.n	800675e <__sflush_r+0xc2>
 8006768:	690f      	ldr	r7, [r1, #16]
 800676a:	2f00      	cmp	r7, #0
 800676c:	d0a2      	beq.n	80066b4 <__sflush_r+0x18>
 800676e:	680a      	ldr	r2, [r1, #0]
 8006770:	600f      	str	r7, [r1, #0]
 8006772:	1bd2      	subs	r2, r2, r7
 8006774:	9201      	str	r2, [sp, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	d100      	bne.n	800677e <__sflush_r+0xe2>
 800677c:	694a      	ldr	r2, [r1, #20]
 800677e:	60a2      	str	r2, [r4, #8]
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	2b00      	cmp	r3, #0
 8006784:	dc00      	bgt.n	8006788 <__sflush_r+0xec>
 8006786:	e795      	b.n	80066b4 <__sflush_r+0x18>
 8006788:	003a      	movs	r2, r7
 800678a:	0028      	movs	r0, r5
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	6a21      	ldr	r1, [r4, #32]
 8006790:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006792:	47b0      	blx	r6
 8006794:	2800      	cmp	r0, #0
 8006796:	dc06      	bgt.n	80067a6 <__sflush_r+0x10a>
 8006798:	2340      	movs	r3, #64	; 0x40
 800679a:	2001      	movs	r0, #1
 800679c:	89a2      	ldrh	r2, [r4, #12]
 800679e:	4240      	negs	r0, r0
 80067a0:	4313      	orrs	r3, r2
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	e787      	b.n	80066b6 <__sflush_r+0x1a>
 80067a6:	9b01      	ldr	r3, [sp, #4]
 80067a8:	183f      	adds	r7, r7, r0
 80067aa:	1a1b      	subs	r3, r3, r0
 80067ac:	9301      	str	r3, [sp, #4]
 80067ae:	e7e7      	b.n	8006780 <__sflush_r+0xe4>
 80067b0:	20400001 	.word	0x20400001

080067b4 <_fflush_r>:
 80067b4:	690b      	ldr	r3, [r1, #16]
 80067b6:	b570      	push	{r4, r5, r6, lr}
 80067b8:	0005      	movs	r5, r0
 80067ba:	000c      	movs	r4, r1
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d102      	bne.n	80067c6 <_fflush_r+0x12>
 80067c0:	2500      	movs	r5, #0
 80067c2:	0028      	movs	r0, r5
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
 80067c6:	2800      	cmp	r0, #0
 80067c8:	d004      	beq.n	80067d4 <_fflush_r+0x20>
 80067ca:	6983      	ldr	r3, [r0, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <_fflush_r+0x20>
 80067d0:	f000 f892 	bl	80068f8 <__sinit>
 80067d4:	4b14      	ldr	r3, [pc, #80]	; (8006828 <_fflush_r+0x74>)
 80067d6:	429c      	cmp	r4, r3
 80067d8:	d11b      	bne.n	8006812 <_fflush_r+0x5e>
 80067da:	686c      	ldr	r4, [r5, #4]
 80067dc:	220c      	movs	r2, #12
 80067de:	5ea3      	ldrsh	r3, [r4, r2]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0ed      	beq.n	80067c0 <_fflush_r+0xc>
 80067e4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067e6:	07d2      	lsls	r2, r2, #31
 80067e8:	d404      	bmi.n	80067f4 <_fflush_r+0x40>
 80067ea:	059b      	lsls	r3, r3, #22
 80067ec:	d402      	bmi.n	80067f4 <_fflush_r+0x40>
 80067ee:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067f0:	f000 f923 	bl	8006a3a <__retarget_lock_acquire_recursive>
 80067f4:	0028      	movs	r0, r5
 80067f6:	0021      	movs	r1, r4
 80067f8:	f7ff ff50 	bl	800669c <__sflush_r>
 80067fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067fe:	0005      	movs	r5, r0
 8006800:	07db      	lsls	r3, r3, #31
 8006802:	d4de      	bmi.n	80067c2 <_fflush_r+0xe>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	059b      	lsls	r3, r3, #22
 8006808:	d4db      	bmi.n	80067c2 <_fflush_r+0xe>
 800680a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800680c:	f000 f916 	bl	8006a3c <__retarget_lock_release_recursive>
 8006810:	e7d7      	b.n	80067c2 <_fflush_r+0xe>
 8006812:	4b06      	ldr	r3, [pc, #24]	; (800682c <_fflush_r+0x78>)
 8006814:	429c      	cmp	r4, r3
 8006816:	d101      	bne.n	800681c <_fflush_r+0x68>
 8006818:	68ac      	ldr	r4, [r5, #8]
 800681a:	e7df      	b.n	80067dc <_fflush_r+0x28>
 800681c:	4b04      	ldr	r3, [pc, #16]	; (8006830 <_fflush_r+0x7c>)
 800681e:	429c      	cmp	r4, r3
 8006820:	d1dc      	bne.n	80067dc <_fflush_r+0x28>
 8006822:	68ec      	ldr	r4, [r5, #12]
 8006824:	e7da      	b.n	80067dc <_fflush_r+0x28>
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	08006f54 	.word	0x08006f54
 800682c:	08006f74 	.word	0x08006f74
 8006830:	08006f34 	.word	0x08006f34

08006834 <std>:
 8006834:	2300      	movs	r3, #0
 8006836:	b510      	push	{r4, lr}
 8006838:	0004      	movs	r4, r0
 800683a:	6003      	str	r3, [r0, #0]
 800683c:	6043      	str	r3, [r0, #4]
 800683e:	6083      	str	r3, [r0, #8]
 8006840:	8181      	strh	r1, [r0, #12]
 8006842:	6643      	str	r3, [r0, #100]	; 0x64
 8006844:	0019      	movs	r1, r3
 8006846:	81c2      	strh	r2, [r0, #14]
 8006848:	6103      	str	r3, [r0, #16]
 800684a:	6143      	str	r3, [r0, #20]
 800684c:	6183      	str	r3, [r0, #24]
 800684e:	2208      	movs	r2, #8
 8006850:	305c      	adds	r0, #92	; 0x5c
 8006852:	f7ff fdd1 	bl	80063f8 <memset>
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x38>)
 8006858:	6263      	str	r3, [r4, #36]	; 0x24
 800685a:	4b05      	ldr	r3, [pc, #20]	; (8006870 <std+0x3c>)
 800685c:	6224      	str	r4, [r4, #32]
 800685e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006860:	4b04      	ldr	r3, [pc, #16]	; (8006874 <std+0x40>)
 8006862:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006864:	4b04      	ldr	r3, [pc, #16]	; (8006878 <std+0x44>)
 8006866:	6323      	str	r3, [r4, #48]	; 0x30
 8006868:	bd10      	pop	{r4, pc}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	08006c8d 	.word	0x08006c8d
 8006870:	08006cb5 	.word	0x08006cb5
 8006874:	08006ced 	.word	0x08006ced
 8006878:	08006d19 	.word	0x08006d19

0800687c <_cleanup_r>:
 800687c:	b510      	push	{r4, lr}
 800687e:	4902      	ldr	r1, [pc, #8]	; (8006888 <_cleanup_r+0xc>)
 8006880:	f000 f8ba 	bl	80069f8 <_fwalk_reent>
 8006884:	bd10      	pop	{r4, pc}
 8006886:	46c0      	nop			; (mov r8, r8)
 8006888:	080067b5 	.word	0x080067b5

0800688c <__sfmoreglue>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	2568      	movs	r5, #104	; 0x68
 8006890:	1e4a      	subs	r2, r1, #1
 8006892:	4355      	muls	r5, r2
 8006894:	000e      	movs	r6, r1
 8006896:	0029      	movs	r1, r5
 8006898:	3174      	adds	r1, #116	; 0x74
 800689a:	f000 f987 	bl	8006bac <_malloc_r>
 800689e:	1e04      	subs	r4, r0, #0
 80068a0:	d008      	beq.n	80068b4 <__sfmoreglue+0x28>
 80068a2:	2100      	movs	r1, #0
 80068a4:	002a      	movs	r2, r5
 80068a6:	6001      	str	r1, [r0, #0]
 80068a8:	6046      	str	r6, [r0, #4]
 80068aa:	300c      	adds	r0, #12
 80068ac:	60a0      	str	r0, [r4, #8]
 80068ae:	3268      	adds	r2, #104	; 0x68
 80068b0:	f7ff fda2 	bl	80063f8 <memset>
 80068b4:	0020      	movs	r0, r4
 80068b6:	bd70      	pop	{r4, r5, r6, pc}

080068b8 <__sfp_lock_acquire>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	4802      	ldr	r0, [pc, #8]	; (80068c4 <__sfp_lock_acquire+0xc>)
 80068bc:	f000 f8bd 	bl	8006a3a <__retarget_lock_acquire_recursive>
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	200014e8 	.word	0x200014e8

080068c8 <__sfp_lock_release>:
 80068c8:	b510      	push	{r4, lr}
 80068ca:	4802      	ldr	r0, [pc, #8]	; (80068d4 <__sfp_lock_release+0xc>)
 80068cc:	f000 f8b6 	bl	8006a3c <__retarget_lock_release_recursive>
 80068d0:	bd10      	pop	{r4, pc}
 80068d2:	46c0      	nop			; (mov r8, r8)
 80068d4:	200014e8 	.word	0x200014e8

080068d8 <__sinit_lock_acquire>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4802      	ldr	r0, [pc, #8]	; (80068e4 <__sinit_lock_acquire+0xc>)
 80068dc:	f000 f8ad 	bl	8006a3a <__retarget_lock_acquire_recursive>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	200014e3 	.word	0x200014e3

080068e8 <__sinit_lock_release>:
 80068e8:	b510      	push	{r4, lr}
 80068ea:	4802      	ldr	r0, [pc, #8]	; (80068f4 <__sinit_lock_release+0xc>)
 80068ec:	f000 f8a6 	bl	8006a3c <__retarget_lock_release_recursive>
 80068f0:	bd10      	pop	{r4, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	200014e3 	.word	0x200014e3

080068f8 <__sinit>:
 80068f8:	b513      	push	{r0, r1, r4, lr}
 80068fa:	0004      	movs	r4, r0
 80068fc:	f7ff ffec 	bl	80068d8 <__sinit_lock_acquire>
 8006900:	69a3      	ldr	r3, [r4, #24]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <__sinit+0x14>
 8006906:	f7ff ffef 	bl	80068e8 <__sinit_lock_release>
 800690a:	bd13      	pop	{r0, r1, r4, pc}
 800690c:	64a3      	str	r3, [r4, #72]	; 0x48
 800690e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006910:	6523      	str	r3, [r4, #80]	; 0x50
 8006912:	4b13      	ldr	r3, [pc, #76]	; (8006960 <__sinit+0x68>)
 8006914:	4a13      	ldr	r2, [pc, #76]	; (8006964 <__sinit+0x6c>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	62a2      	str	r2, [r4, #40]	; 0x28
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	42a3      	cmp	r3, r4
 800691e:	d101      	bne.n	8006924 <__sinit+0x2c>
 8006920:	2301      	movs	r3, #1
 8006922:	61a3      	str	r3, [r4, #24]
 8006924:	0020      	movs	r0, r4
 8006926:	f000 f81f 	bl	8006968 <__sfp>
 800692a:	6060      	str	r0, [r4, #4]
 800692c:	0020      	movs	r0, r4
 800692e:	f000 f81b 	bl	8006968 <__sfp>
 8006932:	60a0      	str	r0, [r4, #8]
 8006934:	0020      	movs	r0, r4
 8006936:	f000 f817 	bl	8006968 <__sfp>
 800693a:	2200      	movs	r2, #0
 800693c:	2104      	movs	r1, #4
 800693e:	60e0      	str	r0, [r4, #12]
 8006940:	6860      	ldr	r0, [r4, #4]
 8006942:	f7ff ff77 	bl	8006834 <std>
 8006946:	2201      	movs	r2, #1
 8006948:	2109      	movs	r1, #9
 800694a:	68a0      	ldr	r0, [r4, #8]
 800694c:	f7ff ff72 	bl	8006834 <std>
 8006950:	2202      	movs	r2, #2
 8006952:	2112      	movs	r1, #18
 8006954:	68e0      	ldr	r0, [r4, #12]
 8006956:	f7ff ff6d 	bl	8006834 <std>
 800695a:	2301      	movs	r3, #1
 800695c:	61a3      	str	r3, [r4, #24]
 800695e:	e7d2      	b.n	8006906 <__sinit+0xe>
 8006960:	08006f30 	.word	0x08006f30
 8006964:	0800687d 	.word	0x0800687d

08006968 <__sfp>:
 8006968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696a:	0007      	movs	r7, r0
 800696c:	f7ff ffa4 	bl	80068b8 <__sfp_lock_acquire>
 8006970:	4b1f      	ldr	r3, [pc, #124]	; (80069f0 <__sfp+0x88>)
 8006972:	681e      	ldr	r6, [r3, #0]
 8006974:	69b3      	ldr	r3, [r6, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <__sfp+0x18>
 800697a:	0030      	movs	r0, r6
 800697c:	f7ff ffbc 	bl	80068f8 <__sinit>
 8006980:	3648      	adds	r6, #72	; 0x48
 8006982:	68b4      	ldr	r4, [r6, #8]
 8006984:	6873      	ldr	r3, [r6, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	d504      	bpl.n	8006994 <__sfp+0x2c>
 800698a:	6833      	ldr	r3, [r6, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d022      	beq.n	80069d6 <__sfp+0x6e>
 8006990:	6836      	ldr	r6, [r6, #0]
 8006992:	e7f6      	b.n	8006982 <__sfp+0x1a>
 8006994:	220c      	movs	r2, #12
 8006996:	5ea5      	ldrsh	r5, [r4, r2]
 8006998:	2d00      	cmp	r5, #0
 800699a:	d11a      	bne.n	80069d2 <__sfp+0x6a>
 800699c:	0020      	movs	r0, r4
 800699e:	4b15      	ldr	r3, [pc, #84]	; (80069f4 <__sfp+0x8c>)
 80069a0:	3058      	adds	r0, #88	; 0x58
 80069a2:	60e3      	str	r3, [r4, #12]
 80069a4:	6665      	str	r5, [r4, #100]	; 0x64
 80069a6:	f000 f847 	bl	8006a38 <__retarget_lock_init_recursive>
 80069aa:	f7ff ff8d 	bl	80068c8 <__sfp_lock_release>
 80069ae:	0020      	movs	r0, r4
 80069b0:	2208      	movs	r2, #8
 80069b2:	0029      	movs	r1, r5
 80069b4:	6025      	str	r5, [r4, #0]
 80069b6:	60a5      	str	r5, [r4, #8]
 80069b8:	6065      	str	r5, [r4, #4]
 80069ba:	6125      	str	r5, [r4, #16]
 80069bc:	6165      	str	r5, [r4, #20]
 80069be:	61a5      	str	r5, [r4, #24]
 80069c0:	305c      	adds	r0, #92	; 0x5c
 80069c2:	f7ff fd19 	bl	80063f8 <memset>
 80069c6:	6365      	str	r5, [r4, #52]	; 0x34
 80069c8:	63a5      	str	r5, [r4, #56]	; 0x38
 80069ca:	64a5      	str	r5, [r4, #72]	; 0x48
 80069cc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80069ce:	0020      	movs	r0, r4
 80069d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069d2:	3468      	adds	r4, #104	; 0x68
 80069d4:	e7d7      	b.n	8006986 <__sfp+0x1e>
 80069d6:	2104      	movs	r1, #4
 80069d8:	0038      	movs	r0, r7
 80069da:	f7ff ff57 	bl	800688c <__sfmoreglue>
 80069de:	1e04      	subs	r4, r0, #0
 80069e0:	6030      	str	r0, [r6, #0]
 80069e2:	d1d5      	bne.n	8006990 <__sfp+0x28>
 80069e4:	f7ff ff70 	bl	80068c8 <__sfp_lock_release>
 80069e8:	230c      	movs	r3, #12
 80069ea:	603b      	str	r3, [r7, #0]
 80069ec:	e7ef      	b.n	80069ce <__sfp+0x66>
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	08006f30 	.word	0x08006f30
 80069f4:	ffff0001 	.word	0xffff0001

080069f8 <_fwalk_reent>:
 80069f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069fa:	0004      	movs	r4, r0
 80069fc:	0006      	movs	r6, r0
 80069fe:	2700      	movs	r7, #0
 8006a00:	9101      	str	r1, [sp, #4]
 8006a02:	3448      	adds	r4, #72	; 0x48
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	68a5      	ldr	r5, [r4, #8]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	d504      	bpl.n	8006a1c <_fwalk_reent+0x24>
 8006a12:	6824      	ldr	r4, [r4, #0]
 8006a14:	2c00      	cmp	r4, #0
 8006a16:	d1f5      	bne.n	8006a04 <_fwalk_reent+0xc>
 8006a18:	0038      	movs	r0, r7
 8006a1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a1c:	89ab      	ldrh	r3, [r5, #12]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d908      	bls.n	8006a34 <_fwalk_reent+0x3c>
 8006a22:	220e      	movs	r2, #14
 8006a24:	5eab      	ldrsh	r3, [r5, r2]
 8006a26:	3301      	adds	r3, #1
 8006a28:	d004      	beq.n	8006a34 <_fwalk_reent+0x3c>
 8006a2a:	0029      	movs	r1, r5
 8006a2c:	0030      	movs	r0, r6
 8006a2e:	9b01      	ldr	r3, [sp, #4]
 8006a30:	4798      	blx	r3
 8006a32:	4307      	orrs	r7, r0
 8006a34:	3568      	adds	r5, #104	; 0x68
 8006a36:	e7e8      	b.n	8006a0a <_fwalk_reent+0x12>

08006a38 <__retarget_lock_init_recursive>:
 8006a38:	4770      	bx	lr

08006a3a <__retarget_lock_acquire_recursive>:
 8006a3a:	4770      	bx	lr

08006a3c <__retarget_lock_release_recursive>:
 8006a3c:	4770      	bx	lr
	...

08006a40 <__swhatbuf_r>:
 8006a40:	b570      	push	{r4, r5, r6, lr}
 8006a42:	000e      	movs	r6, r1
 8006a44:	001d      	movs	r5, r3
 8006a46:	230e      	movs	r3, #14
 8006a48:	5ec9      	ldrsh	r1, [r1, r3]
 8006a4a:	0014      	movs	r4, r2
 8006a4c:	b096      	sub	sp, #88	; 0x58
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	da07      	bge.n	8006a62 <__swhatbuf_r+0x22>
 8006a52:	2300      	movs	r3, #0
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	89b3      	ldrh	r3, [r6, #12]
 8006a58:	061b      	lsls	r3, r3, #24
 8006a5a:	d411      	bmi.n	8006a80 <__swhatbuf_r+0x40>
 8006a5c:	2380      	movs	r3, #128	; 0x80
 8006a5e:	00db      	lsls	r3, r3, #3
 8006a60:	e00f      	b.n	8006a82 <__swhatbuf_r+0x42>
 8006a62:	466a      	mov	r2, sp
 8006a64:	f000 f984 	bl	8006d70 <_fstat_r>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	dbf2      	blt.n	8006a52 <__swhatbuf_r+0x12>
 8006a6c:	23f0      	movs	r3, #240	; 0xf0
 8006a6e:	9901      	ldr	r1, [sp, #4]
 8006a70:	021b      	lsls	r3, r3, #8
 8006a72:	4019      	ands	r1, r3
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <__swhatbuf_r+0x4c>)
 8006a76:	18c9      	adds	r1, r1, r3
 8006a78:	424b      	negs	r3, r1
 8006a7a:	4159      	adcs	r1, r3
 8006a7c:	6029      	str	r1, [r5, #0]
 8006a7e:	e7ed      	b.n	8006a5c <__swhatbuf_r+0x1c>
 8006a80:	2340      	movs	r3, #64	; 0x40
 8006a82:	2000      	movs	r0, #0
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	b016      	add	sp, #88	; 0x58
 8006a88:	bd70      	pop	{r4, r5, r6, pc}
 8006a8a:	46c0      	nop			; (mov r8, r8)
 8006a8c:	ffffe000 	.word	0xffffe000

08006a90 <__smakebuf_r>:
 8006a90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a92:	2602      	movs	r6, #2
 8006a94:	898b      	ldrh	r3, [r1, #12]
 8006a96:	0005      	movs	r5, r0
 8006a98:	000c      	movs	r4, r1
 8006a9a:	4233      	tst	r3, r6
 8006a9c:	d006      	beq.n	8006aac <__smakebuf_r+0x1c>
 8006a9e:	0023      	movs	r3, r4
 8006aa0:	3347      	adds	r3, #71	; 0x47
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	6123      	str	r3, [r4, #16]
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006aac:	466a      	mov	r2, sp
 8006aae:	ab01      	add	r3, sp, #4
 8006ab0:	f7ff ffc6 	bl	8006a40 <__swhatbuf_r>
 8006ab4:	9900      	ldr	r1, [sp, #0]
 8006ab6:	0007      	movs	r7, r0
 8006ab8:	0028      	movs	r0, r5
 8006aba:	f000 f877 	bl	8006bac <_malloc_r>
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d108      	bne.n	8006ad4 <__smakebuf_r+0x44>
 8006ac2:	220c      	movs	r2, #12
 8006ac4:	5ea3      	ldrsh	r3, [r4, r2]
 8006ac6:	059a      	lsls	r2, r3, #22
 8006ac8:	d4ef      	bmi.n	8006aaa <__smakebuf_r+0x1a>
 8006aca:	2203      	movs	r2, #3
 8006acc:	4393      	bics	r3, r2
 8006ace:	431e      	orrs	r6, r3
 8006ad0:	81a6      	strh	r6, [r4, #12]
 8006ad2:	e7e4      	b.n	8006a9e <__smakebuf_r+0xe>
 8006ad4:	4b0f      	ldr	r3, [pc, #60]	; (8006b14 <__smakebuf_r+0x84>)
 8006ad6:	62ab      	str	r3, [r5, #40]	; 0x28
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	89a2      	ldrh	r2, [r4, #12]
 8006adc:	6020      	str	r0, [r4, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	81a3      	strh	r3, [r4, #12]
 8006ae2:	9b00      	ldr	r3, [sp, #0]
 8006ae4:	6120      	str	r0, [r4, #16]
 8006ae6:	6163      	str	r3, [r4, #20]
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00d      	beq.n	8006b0a <__smakebuf_r+0x7a>
 8006aee:	0028      	movs	r0, r5
 8006af0:	230e      	movs	r3, #14
 8006af2:	5ee1      	ldrsh	r1, [r4, r3]
 8006af4:	f000 f94e 	bl	8006d94 <_isatty_r>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d006      	beq.n	8006b0a <__smakebuf_r+0x7a>
 8006afc:	2203      	movs	r2, #3
 8006afe:	89a3      	ldrh	r3, [r4, #12]
 8006b00:	4393      	bics	r3, r2
 8006b02:	001a      	movs	r2, r3
 8006b04:	2301      	movs	r3, #1
 8006b06:	4313      	orrs	r3, r2
 8006b08:	81a3      	strh	r3, [r4, #12]
 8006b0a:	89a0      	ldrh	r0, [r4, #12]
 8006b0c:	4307      	orrs	r7, r0
 8006b0e:	81a7      	strh	r7, [r4, #12]
 8006b10:	e7cb      	b.n	8006aaa <__smakebuf_r+0x1a>
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	0800687d 	.word	0x0800687d

08006b18 <_free_r>:
 8006b18:	b570      	push	{r4, r5, r6, lr}
 8006b1a:	0005      	movs	r5, r0
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	d010      	beq.n	8006b42 <_free_r+0x2a>
 8006b20:	1f0c      	subs	r4, r1, #4
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da00      	bge.n	8006b2a <_free_r+0x12>
 8006b28:	18e4      	adds	r4, r4, r3
 8006b2a:	0028      	movs	r0, r5
 8006b2c:	f000 f958 	bl	8006de0 <__malloc_lock>
 8006b30:	4a1d      	ldr	r2, [pc, #116]	; (8006ba8 <_free_r+0x90>)
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d105      	bne.n	8006b44 <_free_r+0x2c>
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	6014      	str	r4, [r2, #0]
 8006b3c:	0028      	movs	r0, r5
 8006b3e:	f000 f957 	bl	8006df0 <__malloc_unlock>
 8006b42:	bd70      	pop	{r4, r5, r6, pc}
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x42>
 8006b48:	6821      	ldr	r1, [r4, #0]
 8006b4a:	1860      	adds	r0, r4, r1
 8006b4c:	4283      	cmp	r3, r0
 8006b4e:	d1f3      	bne.n	8006b38 <_free_r+0x20>
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	1841      	adds	r1, r0, r1
 8006b56:	6021      	str	r1, [r4, #0]
 8006b58:	e7ee      	b.n	8006b38 <_free_r+0x20>
 8006b5a:	001a      	movs	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <_free_r+0x4e>
 8006b62:	42a3      	cmp	r3, r4
 8006b64:	d9f9      	bls.n	8006b5a <_free_r+0x42>
 8006b66:	6811      	ldr	r1, [r2, #0]
 8006b68:	1850      	adds	r0, r2, r1
 8006b6a:	42a0      	cmp	r0, r4
 8006b6c:	d10b      	bne.n	8006b86 <_free_r+0x6e>
 8006b6e:	6820      	ldr	r0, [r4, #0]
 8006b70:	1809      	adds	r1, r1, r0
 8006b72:	1850      	adds	r0, r2, r1
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	4283      	cmp	r3, r0
 8006b78:	d1e0      	bne.n	8006b3c <_free_r+0x24>
 8006b7a:	6818      	ldr	r0, [r3, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	1841      	adds	r1, r0, r1
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	6053      	str	r3, [r2, #4]
 8006b84:	e7da      	b.n	8006b3c <_free_r+0x24>
 8006b86:	42a0      	cmp	r0, r4
 8006b88:	d902      	bls.n	8006b90 <_free_r+0x78>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	e7d5      	b.n	8006b3c <_free_r+0x24>
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	1860      	adds	r0, r4, r1
 8006b94:	4283      	cmp	r3, r0
 8006b96:	d103      	bne.n	8006ba0 <_free_r+0x88>
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	1841      	adds	r1, r0, r1
 8006b9e:	6021      	str	r1, [r4, #0]
 8006ba0:	6063      	str	r3, [r4, #4]
 8006ba2:	6054      	str	r4, [r2, #4]
 8006ba4:	e7ca      	b.n	8006b3c <_free_r+0x24>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	200011f4 	.word	0x200011f4

08006bac <_malloc_r>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	2303      	movs	r3, #3
 8006bb0:	1ccd      	adds	r5, r1, #3
 8006bb2:	439d      	bics	r5, r3
 8006bb4:	3508      	adds	r5, #8
 8006bb6:	0006      	movs	r6, r0
 8006bb8:	2d0c      	cmp	r5, #12
 8006bba:	d21f      	bcs.n	8006bfc <_malloc_r+0x50>
 8006bbc:	250c      	movs	r5, #12
 8006bbe:	42a9      	cmp	r1, r5
 8006bc0:	d81e      	bhi.n	8006c00 <_malloc_r+0x54>
 8006bc2:	0030      	movs	r0, r6
 8006bc4:	f000 f90c 	bl	8006de0 <__malloc_lock>
 8006bc8:	4925      	ldr	r1, [pc, #148]	; (8006c60 <_malloc_r+0xb4>)
 8006bca:	680a      	ldr	r2, [r1, #0]
 8006bcc:	0014      	movs	r4, r2
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	d11a      	bne.n	8006c08 <_malloc_r+0x5c>
 8006bd2:	4f24      	ldr	r7, [pc, #144]	; (8006c64 <_malloc_r+0xb8>)
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <_malloc_r+0x38>
 8006bda:	0021      	movs	r1, r4
 8006bdc:	0030      	movs	r0, r6
 8006bde:	f000 f843 	bl	8006c68 <_sbrk_r>
 8006be2:	6038      	str	r0, [r7, #0]
 8006be4:	0029      	movs	r1, r5
 8006be6:	0030      	movs	r0, r6
 8006be8:	f000 f83e 	bl	8006c68 <_sbrk_r>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d12b      	bne.n	8006c48 <_malloc_r+0x9c>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	0030      	movs	r0, r6
 8006bf4:	6033      	str	r3, [r6, #0]
 8006bf6:	f000 f8fb 	bl	8006df0 <__malloc_unlock>
 8006bfa:	e003      	b.n	8006c04 <_malloc_r+0x58>
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	dade      	bge.n	8006bbe <_malloc_r+0x12>
 8006c00:	230c      	movs	r3, #12
 8006c02:	6033      	str	r3, [r6, #0]
 8006c04:	2000      	movs	r0, #0
 8006c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	1b5b      	subs	r3, r3, r5
 8006c0c:	d419      	bmi.n	8006c42 <_malloc_r+0x96>
 8006c0e:	2b0b      	cmp	r3, #11
 8006c10:	d903      	bls.n	8006c1a <_malloc_r+0x6e>
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	18e4      	adds	r4, r4, r3
 8006c16:	6025      	str	r5, [r4, #0]
 8006c18:	e003      	b.n	8006c22 <_malloc_r+0x76>
 8006c1a:	6863      	ldr	r3, [r4, #4]
 8006c1c:	42a2      	cmp	r2, r4
 8006c1e:	d10e      	bne.n	8006c3e <_malloc_r+0x92>
 8006c20:	600b      	str	r3, [r1, #0]
 8006c22:	0030      	movs	r0, r6
 8006c24:	f000 f8e4 	bl	8006df0 <__malloc_unlock>
 8006c28:	0020      	movs	r0, r4
 8006c2a:	2207      	movs	r2, #7
 8006c2c:	300b      	adds	r0, #11
 8006c2e:	1d23      	adds	r3, r4, #4
 8006c30:	4390      	bics	r0, r2
 8006c32:	1ac2      	subs	r2, r0, r3
 8006c34:	4298      	cmp	r0, r3
 8006c36:	d0e6      	beq.n	8006c06 <_malloc_r+0x5a>
 8006c38:	1a1b      	subs	r3, r3, r0
 8006c3a:	50a3      	str	r3, [r4, r2]
 8006c3c:	e7e3      	b.n	8006c06 <_malloc_r+0x5a>
 8006c3e:	6053      	str	r3, [r2, #4]
 8006c40:	e7ef      	b.n	8006c22 <_malloc_r+0x76>
 8006c42:	0022      	movs	r2, r4
 8006c44:	6864      	ldr	r4, [r4, #4]
 8006c46:	e7c2      	b.n	8006bce <_malloc_r+0x22>
 8006c48:	2303      	movs	r3, #3
 8006c4a:	1cc4      	adds	r4, r0, #3
 8006c4c:	439c      	bics	r4, r3
 8006c4e:	42a0      	cmp	r0, r4
 8006c50:	d0e1      	beq.n	8006c16 <_malloc_r+0x6a>
 8006c52:	1a21      	subs	r1, r4, r0
 8006c54:	0030      	movs	r0, r6
 8006c56:	f000 f807 	bl	8006c68 <_sbrk_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	d1db      	bne.n	8006c16 <_malloc_r+0x6a>
 8006c5e:	e7c7      	b.n	8006bf0 <_malloc_r+0x44>
 8006c60:	200011f4 	.word	0x200011f4
 8006c64:	200011f8 	.word	0x200011f8

08006c68 <_sbrk_r>:
 8006c68:	2300      	movs	r3, #0
 8006c6a:	b570      	push	{r4, r5, r6, lr}
 8006c6c:	4d06      	ldr	r5, [pc, #24]	; (8006c88 <_sbrk_r+0x20>)
 8006c6e:	0004      	movs	r4, r0
 8006c70:	0008      	movs	r0, r1
 8006c72:	602b      	str	r3, [r5, #0]
 8006c74:	f7f9 ff02 	bl	8000a7c <_sbrk>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d103      	bne.n	8006c84 <_sbrk_r+0x1c>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d000      	beq.n	8006c84 <_sbrk_r+0x1c>
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	bd70      	pop	{r4, r5, r6, pc}
 8006c86:	46c0      	nop			; (mov r8, r8)
 8006c88:	200014ec 	.word	0x200014ec

08006c8c <__sread>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	000c      	movs	r4, r1
 8006c90:	250e      	movs	r5, #14
 8006c92:	5f49      	ldrsh	r1, [r1, r5]
 8006c94:	f000 f8b4 	bl	8006e00 <_read_r>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	db03      	blt.n	8006ca4 <__sread+0x18>
 8006c9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006c9e:	181b      	adds	r3, r3, r0
 8006ca0:	6563      	str	r3, [r4, #84]	; 0x54
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	89a3      	ldrh	r3, [r4, #12]
 8006ca6:	4a02      	ldr	r2, [pc, #8]	; (8006cb0 <__sread+0x24>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	e7f9      	b.n	8006ca2 <__sread+0x16>
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	ffffefff 	.word	0xffffefff

08006cb4 <__swrite>:
 8006cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb6:	001f      	movs	r7, r3
 8006cb8:	898b      	ldrh	r3, [r1, #12]
 8006cba:	0005      	movs	r5, r0
 8006cbc:	000c      	movs	r4, r1
 8006cbe:	0016      	movs	r6, r2
 8006cc0:	05db      	lsls	r3, r3, #23
 8006cc2:	d505      	bpl.n	8006cd0 <__swrite+0x1c>
 8006cc4:	230e      	movs	r3, #14
 8006cc6:	5ec9      	ldrsh	r1, [r1, r3]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2302      	movs	r3, #2
 8006ccc:	f000 f874 	bl	8006db8 <_lseek_r>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	4a05      	ldr	r2, [pc, #20]	; (8006ce8 <__swrite+0x34>)
 8006cd4:	0028      	movs	r0, r5
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	0032      	movs	r2, r6
 8006cdc:	230e      	movs	r3, #14
 8006cde:	5ee1      	ldrsh	r1, [r4, r3]
 8006ce0:	003b      	movs	r3, r7
 8006ce2:	f000 f81f 	bl	8006d24 <_write_r>
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	ffffefff 	.word	0xffffefff

08006cec <__sseek>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	000c      	movs	r4, r1
 8006cf0:	250e      	movs	r5, #14
 8006cf2:	5f49      	ldrsh	r1, [r1, r5]
 8006cf4:	f000 f860 	bl	8006db8 <_lseek_r>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	1c42      	adds	r2, r0, #1
 8006cfc:	d103      	bne.n	8006d06 <__sseek+0x1a>
 8006cfe:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <__sseek+0x28>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	bd70      	pop	{r4, r5, r6, pc}
 8006d06:	2280      	movs	r2, #128	; 0x80
 8006d08:	0152      	lsls	r2, r2, #5
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	81a3      	strh	r3, [r4, #12]
 8006d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8006d10:	e7f8      	b.n	8006d04 <__sseek+0x18>
 8006d12:	46c0      	nop			; (mov r8, r8)
 8006d14:	ffffefff 	.word	0xffffefff

08006d18 <__sclose>:
 8006d18:	b510      	push	{r4, lr}
 8006d1a:	230e      	movs	r3, #14
 8006d1c:	5ec9      	ldrsh	r1, [r1, r3]
 8006d1e:	f000 f815 	bl	8006d4c <_close_r>
 8006d22:	bd10      	pop	{r4, pc}

08006d24 <_write_r>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	0004      	movs	r4, r0
 8006d28:	0008      	movs	r0, r1
 8006d2a:	0011      	movs	r1, r2
 8006d2c:	001a      	movs	r2, r3
 8006d2e:	2300      	movs	r3, #0
 8006d30:	4d05      	ldr	r5, [pc, #20]	; (8006d48 <_write_r+0x24>)
 8006d32:	602b      	str	r3, [r5, #0]
 8006d34:	f7f9 fe59 	bl	80009ea <_write>
 8006d38:	1c43      	adds	r3, r0, #1
 8006d3a:	d103      	bne.n	8006d44 <_write_r+0x20>
 8006d3c:	682b      	ldr	r3, [r5, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d000      	beq.n	8006d44 <_write_r+0x20>
 8006d42:	6023      	str	r3, [r4, #0]
 8006d44:	bd70      	pop	{r4, r5, r6, pc}
 8006d46:	46c0      	nop			; (mov r8, r8)
 8006d48:	200014ec 	.word	0x200014ec

08006d4c <_close_r>:
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	b570      	push	{r4, r5, r6, lr}
 8006d50:	4d06      	ldr	r5, [pc, #24]	; (8006d6c <_close_r+0x20>)
 8006d52:	0004      	movs	r4, r0
 8006d54:	0008      	movs	r0, r1
 8006d56:	602b      	str	r3, [r5, #0]
 8006d58:	f7f9 fe63 	bl	8000a22 <_close>
 8006d5c:	1c43      	adds	r3, r0, #1
 8006d5e:	d103      	bne.n	8006d68 <_close_r+0x1c>
 8006d60:	682b      	ldr	r3, [r5, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d000      	beq.n	8006d68 <_close_r+0x1c>
 8006d66:	6023      	str	r3, [r4, #0]
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	46c0      	nop			; (mov r8, r8)
 8006d6c:	200014ec 	.word	0x200014ec

08006d70 <_fstat_r>:
 8006d70:	2300      	movs	r3, #0
 8006d72:	b570      	push	{r4, r5, r6, lr}
 8006d74:	4d06      	ldr	r5, [pc, #24]	; (8006d90 <_fstat_r+0x20>)
 8006d76:	0004      	movs	r4, r0
 8006d78:	0008      	movs	r0, r1
 8006d7a:	0011      	movs	r1, r2
 8006d7c:	602b      	str	r3, [r5, #0]
 8006d7e:	f7f9 fe5a 	bl	8000a36 <_fstat>
 8006d82:	1c43      	adds	r3, r0, #1
 8006d84:	d103      	bne.n	8006d8e <_fstat_r+0x1e>
 8006d86:	682b      	ldr	r3, [r5, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d000      	beq.n	8006d8e <_fstat_r+0x1e>
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	200014ec 	.word	0x200014ec

08006d94 <_isatty_r>:
 8006d94:	2300      	movs	r3, #0
 8006d96:	b570      	push	{r4, r5, r6, lr}
 8006d98:	4d06      	ldr	r5, [pc, #24]	; (8006db4 <_isatty_r+0x20>)
 8006d9a:	0004      	movs	r4, r0
 8006d9c:	0008      	movs	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7f9 fe57 	bl	8000a52 <_isatty>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d103      	bne.n	8006db0 <_isatty_r+0x1c>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d000      	beq.n	8006db0 <_isatty_r+0x1c>
 8006dae:	6023      	str	r3, [r4, #0]
 8006db0:	bd70      	pop	{r4, r5, r6, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	200014ec 	.word	0x200014ec

08006db8 <_lseek_r>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	0004      	movs	r4, r0
 8006dbc:	0008      	movs	r0, r1
 8006dbe:	0011      	movs	r1, r2
 8006dc0:	001a      	movs	r2, r3
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4d05      	ldr	r5, [pc, #20]	; (8006ddc <_lseek_r+0x24>)
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7f9 fe4c 	bl	8000a64 <_lseek>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d103      	bne.n	8006dd8 <_lseek_r+0x20>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d000      	beq.n	8006dd8 <_lseek_r+0x20>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd70      	pop	{r4, r5, r6, pc}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	200014ec 	.word	0x200014ec

08006de0 <__malloc_lock>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4802      	ldr	r0, [pc, #8]	; (8006dec <__malloc_lock+0xc>)
 8006de4:	f7ff fe29 	bl	8006a3a <__retarget_lock_acquire_recursive>
 8006de8:	bd10      	pop	{r4, pc}
 8006dea:	46c0      	nop			; (mov r8, r8)
 8006dec:	200014e4 	.word	0x200014e4

08006df0 <__malloc_unlock>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	4802      	ldr	r0, [pc, #8]	; (8006dfc <__malloc_unlock+0xc>)
 8006df4:	f7ff fe22 	bl	8006a3c <__retarget_lock_release_recursive>
 8006df8:	bd10      	pop	{r4, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	200014e4 	.word	0x200014e4

08006e00 <_read_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	0004      	movs	r4, r0
 8006e04:	0008      	movs	r0, r1
 8006e06:	0011      	movs	r1, r2
 8006e08:	001a      	movs	r2, r3
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	4d05      	ldr	r5, [pc, #20]	; (8006e24 <_read_r+0x24>)
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	f7f9 fdce 	bl	80009b0 <_read>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	d103      	bne.n	8006e20 <_read_r+0x20>
 8006e18:	682b      	ldr	r3, [r5, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d000      	beq.n	8006e20 <_read_r+0x20>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd70      	pop	{r4, r5, r6, pc}
 8006e22:	46c0      	nop			; (mov r8, r8)
 8006e24:	200014ec 	.word	0x200014ec

08006e28 <_init>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr

08006e34 <_fini>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	46c0      	nop			; (mov r8, r8)
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr
